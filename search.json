[{"path":"https://helgasoft.github.io/echarty/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Larry Helgason. Maintainer.","code":""},{"path":"https://helgasoft.github.io/echarty/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Helgason L, echarts4r wicfJCl (2024). echarty: Minimal R/Shiny Interface JavaScript Library 'ECharts'. R package version 1.6.4.1, https://helgasoft.github.io/echarty/.","code":"@Manual{,   title = {echarty: Minimal R/Shiny Interface to JavaScript Library 'ECharts'},   author = {Larry Helgason and with initial code from John Coene's library echarts4r},   year = {2024},   note = {R package version 1.6.4.1},   url = {https://helgasoft.github.io/echarty/}, }"},{"path":"https://helgasoft.github.io/echarty/index.html","id":"id_-echarty","dir":"","previous_headings":"","what":"Minimal R/Shiny Interface to JavaScript Library ECharts","title":"Minimal R/Shiny Interface to JavaScript Library ECharts","text":"package thin R wrapper around Javascript library ECharts.One major command(ec.init) uses R lists support ECharts API. Benefit ECharts full functionality build interactive charts R Shiny minimal overhead. Wider connectivity deployment potential WebR crosstalk. (1) encourage users follow original ECharts API construct charts echarty. differs echarts4r uses commands chart options. Please consider granting Github star ⭐ show support.","code":""},{"path":"https://helgasoft.github.io/echarty/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Minimal R/Shiny Interface to JavaScript Library ECharts","text":"Latest development build 1.6.4.1 CRAN:","code":"if (!requireNamespace('remotes')) install.packages('remotes') remotes::install_github('helgasoft/echarty') install.packages('echarty')"},{"path":"https://helgasoft.github.io/echarty/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Minimal R/Shiny Interface to JavaScript Library ECharts","text":"","code":"library(echarty); library(dplyr)  #  scatter chart (default) cars |> ec.init()  #  parallel chart ToothGrowth |> ec.init(ctype= 'parallel')  #  3D chart with GL plugin iris |> group_by(Species) |> ec.init(load= '3D')  #  timeline of two series with grouping, formatting, autoPlay iris |> group_by(Species) |>  ec.init(   timeline= list(autoPlay= TRUE),   series.param = list(     symbolSize= ec.clmn('Petal.Width', scale= 9),     encode= list(x= 'Sepal.Width', y='Petal.Length'),     markLine= list(data= list(list(type='max'), list(type='min')))   ) )  # show a remote map chart, needs package leaflet installed echarty::ec.fromJson('https://helgasoft.github.io/echarty/test/pfull.json')"},{"path":"https://helgasoft.github.io/echarty/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Minimal R/Shiny Interface to JavaScript Library ECharts","text":"Coder good introduction, type library(echarty); demo(coder). WEBSITE vast gallery code tutorials. package also code examples included. Type ?ec.examples, copy/paste code see chart. Now can start building beautiful ECharts () R Shiny! Made echarty. Powered ECharts.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":null,"dir":"Reference","previous_headings":"","what":"echarty — -- Introduction --","title":"echarty — -- Introduction --","text":"echarty","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"description","dir":"Reference","previous_headings":"","what":"Description","title":"echarty — -- Introduction --","text":"echarty provides lean interface R Javascript library ECharts. encourage users follow original ECharts API documentation construct charts echarty. Main command ec.init can set multiple native ECharts options build chart. benefits - learn limited set commands, enjoy full functionality ECharts.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"package-conventions","dir":"Reference","previous_headings":"","what":"Package Conventions","title":"echarty — -- Introduction --","text":"pipe-friendly - supports %>% |> commands three prefixes help auto-completion: ec. general functions, like ec.init ecs. Shiny functions, like ecs.output ecr. rendering functions, like ecr.band","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"events","dir":"Reference","previous_headings":"","what":"Events","title":"echarty — -- Introduction --","text":"event handling Shiny see sample code eshiny.R, run demo(eshiny). Echarty three built-event callbacks - click, mouseover, mouseout. ECharts events initialized p$x$capture. Another option use p$x$JavaScript handlers, see code ec.examples.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"widget-x-parameters","dir":"Reference","previous_headings":"","what":"Widget x parameters","title":"echarty — -- Introduction --","text":"htmlwidget ECharts initialization parameters supported echarty. code samples ec.examples: capture = event name(s), monitor events, usually Shiny = define JavaScript code event handling, see ECharts registerMap = define map geoJSON file, see ECharts group = group-name chart, see ECharts connect = command connect charts group-name, see ECharts locale = EN(default) ZH, set locale parameter ec.init, see ECharts. renderer = canvas(default) svg, set renderer ec.init, see ECharts. jcode = custom JavaScript code execute, set js parameter ec.init","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"r-vs-javascript-numbering","dir":"Reference","previous_headings":"","what":"R vs Javascript numbering","title":"echarty — -- Introduction --","text":"R language counting starts 1. Javascript (JS) counting starts 0. ec.init supports R-counting indexes (ex. encode) dimension (ex. visualMap). ec.upd requires indexes dimensions set JS-counting.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"javascript-built-in-functions","dir":"Reference","previous_headings":"","what":"Javascript built-in functions","title":"echarty — -- Introduction --","text":"allow access charts JS. ec_chart(id) - get chart object id (former get_e_charts) ec_option(id) - get chart’s option object id (former get_e_charts_opt) Parameter ‘id’ internal variable echwid, value set ec.init parameter elementId. See demo code ec.examples","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"code-examples","dir":"Reference","previous_headings":"","what":"Code examples","title":"echarty — -- Introduction --","text":"complete list sample code locations: ec.examples code Github tests command examples, like ec.init Shiny code eshiny.R, run demo(eshiny) website gallery tutorials demos RPubs searchable gists answers Github issues","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"global-options","dir":"Reference","previous_headings":"","what":"Global Options","title":"echarty — -- Introduction --","text":"Options set R command options. Echarty uses following options: echarty.theme = name theme file, without extension, folder /inst/themes echarty.font = font family name echarty.urlTiles = tiles URL template leaflet maps","code":"# set/get global options options('echarty.theme'='jazz') # set getOption('echarty.theme')      # get #> [1] \"jazz\" options('echarty.theme'=NULL)   # remove"},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":null,"dir":"Reference","previous_headings":"","what":"Data column format — ec.clmn","title":"Data column format — ec.clmn","text":"Helper function display/format data column(s) index name","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data column format — ec.clmn","text":"","code":"ec.clmn(col = NULL, ..., scale = 1)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data column format — ec.clmn","text":"col single column index(number) column name(quoted string),  sprintf string template multiple columns. NULL(default) charts single values like tree, pie. 'json' display tooltip available values choose . 'log' write values JS console (F12) debugging. Can contain JS function starting 'function(' '(x) => {'. ... Comma separated column indexes names, col sprintf. allows formatting multiple columns, tooltip. scale positive number, multiplier numeric columns. scale 0, numeric values rounded.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data column format — ec.clmn","text":"JavaScript code string (usually function) marked executable, see JS.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data column format — ec.clmn","text":"function useful attributes like formatter, color, symbolSize, label. Column indexes counted R start 1. Omit col use index -1 single values tree/pie charts, axisLabel.formatter valueFormatter. See ec.data dendrogram example. Column indexes decimals combo charts multiple series, see ecr.band example. whole number part serie index, decimal part column index inside.col sprintf placeholder %@ column indexes column names.col sprintf can contain double quotes, single backquotes. Template placeholders formatting: %@ display column value -. %L@ display number locale format, like '12,345.09'. %LR@ rounded number locale format, like '12,345'. %R@ rounded number, like '12345'. %R2@ rounded number, two digits decimal point. %M@ marker series' color. trigger='axis' (multiple series) one can use decimal column indexes. See definition example .","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data column format — ec.clmn","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union tmp <- data.frame(Species = as.vector(unique(iris$Species)),                   emoji = c('A','B','C')) df <- iris |> inner_join(tmp)      # add 6th column emoji #> Joining with `by = join_by(Species)` df |> group_by(Species) |> ec.init(   series.param= list(label= list(show= TRUE, formatter= ec.clmn('emoji'))),   tooltip= list(formatter=     # with sprintf template + multiple column indexes     ec.clmn('%M@ species <b>%@<\/b><br>s.len <b>%@<\/b><br>s.wid <b>%@<\/b>', 5,1,2)) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[4,0,1]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%M@ species <b>%@<\\/b><br>s.len <b>%@<\\/b><br>s.wid <b>%@<\\/b>`, vv); return c; }\"},\"dataset\":[{\"dimensions\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\",\"emoji\"],\"source\":[[5.1,3.5,1.4,0.2,\"setosa\",\"A\"],[4.9,3,1.4,0.2,\"setosa\",\"A\"],[4.7,3.2,1.3,0.2,\"setosa\",\"A\"],[4.6,3.1,1.5,0.2,\"setosa\",\"A\"],[5,3.6,1.4,0.2,\"setosa\",\"A\"],[5.4,3.9,1.7,0.4,\"setosa\",\"A\"],[4.6,3.4,1.4,0.3,\"setosa\",\"A\"],[5,3.4,1.5,0.2,\"setosa\",\"A\"],[4.4,2.9,1.4,0.2,\"setosa\",\"A\"],[4.9,3.1,1.5,0.1,\"setosa\",\"A\"],[5.4,3.7,1.5,0.2,\"setosa\",\"A\"],[4.8,3.4,1.6,0.2,\"setosa\",\"A\"],[4.8,3,1.4,0.1,\"setosa\",\"A\"],[4.3,3,1.1,0.1,\"setosa\",\"A\"],[5.8,4,1.2,0.2,\"setosa\",\"A\"],[5.7,4.4,1.5,0.4,\"setosa\",\"A\"],[5.4,3.9,1.3,0.4,\"setosa\",\"A\"],[5.1,3.5,1.4,0.3,\"setosa\",\"A\"],[5.7,3.8,1.7,0.3,\"setosa\",\"A\"],[5.1,3.8,1.5,0.3,\"setosa\",\"A\"],[5.4,3.4,1.7,0.2,\"setosa\",\"A\"],[5.1,3.7,1.5,0.4,\"setosa\",\"A\"],[4.6,3.6,1,0.2,\"setosa\",\"A\"],[5.1,3.3,1.7,0.5,\"setosa\",\"A\"],[4.8,3.4,1.9,0.2,\"setosa\",\"A\"],[5,3,1.6,0.2,\"setosa\",\"A\"],[5,3.4,1.6,0.4,\"setosa\",\"A\"],[5.2,3.5,1.5,0.2,\"setosa\",\"A\"],[5.2,3.4,1.4,0.2,\"setosa\",\"A\"],[4.7,3.2,1.6,0.2,\"setosa\",\"A\"],[4.8,3.1,1.6,0.2,\"setosa\",\"A\"],[5.4,3.4,1.5,0.4,\"setosa\",\"A\"],[5.2,4.1,1.5,0.1,\"setosa\",\"A\"],[5.5,4.2,1.4,0.2,\"setosa\",\"A\"],[4.9,3.1,1.5,0.2,\"setosa\",\"A\"],[5,3.2,1.2,0.2,\"setosa\",\"A\"],[5.5,3.5,1.3,0.2,\"setosa\",\"A\"],[4.9,3.6,1.4,0.1,\"setosa\",\"A\"],[4.4,3,1.3,0.2,\"setosa\",\"A\"],[5.1,3.4,1.5,0.2,\"setosa\",\"A\"],[5,3.5,1.3,0.3,\"setosa\",\"A\"],[4.5,2.3,1.3,0.3,\"setosa\",\"A\"],[4.4,3.2,1.3,0.2,\"setosa\",\"A\"],[5,3.5,1.6,0.6,\"setosa\",\"A\"],[5.1,3.8,1.9,0.4,\"setosa\",\"A\"],[4.8,3,1.4,0.3,\"setosa\",\"A\"],[5.1,3.8,1.6,0.2,\"setosa\",\"A\"],[4.6,3.2,1.4,0.2,\"setosa\",\"A\"],[5.3,3.7,1.5,0.2,\"setosa\",\"A\"],[5,3.3,1.4,0.2,\"setosa\",\"A\"],[7,3.2,4.7,1.4,\"versicolor\",\"B\"],[6.4,3.2,4.5,1.5,\"versicolor\",\"B\"],[6.9,3.1,4.9,1.5,\"versicolor\",\"B\"],[5.5,2.3,4,1.3,\"versicolor\",\"B\"],[6.5,2.8,4.6,1.5,\"versicolor\",\"B\"],[5.7,2.8,4.5,1.3,\"versicolor\",\"B\"],[6.3,3.3,4.7,1.6,\"versicolor\",\"B\"],[4.9,2.4,3.3,1,\"versicolor\",\"B\"],[6.6,2.9,4.6,1.3,\"versicolor\",\"B\"],[5.2,2.7,3.9,1.4,\"versicolor\",\"B\"],[5,2,3.5,1,\"versicolor\",\"B\"],[5.9,3,4.2,1.5,\"versicolor\",\"B\"],[6,2.2,4,1,\"versicolor\",\"B\"],[6.1,2.9,4.7,1.4,\"versicolor\",\"B\"],[5.6,2.9,3.6,1.3,\"versicolor\",\"B\"],[6.7,3.1,4.4,1.4,\"versicolor\",\"B\"],[5.6,3,4.5,1.5,\"versicolor\",\"B\"],[5.8,2.7,4.1,1,\"versicolor\",\"B\"],[6.2,2.2,4.5,1.5,\"versicolor\",\"B\"],[5.6,2.5,3.9,1.1,\"versicolor\",\"B\"],[5.9,3.2,4.8,1.8,\"versicolor\",\"B\"],[6.1,2.8,4,1.3,\"versicolor\",\"B\"],[6.3,2.5,4.9,1.5,\"versicolor\",\"B\"],[6.1,2.8,4.7,1.2,\"versicolor\",\"B\"],[6.4,2.9,4.3,1.3,\"versicolor\",\"B\"],[6.6,3,4.4,1.4,\"versicolor\",\"B\"],[6.8,2.8,4.8,1.4,\"versicolor\",\"B\"],[6.7,3,5,1.7,\"versicolor\",\"B\"],[6,2.9,4.5,1.5,\"versicolor\",\"B\"],[5.7,2.6,3.5,1,\"versicolor\",\"B\"],[5.5,2.4,3.8,1.1,\"versicolor\",\"B\"],[5.5,2.4,3.7,1,\"versicolor\",\"B\"],[5.8,2.7,3.9,1.2,\"versicolor\",\"B\"],[6,2.7,5.1,1.6,\"versicolor\",\"B\"],[5.4,3,4.5,1.5,\"versicolor\",\"B\"],[6,3.4,4.5,1.6,\"versicolor\",\"B\"],[6.7,3.1,4.7,1.5,\"versicolor\",\"B\"],[6.3,2.3,4.4,1.3,\"versicolor\",\"B\"],[5.6,3,4.1,1.3,\"versicolor\",\"B\"],[5.5,2.5,4,1.3,\"versicolor\",\"B\"],[5.5,2.6,4.4,1.2,\"versicolor\",\"B\"],[6.1,3,4.6,1.4,\"versicolor\",\"B\"],[5.8,2.6,4,1.2,\"versicolor\",\"B\"],[5,2.3,3.3,1,\"versicolor\",\"B\"],[5.6,2.7,4.2,1.3,\"versicolor\",\"B\"],[5.7,3,4.2,1.2,\"versicolor\",\"B\"],[5.7,2.9,4.2,1.3,\"versicolor\",\"B\"],[6.2,2.9,4.3,1.3,\"versicolor\",\"B\"],[5.1,2.5,3,1.1,\"versicolor\",\"B\"],[5.7,2.8,4.1,1.3,\"versicolor\",\"B\"],[6.3,3.3,6,2.5,\"virginica\",\"C\"],[5.8,2.7,5.1,1.9,\"virginica\",\"C\"],[7.1,3,5.9,2.1,\"virginica\",\"C\"],[6.3,2.9,5.6,1.8,\"virginica\",\"C\"],[6.5,3,5.8,2.2,\"virginica\",\"C\"],[7.6,3,6.6,2.1,\"virginica\",\"C\"],[4.9,2.5,4.5,1.7,\"virginica\",\"C\"],[7.3,2.9,6.3,1.8,\"virginica\",\"C\"],[6.7,2.5,5.8,1.8,\"virginica\",\"C\"],[7.2,3.6,6.1,2.5,\"virginica\",\"C\"],[6.5,3.2,5.1,2,\"virginica\",\"C\"],[6.4,2.7,5.3,1.9,\"virginica\",\"C\"],[6.8,3,5.5,2.1,\"virginica\",\"C\"],[5.7,2.5,5,2,\"virginica\",\"C\"],[5.8,2.8,5.1,2.4,\"virginica\",\"C\"],[6.4,3.2,5.3,2.3,\"virginica\",\"C\"],[6.5,3,5.5,1.8,\"virginica\",\"C\"],[7.7,3.8,6.7,2.2,\"virginica\",\"C\"],[7.7,2.6,6.9,2.3,\"virginica\",\"C\"],[6,2.2,5,1.5,\"virginica\",\"C\"],[6.9,3.2,5.7,2.3,\"virginica\",\"C\"],[5.6,2.8,4.9,2,\"virginica\",\"C\"],[7.7,2.8,6.7,2,\"virginica\",\"C\"],[6.3,2.7,4.9,1.8,\"virginica\",\"C\"],[6.7,3.3,5.7,2.1,\"virginica\",\"C\"],[7.2,3.2,6,1.8,\"virginica\",\"C\"],[6.2,2.8,4.8,1.8,\"virginica\",\"C\"],[6.1,3,4.9,1.8,\"virginica\",\"C\"],[6.4,2.8,5.6,2.1,\"virginica\",\"C\"],[7.2,3,5.8,1.6,\"virginica\",\"C\"],[7.4,2.8,6.1,1.9,\"virginica\",\"C\"],[7.9,3.8,6.4,2,\"virginica\",\"C\"],[6.4,2.8,5.6,2.2,\"virginica\",\"C\"],[6.3,2.8,5.1,1.5,\"virginica\",\"C\"],[6.1,2.6,5.6,1.4,\"virginica\",\"C\"],[7.7,3,6.1,2.3,\"virginica\",\"C\"],[6.3,3.4,5.6,2.4,\"virginica\",\"C\"],[6.4,3.1,5.5,1.8,\"virginica\",\"C\"],[6,3,4.8,1.8,\"virginica\",\"C\"],[6.9,3.1,5.4,2.1,\"virginica\",\"C\"],[6.7,3.1,5.6,2.4,\"virginica\",\"C\"],[6.9,3.1,5.1,2.3,\"virginica\",\"C\"],[5.8,2.7,5.1,1.9,\"virginica\",\"C\"],[6.8,3.2,5.9,2.3,\"virginica\",\"C\"],[6.7,3.3,5.7,2.5,\"virginica\",\"C\"],[6.7,3,5.2,2.3,\"virginica\",\"C\"],[6.3,2.5,5,1.9,\"virginica\",\"C\"],[6.5,3,5.2,2,\"virginica\",\"C\"],[6.2,3.4,5.4,2.3,\"virginica\",\"C\"],[5.9,3,5.1,1.8,\"virginica\",\"C\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"setosa\"}},\"id\":\"setosa\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"versicolor\"}},\"id\":\"versicolor\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"virginica\"}},\"id\":\"virginica\"}],\"series\":[{\"type\":\"scatter\",\"datasetIndex\":1,\"name\":\"setosa\",\"label\":{\"show\":true,\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species','emoji'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['emoji']]; else {  if (!aa || !aa.length) return `no data`;  args= [`emoji`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@`, vv); return c; }\"}},{\"type\":\"scatter\",\"datasetIndex\":2,\"name\":\"versicolor\",\"label\":{\"show\":true,\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species','emoji'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['emoji']]; else {  if (!aa || !aa.length) return `no data`;  args= [`emoji`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@`, vv); return c; }\"}},{\"type\":\"scatter\",\"datasetIndex\":3,\"name\":\"virginica\",\"label\":{\"show\":true,\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species','emoji'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['emoji']]; else {  if (!aa || !aa.length) return `no data`;  args= [`emoji`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@`, vv); return c; }\"}}],\"legend\":{\"data\":[{\"name\":\"setosa\"},{\"name\":\"versicolor\"},{\"name\":\"virginica\"}]},\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Length\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Width\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.tooltip.formatter\",\"opts.series.0.label.formatter\",\"opts.series.1.label.formatter\",\"opts.series.2.label.formatter\"],\"jsHooks\":[]} # tooltip decimal indexes work with full data sets (no missing/partial data) ChickWeight |> mutate(Chick=as.numeric(Chick)) |> filter(Chick>47) |> group_by(Chick) |> ec.init(   tooltip= list(trigger='axis',                  formatter= ec.clmn(\"48: %@<br>49: %@<br>50: %@\", 1.1, 2.1, 3.1)),   xAxis= list(type='category'), legend= list(formatter= 'Ch.{name}'),   series.param= list(type='line', encode= list(x='Time', y='weight')), )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"tooltip\":{\"trigger\":\"axis\",\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[0.1,1.1,2.1]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`48: %@<br>49: %@<br>50: %@`, vv); return c; }\"},\"xAxis\":{\"type\":\"category\",\"name\":\"Time\"},\"legend\":{\"formatter\":\"Ch.{name}\"},\"dataset\":[{\"dimensions\":[\"weight\",\"Time\",\"Chick\",\"Diet\"],\"source\":[[42,0,49,\"4\"],[49,2,49,\"4\"],[63,4,49,\"4\"],[84,6,49,\"4\"],[103,8,49,\"4\"],[126,10,49,\"4\"],[160,12,49,\"4\"],[174,14,49,\"4\"],[204,16,49,\"4\"],[234,18,49,\"4\"],[269,20,49,\"4\"],[281,21,49,\"4\"],[39,0,50,\"4\"],[50,2,50,\"4\"],[62,4,50,\"4\"],[80,6,50,\"4\"],[104,8,50,\"4\"],[125,10,50,\"4\"],[154,12,50,\"4\"],[170,14,50,\"4\"],[222,16,50,\"4\"],[261,18,50,\"4\"],[303,20,50,\"4\"],[322,21,50,\"4\"],[41,0,48,\"4\"],[54,2,48,\"4\"],[67,4,48,\"4\"],[84,6,48,\"4\"],[105,8,48,\"4\"],[122,10,48,\"4\"],[155,12,48,\"4\"],[175,14,48,\"4\"],[205,16,48,\"4\"],[234,18,48,\"4\"],[264,20,48,\"4\"],[264,21,48,\"4\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Chick\",\"=\":48}},\"id\":48},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Chick\",\"=\":49}},\"id\":49},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Chick\",\"=\":50}},\"id\":50}],\"series\":[{\"datasetIndex\":1,\"name\":\"48\",\"type\":\"line\",\"encode\":{\"x\":\"Time\",\"y\":\"weight\"}},{\"datasetIndex\":2,\"name\":\"49\",\"type\":\"line\",\"encode\":{\"x\":\"Time\",\"y\":\"weight\"}},{\"datasetIndex\":3,\"name\":\"50\",\"type\":\"line\",\"encode\":{\"x\":\"Time\",\"y\":\"weight\"}}],\"yAxis\":{\"show\":true,\"name\":\"weight\",\"type\":\"value\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.tooltip.formatter\"],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data helper — ec.data","title":"Data helper — ec.data","text":"Make data lists data.frame","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data helper — ec.data","text":"","code":"ec.data(df, format = \"dataset\", header = FALSE, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data helper — ec.data","text":"df Required chart data data.frame.  Except format dendrogram, df list, result hclust function. format Output list format dataset = list used dataset (default), series.data (without header). values = list customized series.data names = named lists useful named data like sankey links. dendrogram = build series data Hierarchical Clustering dendrogram treePC = build series data tree charts parent/children data.frame treeTT = build series data tree charts data.frame like Titanic. boxplot = build dataset source lists, see Details header dataset, include column names , default TRUE. Set FALSE series.data. ... optional parameters Optional parameters boxplot : layout = 'h' horizontal(default) 'v' vertical layout outliers boolean add outlier points (default FALSE) jitter value jitter numerical values second column, default 0 (scatter). Adds scatter series top boxplot. Optional parameter names: nasep = single character name separator nested lists, see Examples.  Purpose facilitate conversion data.frame nested named lists.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data helper — ec.data","text":"list dataset.source, series.data lists: boxplot - named list, see Details Examples  dendrogram & treePC - tree structure, see format tree data","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data helper — ec.data","text":"format='boxplot' requires first two df columns :    column non-computational categorical axis   column (numeric) data compute five boxplot values Additional grouping supported column second. Groups show legend, enabled. Returns list(dataset, series, xAxis, yAxis) set params ec.init. Make sure enough data computation, 4+ values per boxplot.format='treeTT' expects data.frame df columns pathString,value,(optional itemStyle) FromDataFrameTable. add column 'pct' value percentage node. See Details.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data helper — ec.data","text":"","code":"library(dplyr) ds <- iris |> relocate(Species) |>    ec.data(format= 'boxplot', jitter= 0.1, layout= 'v') ec.init(   dataset= ds$dataset, series= ds$series, xAxis= ds$xAxis, yAxis= ds$yAxis,   legend= list(show= TRUE), tooltip= list(show= TRUE) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"source\":[[5.1,4.9,4.7,4.6,5,5.4,4.6,5,4.4,4.9,5.4,4.8,4.8,4.3,5.8,5.7,5.4,5.1,5.7,5.1,5.4,5.1,4.6,5.1,4.8,5,5,5.2,5.2,4.7,4.8,5.4,5.2,5.5,4.9,5,5.5,4.9,4.4,5.1,5,4.5,4.4,5,5.1,4.8,5.1,4.6,5.3,5],[7,6.4,6.9,5.5,6.5,5.7,6.3,4.9,6.6,5.2,5,5.9,6,6.1,5.6,6.7,5.6,5.8,6.2,5.6,5.9,6.1,6.3,6.1,6.4,6.6,6.8,6.7,6,5.7,5.5,5.5,5.8,6,5.4,6,6.7,6.3,5.6,5.5,5.5,6.1,5.8,5,5.6,5.7,5.7,6.2,5.1,5.7],[6.3,5.8,7.1,6.3,6.5,7.6,4.9,7.3,6.7,7.2,6.5,6.4,6.8,5.7,5.8,6.4,6.5,7.7,7.7,6,6.9,5.6,7.7,6.3,6.7,7.2,6.2,6.1,6.4,7.2,7.4,7.9,6.4,6.3,6.1,7.7,6.3,6.4,6,6.9,6.7,6.9,5.8,6.8,6.7,6.7,6.3,6.5,6.2,5.9]]},{\"transform\":{\"type\":\"boxplot\",\"config\":{\"itemNameFormatter\":\"(p) => ['setosa','versicolor','virginica'][p.value]\"}}}],\"series\":[{\"type\":\"boxplot\",\"name\":\"boxplot\",\"datasetIndex\":1,\"encode\":{\"x\":null,\"y\":null,\"tooltip\":[\"Low\",\"Q1\",\"Q2\",\"Q3\",\"High\"]},\"coordinateSystem\":\"cartesian2d\"},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"v\",\"name\":\"setosa\",\"large\":true,\"z\":3,\"data\":[[0.4161500275135041,5.1],[0.5668666074518114,4.9],[0.5201521772425621,4.7],[0.431441688304767,4.6],[0.4014798882417381,5],[0.4932786994613707,5.4],[0.4995554777327925,4.6],[0.4579534489195794,5],[0.5465763974003494,4.4],[0.5545043022371828,4.9],[0.5749201321508736,5.4],[0.4349881253670901,4.8],[0.4068482665345073,4.8],[0.4640771461650729,4.3],[0.4804656476713717,5.8],[0.4391339669469744,5.7],[0.4807076234836131,5.4],[0.4127322914544493,5.1],[0.4777402626350522,5.7],[0.5951095670461655,5.1],[0.4579784590750933,5.4],[0.5356760854832828,5.1],[0.5470639197621494,4.6],[0.4391913466155529,5.1],[0.5961079349275679,4.8],[0.5483043058309705,5],[0.4102892552502453,5],[0.5060424927156418,5.2],[0.5391647757962346,5.2],[0.5377112006768584,4.7],[0.40624606506899,4.8],[0.4451125069055706,5.4],[0.4601661612279713,5.2],[0.527293122978881,5.5],[0.4958049099426717,4.9],[0.4864342516288161,5],[0.5412867675535381,5.5],[0.5897153152618557,4.9],[0.4360677536111325,4.4],[0.4433799752965569,5.1],[0.5360325835179538,5],[0.4997691221069545,4.5],[0.5283358696848154,4.4],[0.5320568698458373,5],[0.4192048316355795,5.1],[0.5531200327910483,4.8],[0.5539349608588964,5.1],[0.5981424624565989,4.6],[0.5941041805781424,5.3],[0.4778365521226078,5]],\"xAxisIndex\":1},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"v\",\"name\":\"versicolor\",\"large\":true,\"z\":3,\"data\":[[1.492237292928621,7],[1.463048350485042,6.4],[1.434935178793967,6.9],[1.506314708152786,5.5],[1.498727403208613,6.5],[1.555861725192517,5.7],[1.440835668565705,6.3],[1.542679455783218,4.9],[1.413043222343549,6.6],[1.4708413597662,5.2],[1.565039884205908,5],[1.45476364903152,5.9],[1.51400899020955,6],[1.467143816128373,6.1],[1.519252557773143,5.6],[1.438303606305271,6.7],[1.589552787551656,5.6],[1.508496081735939,5.8],[1.508920678682625,6.2],[1.455719430791214,5.6],[1.489340493828058,5.9],[1.474302236875519,6.1],[1.405612194864079,6.3],[1.493197438167408,6.1],[1.478006277466193,6.4],[1.404013043548912,6.6],[1.475394185539335,6.8],[1.511982567980886,6.7],[1.571416717208922,6],[1.476961942203343,5.7],[1.505583407124504,5.5],[1.520127504738048,5.5],[1.452274271659553,5.8],[1.458010032307357,6],[1.496015034802258,5.4],[1.584001109236851,6],[1.48014403693378,6.7],[1.44263454223983,6.3],[1.534353363141417,5.6],[1.411722822207957,5.5],[1.599413827061653,5.5],[1.429807093460113,6.1],[1.503711327118799,5.8],[1.569224010920152,5],[1.543653944833204,5.6],[1.44826280400157,5.7],[1.509408673690632,5.7],[1.566960363043472,6.2],[1.405591205088422,5.1],[1.493876859964803,5.7]],\"xAxisIndex\":1},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"v\",\"name\":\"virginica\",\"large\":true,\"z\":3,\"data\":[[2.561136006144807,6.3],[2.562810262013227,5.8],[2.480782200396061,7.1],[2.44368620174937,6.3],[2.483672280469909,6.5],[2.533774149557575,7.6],[2.501530056400225,4.9],[2.532071861298755,7.3],[2.502358262753114,6.7],[2.567110487399623,7.2],[2.541756232269108,6.5],[2.574841188173741,6.4],[2.402295907586813,6.8],[2.577649913588539,5.7],[2.599269383773207,5.8],[2.50003830017522,6.4],[2.47179340487346,6.5],[2.554982604458928,7.7],[2.516895050182939,7.7],[2.526795274205506,6],[2.571733230957761,6.9],[2.513378867739811,5.6],[2.450599403865636,7.7],[2.583760642912239,6.3],[2.573470040969551,6.7],[2.44970773938112,7.2],[2.480576242366806,6.2],[2.55392603520304,6.1],[2.423897074908018,6.4],[2.438938992330804,7.2],[2.4329138496425,7.4],[2.532641316251829,7.9],[2.571315000904724,6.4],[2.585309289675206,6.3],[2.510475518926978,6.1],[2.515413138875738,7.7],[2.537489549117163,6.3],[2.448943645926192,6.4],[2.408923431672156,6],[2.581970911333337,6.9],[2.414136243844405,6.7],[2.599378294683993,6.9],[2.522370483493432,5.8],[2.434511769143865,6.8],[2.581888193031773,6.7],[2.407490233378485,6.7],[2.518710758071393,6.3],[2.447395510971546,6.5],[2.581259453343228,6.2],[2.563774596806616,5.9]],\"xAxisIndex\":1}],\"xAxis\":[{\"type\":\"category\",\"name\":\"Species\",\"axisLabel\":{\"formatter\":\"function(v) { return v;}\"}},{\"max\":3,\"show\":false}],\"yAxis\":[{\"scale\":true,\"name\":\"Sepal.Length\"}],\"legend\":{\"show\":true},\"tooltip\":{\"show\":true}}},\"evals\":[\"opts.dataset.1.transform.config.itemNameFormatter\",\"opts.xAxis.0.axisLabel.formatter\"],\"jsHooks\":[]} hc <- hclust(dist(USArrests), \"complete\") ec.init(preset= FALSE,   series= list(list(     type= 'tree', orient= 'TB', roam= TRUE, initialTreeDepth= -1,     data= ec.data(hc, format='dendrogram'),     # layout= 'radial', symbolSize= ec.clmn(scale= 0.33),     ## exclude added labels like 'pXX', leaving only the originals     label= list(formatter= htmlwidgets::JS(       \"function(n) { out= /p\\\\d+/.test(n.name) ? '' : n.name; return out;}\"))   )) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"type\":\"tree\",\"orient\":\"TB\",\"roam\":true,\"initialTreeDepth\":-1,\"data\":[{\"name\":\"p49\",\"value\":1,\"children\":[{\"name\":\"p47\",\"value\":293.62,\"children\":[{\"name\":\"p39\",\"value\":102.86,\"children\":[{\"name\":\"Florida\",\"value\":38.53},{\"name\":\"North Carolina\",\"value\":38.53}]},{\"name\":\"p44\",\"value\":102.86,\"children\":[{\"name\":\"p41\",\"value\":64.98999999999999,\"children\":[{\"name\":\"p23\",\"value\":48.73,\"children\":[{\"name\":\"Delaware\",\"value\":16.98},{\"name\":\"p20\",\"value\":16.98,\"children\":[{\"name\":\"Alabama\",\"value\":15.45},{\"name\":\"Louisiana\",\"value\":15.45}]}]},{\"name\":\"p32\",\"value\":48.73,\"children\":[{\"name\":\"Alaska\",\"value\":28.64},{\"name\":\"p27\",\"value\":28.64,\"children\":[{\"name\":\"Mississippi\",\"value\":21.17},{\"name\":\"South Carolina\",\"value\":21.17}]}]}]},{\"name\":\"p42\",\"value\":64.98999999999999,\"children\":[{\"name\":\"p22\",\"value\":53.59,\"children\":[{\"name\":\"Maryland\",\"value\":15.89},{\"name\":\"p17\",\"value\":15.89,\"children\":[{\"name\":\"Arizona\",\"value\":13.9},{\"name\":\"New Mexico\",\"value\":13.9}]}]},{\"name\":\"p36\",\"value\":53.59,\"children\":[{\"name\":\"California\",\"value\":32.72},{\"name\":\"p28\",\"value\":32.72,\"children\":[{\"name\":\"p4\",\"value\":22.37,\"children\":[{\"name\":\"Illinois\",\"value\":6.24},{\"name\":\"New York\",\"value\":6.24}]},{\"name\":\"p15\",\"value\":22.37,\"children\":[{\"name\":\"Michigan\",\"value\":13.3},{\"name\":\"Nevada\",\"value\":13.3}]}]}]}]}]}]},{\"name\":\"p48\",\"value\":293.62,\"children\":[{\"name\":\"p45\",\"value\":168.61,\"children\":[{\"name\":\"p37\",\"value\":68.76000000000001,\"children\":[{\"name\":\"p30\",\"value\":36.73,\"children\":[{\"name\":\"Missouri\",\"value\":24.89},{\"name\":\"p12\",\"value\":24.89,\"children\":[{\"name\":\"Arkansas\",\"value\":12.61},{\"name\":\"Tennessee\",\"value\":12.61}]}]},{\"name\":\"p31\",\"value\":36.73,\"children\":[{\"name\":\"Georgia\",\"value\":25.09},{\"name\":\"p18\",\"value\":25.09,\"children\":[{\"name\":\"Colorado\",\"value\":14.5},{\"name\":\"Texas\",\"value\":14.5}]}]}]},{\"name\":\"p38\",\"value\":68.76000000000001,\"children\":[{\"name\":\"Rhode Island\",\"value\":36.85},{\"name\":\"p33\",\"value\":36.85,\"children\":[{\"name\":\"p21\",\"value\":29.25,\"children\":[{\"name\":\"Wyoming\",\"value\":15.63},{\"name\":\"p11\",\"value\":15.63,\"children\":[{\"name\":\"Oregon\",\"value\":12.42},{\"name\":\"p6\",\"value\":12.42,\"children\":[{\"name\":\"Oklahoma\",\"value\":7.36},{\"name\":\"Virginia\",\"value\":7.36}]}]}]},{\"name\":\"p29\",\"value\":29.25,\"children\":[{\"name\":\"Washington\",\"value\":22.77},{\"name\":\"p10\",\"value\":22.77,\"children\":[{\"name\":\"Massachusetts\",\"value\":11.46},{\"name\":\"New Jersey\",\"value\":11.46}]}]}]}]}]},{\"name\":\"p46\",\"value\":168.61,\"children\":[{\"name\":\"p34\",\"value\":87.33,\"children\":[{\"name\":\"p24\",\"value\":31.48,\"children\":[{\"name\":\"p5\",\"value\":18.26,\"children\":[{\"name\":\"Ohio\",\"value\":6.64},{\"name\":\"Utah\",\"value\":6.64}]},{\"name\":\"p7\",\"value\":18.26,\"children\":[{\"name\":\"Connecticut\",\"value\":8.029999999999999},{\"name\":\"Pennsylvania\",\"value\":8.029999999999999}]}]},{\"name\":\"p26\",\"value\":31.48,\"children\":[{\"name\":\"p16\",\"value\":19.9,\"children\":[{\"name\":\"Nebraska\",\"value\":13.35},{\"name\":\"p2\",\"value\":13.35,\"children\":[{\"name\":\"Kentucky\",\"value\":3.83},{\"name\":\"Montana\",\"value\":3.83}]}]},{\"name\":\"p19\",\"value\":19.9,\"children\":[{\"name\":\"Idaho\",\"value\":15.41},{\"name\":\"p3\",\"value\":15.41,\"children\":[{\"name\":\"Indiana\",\"value\":3.93},{\"name\":\"Kansas\",\"value\":3.93}]}]}]}]},{\"name\":\"p43\",\"value\":87.33,\"children\":[{\"name\":\"p35\",\"value\":57.27,\"children\":[{\"name\":\"Hawaii\",\"value\":31.62},{\"name\":\"p25\",\"value\":31.62,\"children\":[{\"name\":\"Minnesota\",\"value\":19.44},{\"name\":\"p9\",\"value\":19.44,\"children\":[{\"name\":\"Wisconsin\",\"value\":10.86},{\"name\":\"p1\",\"value\":10.86,\"children\":[{\"name\":\"Iowa\",\"value\":2.29},{\"name\":\"New Hampshire\",\"value\":2.29}]}]}]}]},{\"name\":\"p40\",\"value\":57.27,\"children\":[{\"name\":\"p13\",\"value\":41.49,\"children\":[{\"name\":\"West Virginia\",\"value\":12.78},{\"name\":\"p8\",\"value\":12.78,\"children\":[{\"name\":\"Maine\",\"value\":8.539999999999999},{\"name\":\"South Dakota\",\"value\":8.539999999999999}]}]},{\"name\":\"p14\",\"value\":41.49,\"children\":[{\"name\":\"North Dakota\",\"value\":13.04},{\"name\":\"Vermont\",\"value\":13.04}]}]}]}]}]}]}],\"label\":{\"formatter\":\"function(n) { out= /p\\\\d+/.test(n.name) ? '' : n.name; return out;}\"}}]}},\"evals\":[\"opts.series.0.label.formatter\"],\"jsHooks\":[]} # build required pathString,value and optional itemStyle columns df <- as.data.frame(Titanic) |> rename(value= Freq) |> mutate(   pathString= paste('Titanic\\nSurvival', Survived, Age, Sex, Class, sep='/'),    itemStyle= case_when(Survived=='Yes' ~\"color='green'\", TRUE ~\"color='LightSalmon'\")) |>    select(pathString, value, itemStyle) ec.init(     series= list(list(       data= ec.data(df, format='treeTT'),       type= 'tree', symbolSize= ec.clmn(\"(x) => {return Math.log(x)*10}\")     )),     tooltip= list(formatter= ec.clmn('%@<br>%@%','value','pct')) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"data\":[{\"name\":\"Titanic\\nSurvival\",\"value\":2201,\"children\":[{\"value\":1490,\"children\":[{\"value\":52,\"children\":[{\"value\":35,\"children\":[{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"1st\",\"pct\":0},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"2nd\",\"pct\":0},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":35,\"name\":\"3rd\",\"pct\":100},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"Crew\",\"pct\":0}],\"name\":\"Male\",\"pct\":67.31,\"itemStyle\":{\"color\":\"LightSalmon\"}},{\"value\":17,\"children\":[{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"1st\",\"pct\":0},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"2nd\",\"pct\":0},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":17,\"name\":\"3rd\",\"pct\":100},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"Crew\",\"pct\":0}],\"name\":\"Female\",\"pct\":32.69,\"itemStyle\":{\"color\":\"LightSalmon\"}}],\"name\":\"Child\",\"pct\":3.49,\"itemStyle\":{\"color\":\"LightSalmon\"}},{\"value\":1438,\"children\":[{\"value\":1329,\"children\":[{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":118,\"name\":\"1st\",\"pct\":8.880000000000001},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":154,\"name\":\"2nd\",\"pct\":11.59},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":387,\"name\":\"3rd\",\"pct\":29.12},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":670,\"name\":\"Crew\",\"pct\":50.41}],\"name\":\"Male\",\"pct\":92.42,\"itemStyle\":{\"color\":\"LightSalmon\"}},{\"value\":109,\"children\":[{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":4,\"name\":\"1st\",\"pct\":3.67},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":13,\"name\":\"2nd\",\"pct\":11.93},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":89,\"name\":\"3rd\",\"pct\":81.65000000000001},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":3,\"name\":\"Crew\",\"pct\":2.75}],\"name\":\"Female\",\"pct\":7.58,\"itemStyle\":{\"color\":\"LightSalmon\"}}],\"name\":\"Adult\",\"pct\":96.51000000000001,\"itemStyle\":{\"color\":\"LightSalmon\"}}],\"name\":\"No\",\"pct\":67.7,\"itemStyle\":{\"color\":\"LightSalmon\"}},{\"value\":711,\"children\":[{\"value\":57,\"children\":[{\"value\":29,\"children\":[{\"itemStyle\":{\"color\":\"green\"},\"value\":5,\"name\":\"1st\",\"pct\":17.24},{\"itemStyle\":{\"color\":\"green\"},\"value\":11,\"name\":\"2nd\",\"pct\":37.93},{\"itemStyle\":{\"color\":\"green\"},\"value\":13,\"name\":\"3rd\",\"pct\":44.83},{\"itemStyle\":{\"color\":\"green\"},\"value\":0,\"name\":\"Crew\",\"pct\":0}],\"name\":\"Male\",\"pct\":50.88,\"itemStyle\":{\"color\":\"green\"}},{\"value\":28,\"children\":[{\"itemStyle\":{\"color\":\"green\"},\"value\":1,\"name\":\"1st\",\"pct\":3.57},{\"itemStyle\":{\"color\":\"green\"},\"value\":13,\"name\":\"2nd\",\"pct\":46.43},{\"itemStyle\":{\"color\":\"green\"},\"value\":14,\"name\":\"3rd\",\"pct\":50},{\"itemStyle\":{\"color\":\"green\"},\"value\":0,\"name\":\"Crew\",\"pct\":0}],\"name\":\"Female\",\"pct\":49.12,\"itemStyle\":{\"color\":\"green\"}}],\"name\":\"Child\",\"pct\":8.02,\"itemStyle\":{\"color\":\"green\"}},{\"value\":654,\"children\":[{\"value\":338,\"children\":[{\"itemStyle\":{\"color\":\"green\"},\"value\":57,\"name\":\"1st\",\"pct\":16.86},{\"itemStyle\":{\"color\":\"green\"},\"value\":14,\"name\":\"2nd\",\"pct\":4.14},{\"itemStyle\":{\"color\":\"green\"},\"value\":75,\"name\":\"3rd\",\"pct\":22.19},{\"itemStyle\":{\"color\":\"green\"},\"value\":192,\"name\":\"Crew\",\"pct\":56.8}],\"name\":\"Male\",\"pct\":51.68,\"itemStyle\":{\"color\":\"green\"}},{\"value\":316,\"children\":[{\"itemStyle\":{\"color\":\"green\"},\"value\":140,\"name\":\"1st\",\"pct\":44.3},{\"itemStyle\":{\"color\":\"green\"},\"value\":80,\"name\":\"2nd\",\"pct\":25.32},{\"itemStyle\":{\"color\":\"green\"},\"value\":76,\"name\":\"3rd\",\"pct\":24.05},{\"itemStyle\":{\"color\":\"green\"},\"value\":20,\"name\":\"Crew\",\"pct\":6.33}],\"name\":\"Female\",\"pct\":48.32,\"itemStyle\":{\"color\":\"green\"}}],\"name\":\"Adult\",\"pct\":91.98,\"itemStyle\":{\"color\":\"green\"}}],\"name\":\"Yes\",\"pct\":32.3,\"itemStyle\":{\"color\":\"green\"}}],\"itemStyle\":{\"color\":\"LightSalmon\"}}],\"type\":\"tree\",\"symbolSize\":\"(x) => {return Math.log(x)*10}\"}],\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['pathString','value','itemStyle'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['value'],x.data['pct']]; else {  if (!aa || !aa.length) return `no data`;  args= [`value`,`pct`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@<br>%@%`, vv); return c; }\"}}},\"evals\":[\"opts.series.0.symbolSize\",\"opts.tooltip.formatter\"],\"jsHooks\":[]} # column itemStyle_color will become itemStyle= list(color=...) in data list # attribute names separator (nasep) is \"_\" df <- data.frame(name= c('A','B','C'), value= c(1,2,3),       itemStyle_color= c('chartreuse','lightblue','pink'),      itemStyle_decal_symbol= c('rect','diamond','none'),      emphasis_itemStyle_color= c('darkgreen','blue','red') ) ec.init(series.param= list(type='pie', data= ec.data(df, 'names', nasep='_')))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"type\":\"pie\",\"data\":[{\"name\":\"A\",\"value\":1,\"itemStyle\":{\"color\":\"chartreuse\",\"decal\":{\"symbol\":\"rect\"}},\"emphasis\":{\"itemStyle\":{\"color\":\"darkgreen\"}}},{\"name\":\"B\",\"value\":2,\"itemStyle\":{\"color\":\"lightblue\",\"decal\":{\"symbol\":\"diamond\"}},\"emphasis\":{\"itemStyle\":{\"color\":\"blue\"}}},{\"name\":\"C\",\"value\":3,\"itemStyle\":{\"color\":\"pink\",\"decal\":{\"symbol\":\"none\"}},\"emphasis\":{\"itemStyle\":{\"color\":\"red\"}}}]}]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Code Examples — ec.examples","title":"Code Examples — ec.examples","text":"Learn example - copy/paste code Examples . code collection demonstrate various concepts data preparation, conversion, grouping, parameter setting, visual fine-tuning, custom rendering, plugins attachment, Shiny plots & interactions Shiny proxy.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Code Examples — ec.examples","text":"","code":"ec.examples()"},{"path":"https://helgasoft.github.io/echarty/reference/ec.examples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Code Examples — ec.examples","text":"return value, used help","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ec.examples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Code Examples — ec.examples","text":"","code":"# \\donttest{ library(dplyr); library(echarty)  #------ Basic scatter chart, instant display cars |> ec.init()  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} #------ Same chart, change theme and save for further processing p <- cars |> ec.init() |> ec.theme('dark') p  {\"x\":{\"theme\":\"dark\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} #------ parallel chart ToothGrowth |> ec.init(ctype= 'parallel')  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"len\",\"supp\",\"dose\"],\"source\":[[4.2,\"VC\",0.5],[11.5,\"VC\",0.5],[7.3,\"VC\",0.5],[5.8,\"VC\",0.5],[6.4,\"VC\",0.5],[10,\"VC\",0.5],[11.2,\"VC\",0.5],[11.2,\"VC\",0.5],[5.2,\"VC\",0.5],[7,\"VC\",0.5],[16.5,\"VC\",1],[16.5,\"VC\",1],[15.2,\"VC\",1],[17.3,\"VC\",1],[22.5,\"VC\",1],[17.3,\"VC\",1],[13.6,\"VC\",1],[14.5,\"VC\",1],[18.8,\"VC\",1],[15.5,\"VC\",1],[23.6,\"VC\",2],[18.5,\"VC\",2],[33.9,\"VC\",2],[25.5,\"VC\",2],[26.4,\"VC\",2],[32.5,\"VC\",2],[26.7,\"VC\",2],[21.5,\"VC\",2],[23.3,\"VC\",2],[29.5,\"VC\",2],[15.2,\"OJ\",0.5],[21.5,\"OJ\",0.5],[17.6,\"OJ\",0.5],[9.699999999999999,\"OJ\",0.5],[14.5,\"OJ\",0.5],[10,\"OJ\",0.5],[8.199999999999999,\"OJ\",0.5],[9.4,\"OJ\",0.5],[16.5,\"OJ\",0.5],[9.699999999999999,\"OJ\",0.5],[19.7,\"OJ\",1],[23.3,\"OJ\",1],[23.6,\"OJ\",1],[26.4,\"OJ\",1],[20,\"OJ\",1],[25.2,\"OJ\",1],[25.8,\"OJ\",1],[21.2,\"OJ\",1],[14.5,\"OJ\",1],[27.3,\"OJ\",1],[25.5,\"OJ\",2],[26.4,\"OJ\",2],[22.4,\"OJ\",2],[24.5,\"OJ\",2],[24.8,\"OJ\",2],[30.9,\"OJ\",2],[26.4,\"OJ\",2],[27.3,\"OJ\",2],[29.4,\"OJ\",2],[23,\"OJ\",2]]}],\"series\":[{\"type\":\"parallel\"}],\"parallelAxis\":[{\"dim\":0,\"name\":\"len\",\"max\":33.9,\"min\":4.2},{\"dim\":1,\"name\":\"supp\",\"type\":\"category\"},{\"dim\":2,\"name\":\"dose\",\"max\":2,\"min\":0.5}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} #------ JSON back and forth tmp <- cars |> ec.init() tmp  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}json <- tmp |> ec.inspect() ec.fromJson(json) |> ec.theme(\"dark\")  {\"x\":{\"theme\":\"dark\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]}},\"evals\":[],\"jsHooks\":[]}  #------ Data grouping iris |> mutate(Species= as.character(Species)) |>         group_by(Species) |> ec.init()      # by non-factor column  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\"],\"source\":[[5.1,3.5,1.4,0.2,\"setosa\"],[4.9,3,1.4,0.2,\"setosa\"],[4.7,3.2,1.3,0.2,\"setosa\"],[4.6,3.1,1.5,0.2,\"setosa\"],[5,3.6,1.4,0.2,\"setosa\"],[5.4,3.9,1.7,0.4,\"setosa\"],[4.6,3.4,1.4,0.3,\"setosa\"],[5,3.4,1.5,0.2,\"setosa\"],[4.4,2.9,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.1,\"setosa\"],[5.4,3.7,1.5,0.2,\"setosa\"],[4.8,3.4,1.6,0.2,\"setosa\"],[4.8,3,1.4,0.1,\"setosa\"],[4.3,3,1.1,0.1,\"setosa\"],[5.8,4,1.2,0.2,\"setosa\"],[5.7,4.4,1.5,0.4,\"setosa\"],[5.4,3.9,1.3,0.4,\"setosa\"],[5.1,3.5,1.4,0.3,\"setosa\"],[5.7,3.8,1.7,0.3,\"setosa\"],[5.1,3.8,1.5,0.3,\"setosa\"],[5.4,3.4,1.7,0.2,\"setosa\"],[5.1,3.7,1.5,0.4,\"setosa\"],[4.6,3.6,1,0.2,\"setosa\"],[5.1,3.3,1.7,0.5,\"setosa\"],[4.8,3.4,1.9,0.2,\"setosa\"],[5,3,1.6,0.2,\"setosa\"],[5,3.4,1.6,0.4,\"setosa\"],[5.2,3.5,1.5,0.2,\"setosa\"],[5.2,3.4,1.4,0.2,\"setosa\"],[4.7,3.2,1.6,0.2,\"setosa\"],[4.8,3.1,1.6,0.2,\"setosa\"],[5.4,3.4,1.5,0.4,\"setosa\"],[5.2,4.1,1.5,0.1,\"setosa\"],[5.5,4.2,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.2,\"setosa\"],[5,3.2,1.2,0.2,\"setosa\"],[5.5,3.5,1.3,0.2,\"setosa\"],[4.9,3.6,1.4,0.1,\"setosa\"],[4.4,3,1.3,0.2,\"setosa\"],[5.1,3.4,1.5,0.2,\"setosa\"],[5,3.5,1.3,0.3,\"setosa\"],[4.5,2.3,1.3,0.3,\"setosa\"],[4.4,3.2,1.3,0.2,\"setosa\"],[5,3.5,1.6,0.6,\"setosa\"],[5.1,3.8,1.9,0.4,\"setosa\"],[4.8,3,1.4,0.3,\"setosa\"],[5.1,3.8,1.6,0.2,\"setosa\"],[4.6,3.2,1.4,0.2,\"setosa\"],[5.3,3.7,1.5,0.2,\"setosa\"],[5,3.3,1.4,0.2,\"setosa\"],[7,3.2,4.7,1.4,\"versicolor\"],[6.4,3.2,4.5,1.5,\"versicolor\"],[6.9,3.1,4.9,1.5,\"versicolor\"],[5.5,2.3,4,1.3,\"versicolor\"],[6.5,2.8,4.6,1.5,\"versicolor\"],[5.7,2.8,4.5,1.3,\"versicolor\"],[6.3,3.3,4.7,1.6,\"versicolor\"],[4.9,2.4,3.3,1,\"versicolor\"],[6.6,2.9,4.6,1.3,\"versicolor\"],[5.2,2.7,3.9,1.4,\"versicolor\"],[5,2,3.5,1,\"versicolor\"],[5.9,3,4.2,1.5,\"versicolor\"],[6,2.2,4,1,\"versicolor\"],[6.1,2.9,4.7,1.4,\"versicolor\"],[5.6,2.9,3.6,1.3,\"versicolor\"],[6.7,3.1,4.4,1.4,\"versicolor\"],[5.6,3,4.5,1.5,\"versicolor\"],[5.8,2.7,4.1,1,\"versicolor\"],[6.2,2.2,4.5,1.5,\"versicolor\"],[5.6,2.5,3.9,1.1,\"versicolor\"],[5.9,3.2,4.8,1.8,\"versicolor\"],[6.1,2.8,4,1.3,\"versicolor\"],[6.3,2.5,4.9,1.5,\"versicolor\"],[6.1,2.8,4.7,1.2,\"versicolor\"],[6.4,2.9,4.3,1.3,\"versicolor\"],[6.6,3,4.4,1.4,\"versicolor\"],[6.8,2.8,4.8,1.4,\"versicolor\"],[6.7,3,5,1.7,\"versicolor\"],[6,2.9,4.5,1.5,\"versicolor\"],[5.7,2.6,3.5,1,\"versicolor\"],[5.5,2.4,3.8,1.1,\"versicolor\"],[5.5,2.4,3.7,1,\"versicolor\"],[5.8,2.7,3.9,1.2,\"versicolor\"],[6,2.7,5.1,1.6,\"versicolor\"],[5.4,3,4.5,1.5,\"versicolor\"],[6,3.4,4.5,1.6,\"versicolor\"],[6.7,3.1,4.7,1.5,\"versicolor\"],[6.3,2.3,4.4,1.3,\"versicolor\"],[5.6,3,4.1,1.3,\"versicolor\"],[5.5,2.5,4,1.3,\"versicolor\"],[5.5,2.6,4.4,1.2,\"versicolor\"],[6.1,3,4.6,1.4,\"versicolor\"],[5.8,2.6,4,1.2,\"versicolor\"],[5,2.3,3.3,1,\"versicolor\"],[5.6,2.7,4.2,1.3,\"versicolor\"],[5.7,3,4.2,1.2,\"versicolor\"],[5.7,2.9,4.2,1.3,\"versicolor\"],[6.2,2.9,4.3,1.3,\"versicolor\"],[5.1,2.5,3,1.1,\"versicolor\"],[5.7,2.8,4.1,1.3,\"versicolor\"],[6.3,3.3,6,2.5,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[7.1,3,5.9,2.1,\"virginica\"],[6.3,2.9,5.6,1.8,\"virginica\"],[6.5,3,5.8,2.2,\"virginica\"],[7.6,3,6.6,2.1,\"virginica\"],[4.9,2.5,4.5,1.7,\"virginica\"],[7.3,2.9,6.3,1.8,\"virginica\"],[6.7,2.5,5.8,1.8,\"virginica\"],[7.2,3.6,6.1,2.5,\"virginica\"],[6.5,3.2,5.1,2,\"virginica\"],[6.4,2.7,5.3,1.9,\"virginica\"],[6.8,3,5.5,2.1,\"virginica\"],[5.7,2.5,5,2,\"virginica\"],[5.8,2.8,5.1,2.4,\"virginica\"],[6.4,3.2,5.3,2.3,\"virginica\"],[6.5,3,5.5,1.8,\"virginica\"],[7.7,3.8,6.7,2.2,\"virginica\"],[7.7,2.6,6.9,2.3,\"virginica\"],[6,2.2,5,1.5,\"virginica\"],[6.9,3.2,5.7,2.3,\"virginica\"],[5.6,2.8,4.9,2,\"virginica\"],[7.7,2.8,6.7,2,\"virginica\"],[6.3,2.7,4.9,1.8,\"virginica\"],[6.7,3.3,5.7,2.1,\"virginica\"],[7.2,3.2,6,1.8,\"virginica\"],[6.2,2.8,4.8,1.8,\"virginica\"],[6.1,3,4.9,1.8,\"virginica\"],[6.4,2.8,5.6,2.1,\"virginica\"],[7.2,3,5.8,1.6,\"virginica\"],[7.4,2.8,6.1,1.9,\"virginica\"],[7.9,3.8,6.4,2,\"virginica\"],[6.4,2.8,5.6,2.2,\"virginica\"],[6.3,2.8,5.1,1.5,\"virginica\"],[6.1,2.6,5.6,1.4,\"virginica\"],[7.7,3,6.1,2.3,\"virginica\"],[6.3,3.4,5.6,2.4,\"virginica\"],[6.4,3.1,5.5,1.8,\"virginica\"],[6,3,4.8,1.8,\"virginica\"],[6.9,3.1,5.4,2.1,\"virginica\"],[6.7,3.1,5.6,2.4,\"virginica\"],[6.9,3.1,5.1,2.3,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[6.8,3.2,5.9,2.3,\"virginica\"],[6.7,3.3,5.7,2.5,\"virginica\"],[6.7,3,5.2,2.3,\"virginica\"],[6.3,2.5,5,1.9,\"virginica\"],[6.5,3,5.2,2,\"virginica\"],[6.2,3.4,5.4,2.3,\"virginica\"],[5.9,3,5.1,1.8,\"virginica\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"setosa\"}},\"id\":\"setosa\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"versicolor\"}},\"id\":\"versicolor\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"virginica\"}},\"id\":\"virginica\"}],\"series\":[{\"type\":\"scatter\",\"datasetIndex\":1,\"name\":\"setosa\"},{\"type\":\"scatter\",\"datasetIndex\":2,\"name\":\"versicolor\"},{\"type\":\"scatter\",\"datasetIndex\":3,\"name\":\"virginica\"}],\"legend\":{\"data\":[{\"name\":\"setosa\"},{\"name\":\"versicolor\"},{\"name\":\"virginica\"}]},\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Length\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Width\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} Orange |> group_by(Tree) |> ec.init(   series.param= list(symbolSize= 10, encode= list(x='age', y='circumference')) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"Tree\",\"age\",\"circumference\"],\"source\":[[\"1\",118,30],[\"1\",484,58],[\"1\",664,87],[\"1\",1004,115],[\"1\",1231,120],[\"1\",1372,142],[\"1\",1582,145],[\"2\",118,33],[\"2\",484,69],[\"2\",664,111],[\"2\",1004,156],[\"2\",1231,172],[\"2\",1372,203],[\"2\",1582,203],[\"3\",118,30],[\"3\",484,51],[\"3\",664,75],[\"3\",1004,108],[\"3\",1231,115],[\"3\",1372,139],[\"3\",1582,140],[\"4\",118,32],[\"4\",484,62],[\"4\",664,112],[\"4\",1004,167],[\"4\",1231,179],[\"4\",1372,209],[\"4\",1582,214],[\"5\",118,30],[\"5\",484,49],[\"5\",664,81],[\"5\",1004,125],[\"5\",1231,142],[\"5\",1372,174],[\"5\",1582,177]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Tree\",\"=\":\"3\"}},\"id\":\"3\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Tree\",\"=\":\"1\"}},\"id\":\"1\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Tree\",\"=\":\"5\"}},\"id\":\"5\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Tree\",\"=\":\"2\"}},\"id\":\"2\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Tree\",\"=\":\"4\"}},\"id\":\"4\"}],\"series\":[{\"type\":\"scatter\",\"datasetIndex\":1,\"name\":\"3\",\"symbolSize\":10,\"encode\":{\"x\":\"age\",\"y\":\"circumference\"}},{\"type\":\"scatter\",\"datasetIndex\":2,\"name\":\"1\",\"symbolSize\":10,\"encode\":{\"x\":\"age\",\"y\":\"circumference\"}},{\"type\":\"scatter\",\"datasetIndex\":3,\"name\":\"5\",\"symbolSize\":10,\"encode\":{\"x\":\"age\",\"y\":\"circumference\"}},{\"type\":\"scatter\",\"datasetIndex\":4,\"name\":\"2\",\"symbolSize\":10,\"encode\":{\"x\":\"age\",\"y\":\"circumference\"}},{\"type\":\"scatter\",\"datasetIndex\":5,\"name\":\"4\",\"symbolSize\":10,\"encode\":{\"x\":\"age\",\"y\":\"circumference\"}}],\"legend\":{\"data\":[{\"name\":\"3\"},{\"name\":\"1\"},{\"name\":\"5\"},{\"name\":\"2\"},{\"name\":\"4\"}]},\"xAxis\":{\"show\":true,\"name\":\"age\",\"type\":\"value\"},\"yAxis\":{\"show\":true,\"name\":\"circumference\",\"type\":\"value\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} #------ Polar bar chart cnt <- 5; set.seed(222) data.frame(     x = seq(cnt),     y = round(rnorm(cnt, 10, 3)),      z = round(rnorm(cnt, 11, 2)),     colr = rainbow(cnt)  ) |>  ec.init( preset= FALSE,    polar= list(radius= '90%'),    radiusAxis= list(max= 'dataMax'),     angleAxis= list(type= \"category\"),    series= list(      list(type= \"bar\", coordinateSystem= \"polar\",        itemStyle= list(color= ec.clmn('colr')),        label= list(show= TRUE, position= \"middle\", formatter= \"y={@[1]}\")      ),      list(type= 'scatter', coordinateSystem= \"polar\",         itemStyle= list(color= 'black'),          encode= list(angle='x', radius='z'))    ) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"polar\":{\"radius\":\"90%\"},\"radiusAxis\":{\"max\":\"dataMax\"},\"angleAxis\":{\"type\":\"category\"},\"series\":[{\"type\":\"bar\",\"coordinateSystem\":\"polar\",\"itemStyle\":{\"color\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Tree','age','circumference'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['colr']]; else {  if (!aa || !aa.length) return `no data`;  args= [`colr`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@`, vv); return c; }\"},\"label\":{\"show\":true,\"position\":\"middle\",\"formatter\":\"y={@[1]}\"}},{\"type\":\"scatter\",\"coordinateSystem\":\"polar\",\"itemStyle\":{\"color\":\"black\"},\"encode\":{\"angle\":\"x\",\"radius\":\"z\"}}],\"dataset\":[{\"dimensions\":[\"x\",\"y\",\"z\",\"colr\"],\"source\":[[1,14,11,\"#FF0000\"],[2,10,9,\"#CCFF00\"],[3,14,14,\"#00FF66\"],[4,9,12,\"#0066FF\"],[5,11,9,\"#CC00FF\"]]}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.0.itemStyle.color\"],\"jsHooks\":[]}  #------ Area chart mtcars |> dplyr::relocate(wt,mpg) |> arrange(wt) |> group_by(cyl) |>   ec.init(ctype= 'line', series.param= list(areaStyle= list(show=TRUE)) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"wt\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[1.513,30.4,4,95.09999999999999,113,3.77,16.9,1,1,5,2],[1.615,30.4,4,75.7,52,4.93,18.52,1,1,4,2],[1.835,33.9,4,71.09999999999999,65,4.22,19.9,1,1,4,1],[1.935,27.3,4,79,66,4.08,18.9,1,1,4,1],[2.14,26,4,120.3,91,4.43,16.7,0,1,5,2],[2.2,32.4,4,78.7,66,4.08,19.47,1,1,4,1],[2.32,22.8,4,108,93,3.85,18.61,1,1,4,1],[2.465,21.5,4,120.1,97,3.7,20.01,1,0,3,1],[2.62,21,6,160,110,3.9,16.46,0,1,4,4],[2.77,19.7,6,145,175,3.62,15.5,0,1,5,6],[2.78,21.4,4,121,109,4.11,18.6,1,1,4,2],[2.875,21,6,160,110,3.9,17.02,0,1,4,4],[3.15,22.8,4,140.8,95,3.92,22.9,1,0,4,2],[3.17,15.8,8,351,264,4.22,14.5,0,1,5,4],[3.19,24.4,4,146.7,62,3.69,20,1,0,4,2],[3.215,21.4,6,258,110,3.08,19.44,1,0,3,1],[3.435,15.2,8,304,150,3.15,17.3,0,0,3,2],[3.44,18.7,8,360,175,3.15,17.02,0,0,3,2],[3.44,19.2,6,167.6,123,3.92,18.3,1,0,4,4],[3.44,17.8,6,167.6,123,3.92,18.9,1,0,4,4],[3.46,18.1,6,225,105,2.76,20.22,1,0,3,1],[3.52,15.5,8,318,150,2.76,16.87,0,0,3,2],[3.57,14.3,8,360,245,3.21,15.84,0,0,3,4],[3.57,15,8,301,335,3.54,14.6,0,1,5,8],[3.73,17.3,8,275.8,180,3.07,17.6,0,0,3,3],[3.78,15.2,8,275.8,180,3.07,18,0,0,3,3],[3.84,13.3,8,350,245,3.73,15.41,0,0,3,4],[3.845,19.2,8,400,175,3.08,17.05,0,0,3,2],[4.07,16.4,8,275.8,180,3.07,17.4,0,0,3,3],[5.25,10.4,8,472,205,2.93,17.98,0,0,3,4],[5.345,14.7,8,440,230,3.23,17.42,0,0,3,4],[5.424,10.4,8,460,215,3,17.82,0,0,3,4]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"type\":\"line\",\"datasetIndex\":1,\"name\":\"4\",\"areaStyle\":{\"show\":true}},{\"type\":\"line\",\"datasetIndex\":2,\"name\":\"6\",\"areaStyle\":{\"show\":true}},{\"type\":\"line\",\"datasetIndex\":3,\"name\":\"8\",\"areaStyle\":{\"show\":true}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"wt\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"mpg\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} #------ Plugin leaflet quakes |> dplyr::relocate('long') |>  # set order to long,lat   mutate(size= exp(mag)/20) |> head(100) |>  # add accented size ec.init(load= 'leaflet',    tooltip= list(formatter= ec.clmn('magnitude %@', 'mag')),    legend= list(show=TRUE),   series.param= list(name= 'quakes', symbolSize= ec.clmn(6, scale=2))  # 6th column is size )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['wt','mpg','cyl','disp','hp','drat','qsec','vs','am','gear','carb'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['mag']]; else {  if (!aa || !aa.length) return `no data`;  args= [`mag`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`magnitude %@`, vv); return c; }\"},\"legend\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"long\",\"lat\",\"depth\",\"mag\",\"stations\",\"size\"],\"source\":[[181.62,-20.42,562,4.8,41,6.075520875936743],[181.03,-20.62,650,4.2,15,3.334316552046258],[184.1,-26,42,5.4,43,11.07032081020936],[181.66,-17.97,626,4.1,19,3.017014379868098],[181.96,-20.42,649,4,11,2.729907501657212],[184.31,-19.68,195,4,12,2.729907501657212],[166.1,-11.7,82,4.8,43,6.075520875936743],[181.93,-28.11,194,4.4,15,4.072543433248407],[181.74,-28.74,211,4.7,35,5.497358622606177],[179.59,-17.47,622,4.3,19,3.684989684979789],[180.69,-21.44,583,4.4,13,4.072543433248407],[167,-12.26,249,4.6,16,4.974215782096689],[182.11,-18.54,554,4.4,19,4.072543433248407],[181.66,-21,600,4.4,10,4.072543433248407],[169.92,-20.7,139,6.1,94,22.29288850412584],[184.95,-15.94,306,4.3,11,3.684989684979789],[165.96,-13.64,50,6,83,20.17143967463675],[181.5,-17.83,590,4.5,21,4.500856565026091],[179.78,-23.5,570,4.4,13,4.072543433248407],[180.31,-22.63,598,4.4,18,4.072543433248407],[181.16,-20.84,576,4.5,17,4.500856565026091],[166.32,-10.98,211,4.2,12,3.334316552046258],[180.16,-23.3,512,4.4,18,4.072543433248407],[182,-30.2,125,4.7,22,5.497358622606177],[180.28,-19.66,431,5.4,57,11.07032081020936],[181.49,-17.94,537,4,15,2.729907501657212],[167.51,-14.72,155,4.6,18,4.974215782096689],[180.79,-16.46,498,5.2,79,9.063612093757561],[181.47,-20.97,582,4.5,25,4.500856565026091],[182.37,-19.84,328,4.4,17,4.072543433248407],[179.24,-22.58,553,4.6,21,4.974215782096689],[166.74,-16.32,50,4.7,30,5.497358622606177],[185.05,-15.55,292,4.8,42,6.075520875936743],[180.8,-23.55,349,4,10,2.729907501657212],[186,-16.3,48,4.5,10,4.500856565026091],[179.33,-25.82,600,4.3,13,3.684989684979789],[169.23,-18.73,206,4.5,17,4.500856565026091],[181.28,-17.64,574,4.6,17,4.974215782096689],[181.4,-17.66,585,4.1,17,3.017014379868098],[169.33,-18.82,230,4.4,11,4.072543433248407],[176.78,-37.37,263,4.7,34,5.497358622606177],[186.1,-15.31,96,4.6,32,4.974215782096689],[179.82,-24.97,511,4.4,23,4.072543433248407],[186.04,-15.49,94,4.3,26,3.684989684979789],[169.41,-19.23,246,4.6,27,4.974215782096689],[182.3,-30.1,56,4.9,34,6.714488984246776],[181.7,-26.4,329,4.5,24,4.500856565026091],[166.32,-11.77,70,4.4,18,4.072543433248407],[180.08,-24.12,493,4.3,21,3.684989684979789],[185.25,-18.97,129,5.1,73,8.201095364995085],[182.35,-18.75,554,4.2,13,3.334316552046258],[184.42,-19.26,223,4,15,2.729907501657212],[173.2,-22.75,46,4.6,26,4.974215782096689],[180.67,-21.37,593,4.3,13,3.684989684979789],[182.16,-20.1,489,4.2,16,3.334316552046258],[182.13,-19.85,562,4.4,31,4.072543433248407],[181,-22.7,445,4.5,17,4.500856565026091],[180.6,-22.06,584,4,11,2.729907501657212],[181.35,-17.8,535,4.4,23,4.072543433248407],[179.2,-24.2,530,4.3,12,3.684989684979789],[181.55,-20.69,582,4.7,35,5.497358622606177],[182.4,-21.16,260,4.1,12,3.017014379868098],[172.38,-13.82,613,5,61,7.42065795512883],[166.22,-11.49,84,4.6,32,4.974215782096689],[181.41,-20.68,593,4.9,40,6.714488984246776],[184.93,-17.1,286,4.7,25,5.497358622606177],[181.6,-20.14,587,4.1,13,3.017014379868098],[179.62,-21.96,627,5,45,7.42065795512883],[181.86,-20.42,530,4.5,27,4.500856565026091],[187.81,-15.46,40,5.5,91,12.23459661321102],[185.8,-15.31,152,4,11,2.729907501657212],[184.35,-19.86,201,4.5,30,4.500856565026091],[166.2,-11.55,96,4.3,14,3.684989684979789],[179.99,-23.74,506,5.2,75,9.063612093757561],[181.23,-17.7,546,4.4,35,4.072543433248407],[180.04,-23.54,564,4.3,15,3.684989684979789],[184.7,-19.21,197,4.1,11,3.017014379868098],[167.06,-12.11,265,4.5,23,4.500856565026091],[181.71,-21.81,323,4.2,15,3.334316552046258],[181.11,-28.98,304,5.3,60,10.01684049873958],[180.21,-34.02,75,5.2,65,9.063612093757561],[180.99,-23.84,367,4.5,27,4.500856565026091],[182.38,-19.57,579,4.6,38,4.974215782096689],[183.4,-20.12,284,4.3,15,3.684989684979789],[181.7,-17.7,450,4,11,2.729907501657212],[184.31,-19.66,170,4.3,15,3.684989684979789],[170.5,-21.5,117,4.7,32,5.497358622606177],[179.96,-23.64,538,4.5,26,4.500856565026091],[186.3,-15.43,123,4.2,16,3.334316552046258],[186.44,-15.41,69,4.3,42,3.684989684979789],[167.53,-15.48,128,5.1,61,8.201095364995085],[167.06,-13.36,236,4.7,22,5.497358622606177],[182.02,-20.64,497,5.2,64,9.063612093757561],[169.71,-19.72,271,4.2,14,3.334316552046258],[185.26,-15.44,224,4.2,21,3.334316552046258],[182.4,-19.73,375,4,18,2.729907501657212],[181.11,-27.24,365,4.5,21,4.500856565026091],[183.41,-18.16,306,5.2,54,9.063612093757561],[166.54,-13.66,50,5.1,45,8.201095364995085],[179.92,-24.57,484,4.7,33,5.497358622606177]]}],\"series\":[{\"type\":\"scatter\",\"name\":\"quakes\",\"symbolSize\":\"function(x) {c= String(x.value!=null ? x.value[5] : x.data!=null ? x.data[5] : x[5] ); return (parseFloat(c)*2);}\",\"coordinateSystem\":\"leaflet\"}],\"leaflet\":{\"roam\":true,\"tiles\":[{\"urlTemplate\":\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}],\"zoom\":6,\"center\":[179.1387,-19.9468]}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.tooltip.formatter\",\"opts.series.0.symbolSize\"],\"jsHooks\":[]} #------ Plugin 'world' with visualMap set.seed(333) cns <- data.frame(      val = runif(3, 1, 100),   dim = runif(3, 1, 100),   nam = c('Brazil','China','India') ) cns |> group_by(nam) |> ec.init(load= 'world', timeline= list(s=TRUE),   series.param= list(type='map',        encode=list(value='val', name='nam')),   toolbox= list(feature= list(restore= list())),   visualMap= list(calculable=TRUE, dimension=2) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"timeline\":{\"s\":true,\"data\":[\"Brazil\",\"China\",\"India\"],\"axisType\":\"category\"},\"toolbox\":{\"feature\":{\"restore\":[]}},\"visualMap\":{\"dimension\":1,\"min\":2.991817211266607,\"max\":72.63218200579286,\"calculable\":true},\"dataset\":[{\"dimensions\":[\"val\",\"dim\",\"nam\"],\"source\":[[47.23306561866775,57.55925278598443,\"Brazil\"],[9.375216445419937,2.991817211266607,\"China\"],[97.37504198844545,72.63218200579286,\"India\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"nam\",\"=\":\"Brazil\"}},\"id\":\"Brazil\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"nam\",\"=\":\"China\"}},\"id\":\"China\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"nam\",\"=\":\"India\"}},\"id\":\"India\"}],\"legend\":{\"data\":[{\"name\":\"Brazil\"},{\"name\":\"China\"},{\"name\":\"India\"}]},\"geo\":{\"map\":\"world\",\"roam\":true},\"options\":[{\"series\":[{\"type\":\"map\",\"geoIndex\":0,\"datasetIndex\":1}]},{\"series\":[{\"type\":\"map\",\"geoIndex\":0,\"datasetIndex\":2}]},{\"series\":[{\"type\":\"map\",\"geoIndex\":0,\"datasetIndex\":3}]}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} #------ Plugin 'world' with lines and color coding if (interactive()) { flights <- NULL flights <- try(read.csv(paste0('https://raw.githubusercontent.com/plotly/datasets/master/',                                '2011_february_aa_flight_paths.csv')), silent = TRUE) if (!is.null(flights)) {   tmp <- data.frame(airport1 = unique(head(flights,10)$airport1),                     color = c(\"#387e78\",\"#eeb422\",\"#d9534f\",'magenta'))   tmp <- head(flights,10) |> inner_join(tmp)    # add color by airport   ec.init(load= 'world',     geo= list(center= c(mean(flights$start_lon), mean(flights$start_lat)),              zoom= 7, map='world' ),     series= list(list(       type= 'lines', coordinateSystem= 'geo',       data= lapply(ec.data(tmp, 'names'), function(x)         list(coords = list(c(x$start_lon,x$start_lat),                            c(x$end_lon,x$end_lat)),              colr = x$color)       ),       lineStyle= list(curveness=0.3, width=3, color=ec.clmn('colr'))     ))   ) } }  #------ registerMap JSON # registerMap supports also maps in SVG format, see website gallery if (interactive()) { json <- jsonlite::read_json(\"https://echarts.apache.org/examples/data/asset/geo/USA.json\") dusa <- USArrests dusa$states <- row.names(dusa) p <- ec.init(preset= FALSE,    series= list(list(type= 'map', map= 'USA', roam= TRUE, zoom= 3, left= -100, top= -30,        data= lapply(ec.data(dusa, 'names'),             function(x) list(name=x$states, value=x$UrbanPop))    )),    visualMap= list(type='continuous', calculable=TRUE,         inRange= list(color = rainbow(8)),        min= min(dusa$UrbanPop), max= max(dusa$UrbanPop)) ) p$x$registerMap <- list(list(mapName= 'USA', geoJSON= json)) p }  #------ locale mo <- seq.Date(Sys.Date() - 444, Sys.Date(), by= \"month\") df <- data.frame(date= mo, val= runif(length(mo), 1, 10)) p <- df |> ec.init(title= list(text= 'locale test')) p$x$locale <- 'ZH' p$x$renderer <- 'svg' p  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"svg\",\"locale\":\"ZH\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"text\":\"locale test\"},\"dataset\":[{\"dimensions\":[\"date\",\"val\"],\"source\":[[\"2023-09-22\",6.48454268835485],[\"2023-10-22\",3.760474134702235],[\"2023-11-22\",1.571588575141504],[\"2023-12-22\",3.748181231319904],[\"2024-01-22\",4.545117005007342],[\"2024-02-22\",5.267960811499506],[\"2024-03-22\",9.020999480504543],[\"2024-04-22\",6.985103074694052],[\"2024-05-22\",7.631484168116003],[\"2024-06-22\",9.20321844285354],[\"2024-07-22\",6.74064878304489],[\"2024-08-22\",8.781862691277638],[\"2024-09-22\",3.588176757795736],[\"2024-10-22\",2.169632331002504],[\"2024-11-22\",2.172840852290392]]}],\"xAxis\":{\"show\":true,\"type\":\"time\",\"name\":\"date\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"val\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}  #------ Pie isl <- data.frame(name=names(islands), value=islands) |> filter(value>100) |> arrange(value)  ec.init( preset= FALSE,    title= list(text = \"Landmasses over 60,000 mi\\u00B2\", left = 'center'),    tooltip= list(trigger='item'),   #, formatter= ec.clmn()),    series= list(list(type= 'pie', radius= '50%',                       data= ec.data(isl, 'names'), name='mi\\u00B2')) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"text\":\"Landmasses over 60,000 mi²\",\"left\":\"center\"},\"tooltip\":{\"trigger\":\"item\"},\"series\":[{\"type\":\"pie\",\"radius\":\"50%\",\"data\":[{\"name\":\"Sumatra\",\"value\":183},{\"name\":\"Baffin\",\"value\":184},{\"name\":\"Madagascar\",\"value\":227},{\"name\":\"Borneo\",\"value\":280},{\"name\":\"New Guinea\",\"value\":306},{\"name\":\"Greenland\",\"value\":840},{\"name\":\"Australia\",\"value\":2968},{\"name\":\"Europe\",\"value\":3745},{\"name\":\"Antarctica\",\"value\":5500},{\"name\":\"South America\",\"value\":6795},{\"name\":\"North America\",\"value\":9390},{\"name\":\"Africa\",\"value\":11506},{\"name\":\"Asia\",\"value\":16988}],\"name\":\"mi²\"}]}},\"evals\":[],\"jsHooks\":[]}  #------ Liquidfill plugin if (interactive()) {   ec.init(load= 'liquid', preset=FALSE,     series= list(list(     type='liquidFill', data=c(0.66, 0.5, 0.4, 0.3),     waveAnimation= FALSE, animationDuration=0, animationDurationUpdate=0))   ) }   #------ Heatmap times <- c(5,1,0,0,0,0,0,0,0,0,0,2,4,1,1,3,4,6,4,4,3,3,2,5,7,0,0,0,0,0,            0,0,0,0,5,2,2,6,9,11,6,7,8,12,5,5,7,2,1,1,0,0,0,0,0,0,0,0,3,2,            1,9,8,10,6,5,5,5,7,4,2,4,7,3,0,0,0,0,0,0,1,0,5,4,7,14,13,12,9,5,            5,10,6,4,4,1,1,3,0,0,0,1,0,0,0,2,4,4,2,4,4,14,12,1,8,5,3,7,3,0,            2,1,0,3,0,0,0,0,2,0,4,1,5,10,5,7,11,6,0,5,3,4,2,0,1,0,0,0,0,0,            0,0,0,0,1,0,2,1,3,4,0,0,0,0,1,2,2,6) df <- NULL; n <- 1;  for(i in 0:6) { df <- rbind(df, data.frame(0:23, rep(i,24), times[n:(n+23)]));  n<-n+24  } hours <- ec.data(df); hours <- hours[-1]    # remove columns row times <- c('12a',paste0(1:11,'a'),'12p',paste0(1:11,'p')) days <- c('Saturday','Friday','Thursday','Wednesday','Tuesday','Monday','Sunday') ec.init(preset= FALSE,   title= list(text='Punch Card Heatmap'),   tooltip= list(position='top'),grid=list(height='50%',top='10%'),   xAxis= list(type='category', data=times, splitArea=list(show=TRUE)),   yAxis= list(type='category', data=days,  splitArea=list(show=TRUE)),   visualMap= list(min=0,max=10,calculable=TRUE,orient='horizontal',left='center',bottom='15%'),   series= list(list(name='Hours', type = 'heatmap', data= hours,label=list(show=TRUE),                     emphasis=list(itemStyle=list(shadowBlur=10,shadowColor='rgba(0,0,0,0.5)')))) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"text\":\"Punch Card Heatmap\"},\"tooltip\":{\"position\":\"top\"},\"grid\":{\"height\":\"50%\",\"top\":\"10%\"},\"xAxis\":{\"type\":\"category\",\"data\":[\"12a\",\"1a\",\"2a\",\"3a\",\"4a\",\"5a\",\"6a\",\"7a\",\"8a\",\"9a\",\"10a\",\"11a\",\"12p\",\"1p\",\"2p\",\"3p\",\"4p\",\"5p\",\"6p\",\"7p\",\"8p\",\"9p\",\"10p\",\"11p\"],\"splitArea\":{\"show\":true}},\"yAxis\":{\"type\":\"category\",\"data\":[\"Saturday\",\"Friday\",\"Thursday\",\"Wednesday\",\"Tuesday\",\"Monday\",\"Sunday\"],\"splitArea\":{\"show\":true}},\"visualMap\":{\"min\":0,\"max\":10,\"calculable\":true,\"orient\":\"horizontal\",\"left\":\"center\",\"bottom\":\"15%\"},\"series\":[{\"name\":\"Hours\",\"type\":\"heatmap\",\"data\":[[1,0,1],[2,0,0],[3,0,0],[4,0,0],[5,0,0],[6,0,0],[7,0,0],[8,0,0],[9,0,0],[10,0,0],[11,0,2],[12,0,4],[13,0,1],[14,0,1],[15,0,3],[16,0,4],[17,0,6],[18,0,4],[19,0,4],[20,0,3],[21,0,3],[22,0,2],[23,0,5],[0,1,7],[1,1,0],[2,1,0],[3,1,0],[4,1,0],[5,1,0],[6,1,0],[7,1,0],[8,1,0],[9,1,0],[10,1,5],[11,1,2],[12,1,2],[13,1,6],[14,1,9],[15,1,11],[16,1,6],[17,1,7],[18,1,8],[19,1,12],[20,1,5],[21,1,5],[22,1,7],[23,1,2],[0,2,1],[1,2,1],[2,2,0],[3,2,0],[4,2,0],[5,2,0],[6,2,0],[7,2,0],[8,2,0],[9,2,0],[10,2,3],[11,2,2],[12,2,1],[13,2,9],[14,2,8],[15,2,10],[16,2,6],[17,2,5],[18,2,5],[19,2,5],[20,2,7],[21,2,4],[22,2,2],[23,2,4],[0,3,7],[1,3,3],[2,3,0],[3,3,0],[4,3,0],[5,3,0],[6,3,0],[7,3,0],[8,3,1],[9,3,0],[10,3,5],[11,3,4],[12,3,7],[13,3,14],[14,3,13],[15,3,12],[16,3,9],[17,3,5],[18,3,5],[19,3,10],[20,3,6],[21,3,4],[22,3,4],[23,3,1],[0,4,1],[1,4,3],[2,4,0],[3,4,0],[4,4,0],[5,4,1],[6,4,0],[7,4,0],[8,4,0],[9,4,2],[10,4,4],[11,4,4],[12,4,2],[13,4,4],[14,4,4],[15,4,14],[16,4,12],[17,4,1],[18,4,8],[19,4,5],[20,4,3],[21,4,7],[22,4,3],[23,4,0],[0,5,2],[1,5,1],[2,5,0],[3,5,3],[4,5,0],[5,5,0],[6,5,0],[7,5,0],[8,5,2],[9,5,0],[10,5,4],[11,5,1],[12,5,5],[13,5,10],[14,5,5],[15,5,7],[16,5,11],[17,5,6],[18,5,0],[19,5,5],[20,5,3],[21,5,4],[22,5,2],[23,5,0],[0,6,1],[1,6,0],[2,6,0],[3,6,0],[4,6,0],[5,6,0],[6,6,0],[7,6,0],[8,6,0],[9,6,0],[10,6,1],[11,6,0],[12,6,2],[13,6,1],[14,6,3],[15,6,4],[16,6,0],[17,6,0],[18,6,0],[19,6,0],[20,6,1],[21,6,2],[22,6,2],[23,6,6]],\"label\":{\"show\":true},\"emphasis\":{\"itemStyle\":{\"shadowBlur\":10,\"shadowColor\":\"rgba(0,0,0,0.5)\"}}}]}},\"evals\":[],\"jsHooks\":[]}  #------ Plugin 3D if (interactive()) {   data <- list()   for(y in 1:dim(volcano)[2]) for(x in 1:dim(volcano)[1])      data <- append(data, list(c(x, y, volcano[x,y])))   ec.init(load= '3D',           series= list(list(type= 'surface',  data= data))   ) }   #------ 3D chart with custom item size if (interactive()) { iris |> group_by(Species) |>   mutate(size= log(Petal.Width*10)) |>  # add size as 6th column   ec.init(load= '3D',           xAxis3D= list(name= 'Petal.Length'),           yAxis3D= list(name= 'Sepal.Width'),           zAxis3D= list(name= 'Sepal.Length'),           legend= list(show= TRUE),     series.param= list(symbolSize= ec.clmn(6, scale=10))   ) }   #------ Surface data equation with JS code if (interactive()) {  ec.init(load= '3D',    series= list(list(      type= 'surface',      equation= list(        x = list(min= -3, max= 4, step= 0.05),        y = list(min= -3, max= 3, step= 0.05),        z = htmlwidgets::JS(\"function (x, y) {                            return Math.sin(x * x + y * y) * x / Math.PI; }\")      )    ))) }   #------ Surface with data from a data.frame if (interactive()) {   data <- expand.grid(     x = seq(0, 2, by = 0.1),     y = seq(0, 1, by = 0.1)   ) |> mutate(z = x * (y ^ 2)) |> select(x,y,z)   ec.init(load= '3D',           series= list(list(             type= 'surface',             data= ec.data(data, 'values'))) ) }    #------ Band series with customization dats <- as.data.frame(EuStockMarkets) |> mutate(day= 1:n()) |>   # first column ('day') becomes X-axis by default   dplyr::relocate(day) |> slice_head(n= 100)  # 1. with unnamed data bands <- ecr.band(dats, 'DAX','FTSE', name= 'Ftse-Dax',              areaStyle= list(color='pink')) ec.init(load= 'custom',    tooltip= list(trigger= 'axis'),   legend= list(show= TRUE), xAxis= list(type= 'category'),   dataZoom= list(type= 'slider', end= 50),   series = append( bands,     list(list(type= 'line', name= 'CAC', color= 'red', symbolSize= 1,               data= ec.data(dats |> select(day,CAC), 'values')     ))   ) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"tooltip\":{\"trigger\":\"axis\"},\"legend\":{\"show\":true},\"xAxis\":{\"type\":\"category\"},\"dataZoom\":{\"type\":\"slider\",\"end\":50},\"series\":[{\"type\":\"custom\",\"renderItem\":\"riPolygon\",\"data\":[[100,2546.6],[99,2561.6],[98,2546.5],[97,2575.5],[96,2554.9],[95,2559],[94,2538],[93,2534.2],[92,2540.9],[91,2527.8],[90,2549.5],[89,2566],[88,2577.1],[87,2553.3],[86,2558.5],[85,2514.7],[84,2528.3],[83,2561.1],[82,2559.5],[81,2575.7],[80,2601.1],[79,2588.7],[78,2579],[77,2576.7],[76,2574.5],[75,2555],[74,2570.8],[73,2584.1],[72,2599.5],[71,2596.2],[70,2624.6],[69,2625.6],[68,2644.2],[67,2645.6],[66,2621.7],[65,2599],[64,2595.6],[63,2597.8],[62,2576.6],[61,2579.5],[60,2600.3],[59,2588.7],[58,2583.6],[57,2594.4],[56,2606],[55,2625.8],[54,2641.9],[53,2626.6],[52,2630.8],[51,2653.2],[50,2667.4],[49,2663.3],[48,2664.6],[47,2669],[46,2679.6],[45,2645.7],[44,2638.2],[43,2624.2],[42,2619.8],[41,2640.7],[40,2640.7],[39,2623],[38,2601.9],[37,2554.5],[36,2540.5],[35,2621],[34,2617.2],[33,2608.8],[32,2584.9],[31,2569.4],[30,2570.6],[29,2600.6],[28,2597.4],[27,2573.3],[26,2585.4],[25,2601.7],[24,2591.7],[23,2588.8],[22,2595.6],[21,2595],[20,2589.3],[19,2579.6],[18,2580.5],[17,2587.9],[16,2558.5],[15,2541.5],[14,2547.3],[13,2561],[12,2556.8],[11,2532.5],[10,2497.4],[9,2510.5],[8,2508.4],[7,2487.9],[6,2466.8],[5,2484.7],[4,2470.4],[3,2448.2],[2,2460.2],[1,2443.6],[1,1628.75],[2,1613.63],[3,1606.51],[4,1621.04],[5,1618.16],[6,1610.61],[7,1630.75],[8,1640.17],[9,1635.47],[10,1645.89],[11,1647.84],[12,1638.35],[13,1629.93],[14,1621.49],[15,1624.74],[16,1627.63],[17,1631.99],[18,1621.18],[19,1613.42],[20,1604.95],[21,1605.75],[22,1616.67],[23,1619.29],[24,1620.49],[25,1619.67],[26,1623.07],[27,1613.98],[28,1631.87],[29,1630.37],[30,1633.47],[31,1626.55],[32,1650.43],[33,1650.06],[34,1654.11],[35,1653.6],[36,1501.82],[37,1524.28],[38,1603.65],[39,1622.49],[40,1636.68],[41,1652.1],[42,1645.81],[43,1650.36],[44,1651.55],[45,1649.88],[46,1653.52],[47,1657.51],[48,1649.55],[49,1649.09],[50,1646.41],[51,1638.65],[52,1625.8],[53,1628.64],[54,1632.22],[55,1633.65],[56,1631.17],[57,1635.8],[58,1621.27],[59,1624.7],[60,1616.13],[61,1618.12],[62,1627.8],[63,1625.79],[64,1614.8],[65,1612.8],[66,1605.47],[67,1609.32],[68,1607.48],[69,1607.48],[70,1604.89],[71,1589.12],[72,1582.27],[73,1567.99],[74,1568.16],[75,1569.71],[76,1571.74],[77,1585.41],[78,1570.01],[79,1561.89],[80,1565.18],[81,1570.34],[82,1577],[83,1590.29],[84,1572.72],[85,1572.07],[86,1579.19],[87,1588.73],[88,1586.01],[89,1579.77],[90,1572.58],[91,1568.09],[92,1578.21],[93,1573.94],[94,1582.06],[95,1610.18],[96,1605.16],[97,1623.84],[98,1615.26],[99,1627.08],[100,1626.97]],\"name\":\"Ftse-Dax\",\"areaStyle\":{\"color\":\"pink\"},\"itemStyle\":{\"borderWidth\":0.5},\"boundaryGap\":false},{\"type\":\"line\",\"name\":\"CAC\",\"color\":\"red\",\"symbolSize\":1,\"data\":[{\"value\":[1,1772.8]},{\"value\":[2,1750.5]},{\"value\":[3,1718]},{\"value\":[4,1708.1]},{\"value\":[5,1723.1]},{\"value\":[6,1714.3]},{\"value\":[7,1734.5]},{\"value\":[8,1757.4]},{\"value\":[9,1754]},{\"value\":[10,1754.3]},{\"value\":[11,1759.8]},{\"value\":[12,1755.5]},{\"value\":[13,1758.1]},{\"value\":[14,1757.5]},{\"value\":[15,1763.5]},{\"value\":[16,1762.8]},{\"value\":[17,1768.9]},{\"value\":[18,1778.1]},{\"value\":[19,1780.1]},{\"value\":[20,1767.7]},{\"value\":[21,1757.9]},{\"value\":[22,1756.6]},{\"value\":[23,1754.7]},{\"value\":[24,1766.8]},{\"value\":[25,1766.5]},{\"value\":[26,1762.2]},{\"value\":[27,1759.5]},{\"value\":[28,1782.4]},{\"value\":[29,1789.5]},{\"value\":[30,1783.5]},{\"value\":[31,1780.4]},{\"value\":[32,1808.8]},{\"value\":[33,1820.3]},{\"value\":[34,1820.3]},{\"value\":[35,1820.3]},{\"value\":[36,1687.5]},{\"value\":[37,1725.6]},{\"value\":[38,1792.9]},{\"value\":[39,1819.1]},{\"value\":[40,1833.5]},{\"value\":[41,1853.4]},{\"value\":[42,1849.7]},{\"value\":[43,1851.8]},{\"value\":[44,1857.7]},{\"value\":[45,1864.3]},{\"value\":[46,1863.5]},{\"value\":[47,1873.2]},{\"value\":[48,1860.8]},{\"value\":[49,1868.7]},{\"value\":[50,1860.4]},{\"value\":[51,1855.9]},{\"value\":[52,1840.5]},{\"value\":[53,1842.6]},{\"value\":[54,1861.2]},{\"value\":[55,1876.2]},{\"value\":[56,1878.3]},{\"value\":[57,1878.4]},{\"value\":[58,1869.4]},{\"value\":[59,1880.4]},{\"value\":[60,1885.5]},{\"value\":[61,1888.4]},{\"value\":[62,1885.2]},{\"value\":[63,1877.9]},{\"value\":[64,1876.5]},{\"value\":[65,1883.8]},{\"value\":[66,1880.6]},{\"value\":[67,1887.4]},{\"value\":[68,1878.3]},{\"value\":[69,1867.1]},{\"value\":[70,1851.9]},{\"value\":[71,1843.6]},{\"value\":[72,1848.1]},{\"value\":[73,1843.4]},{\"value\":[74,1843.6]},{\"value\":[75,1833.8]},{\"value\":[76,1833.4]},{\"value\":[77,1856.9]},{\"value\":[78,1863.4]},{\"value\":[79,1855.5]},{\"value\":[80,1864.2]},{\"value\":[81,1846]},{\"value\":[82,1836.8]},{\"value\":[83,1830.4]},{\"value\":[84,1831.6]},{\"value\":[85,1834.8]},{\"value\":[86,1852.1]},{\"value\":[87,1849.8]},{\"value\":[88,1861.8]},{\"value\":[89,1856.7]},{\"value\":[90,1856.7]},{\"value\":[91,1841.5]},{\"value\":[92,1846.9]},{\"value\":[93,1836.1]},{\"value\":[94,1838.6]},{\"value\":[95,1857.6]},{\"value\":[96,1857.6]},{\"value\":[97,1858.4]},{\"value\":[98,1846.8]},{\"value\":[99,1868.5]},{\"value\":[100,1863.2]}]}],\"yAxis\":{\"show\":true}}},\"evals\":[\"opts.series.0.renderItem\"],\"jsHooks\":[]} # 2. with a dataset # dats |> ec.init(load= 'custom', ... #   + replace data=... with encode= list(x='day', y='CAC')   #------ Error Bars on grouped data df <- mtcars |> group_by(cyl,gear) |> summarise(yy= round(mean(mpg),2)) |>   mutate(low= round(yy-cyl*runif(1),2),           high= round(yy+cyl*runif(1),2)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument. df |> ec.init(load='custom', ctype='bar',               xAxis= list(type='category'), tooltip= list(show=TRUE)) |>   ecr.ebars( # name = 'eb',  # cannot have own name in grouped series     encode= list(x='gear', y=c('yy','low','high')),     tooltip = list(formatter=ec.clmn('high <b>%@<\/b><br>low <b>%@<\/b>', 'high','low')))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"xAxis\":{\"type\":\"category\",\"name\":\"gear\"},\"tooltip\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"cyl\",\"gear\",\"yy\",\"low\",\"high\"],\"source\":[[4,3,21.5,21.21,23.57],[4,4,26.92,26.63,28.99],[4,5,28.2,27.91,30.27],[6,3,19.75,18.6,20.54],[6,4,19.75,18.6,20.54],[6,5,19.7,18.55,20.49],[8,3,15.05,12.91,17.29],[8,5,15.4,13.26,17.64]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"type\":\"bar\",\"datasetIndex\":1,\"name\":\"4\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"bar\",\"datasetIndex\":2,\"name\":\"6\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"bar\",\"datasetIndex\":3,\"name\":\"8\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"custom\",\"datasetIndex\":1,\"encode\":{\"x\":1,\"y\":[2,3,4]},\"renderItem\":\"riErrBars\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['cyl','gear','yy','low','high'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['high'],x.data['low']]; else {  if (!aa || !aa.length) return `no data`;  args= [`high`,`low`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`high <b>%@<\\/b><br>low <b>%@<\\/b>`, vv); return c; }\"},\"name\":\"4\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6}},{\"type\":\"custom\",\"datasetIndex\":2,\"encode\":{\"x\":1,\"y\":[2,3,4]},\"renderItem\":\"riErrBars\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['cyl','gear','yy','low','high'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['high'],x.data['low']]; else {  if (!aa || !aa.length) return `no data`;  args= [`high`,`low`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`high <b>%@<\\/b><br>low <b>%@<\\/b>`, vv); return c; }\"},\"name\":\"6\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6}},{\"type\":\"custom\",\"datasetIndex\":3,\"encode\":{\"x\":1,\"y\":[2,3,4]},\"renderItem\":\"riErrBars\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['cyl','gear','yy','low','high'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['high'],x.data['low']]; else {  if (!aa || !aa.length) return `no data`;  args= [`high`,`low`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`high <b>%@<\\/b><br>low <b>%@<\\/b>`, vv); return c; }\"},\"name\":\"8\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"yy\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.3.renderItem\",\"opts.series.3.tooltip.formatter\",\"opts.series.4.renderItem\",\"opts.series.4.tooltip.formatter\",\"opts.series.5.renderItem\",\"opts.series.5.tooltip.formatter\"],\"jsHooks\":[]}  #------ Timeline animation and use of ec.upd for readability Orange |> group_by(age) |> ec.init(   xAxis= list(type= 'category', name= 'tree'),   yAxis= list(max= max(Orange$circumference)),   timeline= list(autoPlay= TRUE),   series.param= list(type= 'bar', encode= list(x='Tree', y='circumference')) ) |> ec.upd({   options <- lapply(options,      function(o) {        vv <- o$series[[1]]$datasetIndex +1;        vv <- dataset[[vv]]$transform$config[[\"=\"]]        o$title$text <- paste('age',vv,'days');         o }) })  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"xAxis\":{\"type\":\"category\",\"name\":\"tree\"},\"yAxis\":{\"max\":214,\"name\":\"circumference\",\"type\":\"value\"},\"timeline\":{\"autoPlay\":true,\"data\":[\"118\",\"484\",\"664\",\"1004\",\"1231\",\"1372\",\"1582\"],\"axisType\":\"category\"},\"dataset\":[{\"dimensions\":[\"Tree\",\"age\",\"circumference\"],\"source\":[[\"1\",118,30],[\"1\",484,58],[\"1\",664,87],[\"1\",1004,115],[\"1\",1231,120],[\"1\",1372,142],[\"1\",1582,145],[\"2\",118,33],[\"2\",484,69],[\"2\",664,111],[\"2\",1004,156],[\"2\",1231,172],[\"2\",1372,203],[\"2\",1582,203],[\"3\",118,30],[\"3\",484,51],[\"3\",664,75],[\"3\",1004,108],[\"3\",1231,115],[\"3\",1372,139],[\"3\",1582,140],[\"4\",118,32],[\"4\",484,62],[\"4\",664,112],[\"4\",1004,167],[\"4\",1231,179],[\"4\",1372,209],[\"4\",1582,214],[\"5\",118,30],[\"5\",484,49],[\"5\",664,81],[\"5\",1004,125],[\"5\",1231,142],[\"5\",1372,174],[\"5\",1582,177]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"age\",\"=\":118}},\"id\":118},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"age\",\"=\":484}},\"id\":484},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"age\",\"=\":664}},\"id\":664},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"age\",\"=\":1004}},\"id\":1004},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"age\",\"=\":1231}},\"id\":1231},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"age\",\"=\":1372}},\"id\":1372},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"age\",\"=\":1582}},\"id\":1582}],\"legend\":{\"data\":[{\"name\":\"118\"},{\"name\":\"484\"},{\"name\":\"664\"},{\"name\":\"1004\"},{\"name\":\"1231\"},{\"name\":\"1372\"},{\"name\":\"1582\"}]},\"options\":[{\"series\":[{\"datasetIndex\":1,\"type\":\"bar\",\"encode\":{\"x\":\"Tree\",\"y\":\"circumference\"}}],\"title\":{\"text\":\"age 118 days\"}},{\"series\":[{\"datasetIndex\":2,\"type\":\"bar\",\"encode\":{\"x\":\"Tree\",\"y\":\"circumference\"}}],\"title\":{\"text\":\"age 484 days\"}},{\"series\":[{\"datasetIndex\":3,\"type\":\"bar\",\"encode\":{\"x\":\"Tree\",\"y\":\"circumference\"}}],\"title\":{\"text\":\"age 664 days\"}},{\"series\":[{\"datasetIndex\":4,\"type\":\"bar\",\"encode\":{\"x\":\"Tree\",\"y\":\"circumference\"}}],\"title\":{\"text\":\"age 1004 days\"}},{\"series\":[{\"datasetIndex\":5,\"type\":\"bar\",\"encode\":{\"x\":\"Tree\",\"y\":\"circumference\"}}],\"title\":{\"text\":\"age 1231 days\"}},{\"series\":[{\"datasetIndex\":6,\"type\":\"bar\",\"encode\":{\"x\":\"Tree\",\"y\":\"circumference\"}}],\"title\":{\"text\":\"age 1372 days\"}},{\"series\":[{\"datasetIndex\":7,\"type\":\"bar\",\"encode\":{\"x\":\"Tree\",\"y\":\"circumference\"}}],\"title\":{\"text\":\"age 1582 days\"}}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}  #------ Timeline with pies df <- data.frame(   group= c(1,1,1,1,2,2,2,2),   type=  c(\"type1\",\"type1\",\"type2\",\"type2\",\"type1\",\"type1\",\"type2\",\"type2\"),   value= c(5,2,2,1,4,3,1,4),   label= c(\"name1\",\"name2\",\"name3\",\"name4\",\"name1\",\"name2\",\"name3\",\"name4\"),   color= c(\"blue\",\"purple\",\"red\",\"gold\",\"blue\",\"purple\",\"red\",\"gold\") ) df |> group_by(group) |> ec.init(       preset= FALSE, legend= list(selectedMode= \"single\"),      timeline= list(show=TRUE),      series.param= list(type= 'pie', roseType= 'radius',        itemStyle= list(color=ec.clmn(5)),         label= list(formatter=ec.clmn(4)),        encode=list(value='value', itemName='type')) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"legend\":{\"selectedMode\":\"single\"},\"timeline\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"group\",\"type\",\"value\",\"label\",\"color\"],\"source\":[[1,\"type1\",5,\"name1\",\"blue\"],[1,\"type1\",2,\"name2\",\"purple\"],[1,\"type2\",2,\"name3\",\"red\"],[1,\"type2\",1,\"name4\",\"gold\"],[2,\"type1\",4,\"name1\",\"blue\"],[2,\"type1\",3,\"name2\",\"purple\"],[2,\"type2\",1,\"name3\",\"red\"],[2,\"type2\",4,\"name4\",\"gold\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"group\",\"=\":1}},\"id\":1},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"group\",\"=\":2}},\"id\":2}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}  #------ Boxplot without grouping ds <- mtcars |> select(cyl, drat) |>    ec.data(format='boxplot', jitter=0.1, #layout= 'h',       symbolSize=5, itemStyle=list(opacity=0.9),          emphasis= list(itemStyle= list(            color= 'chartreuse', borderWidth=4, opacity=1))   ) ec.init(   #colors= heat.colors(length(mcyl)),   legend= list(show= TRUE), tooltip= list(show=TRUE),   dataset= ds$dataset, series= ds$series, xAxis= ds$xAxis, yAxis= ds$yAxis,   series.param= list(color= 'LightGrey', itemStyle= list(color='DimGray')) ) |> ec.theme('dark-mushroom')  {\"x\":{\"theme\":\"dark-mushroom\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"legend\":{\"show\":true},\"tooltip\":{\"show\":true},\"dataset\":[{\"source\":[[3.85,3.69,3.92,4.08,4.93,4.22,3.7,4.08,4.43,3.77,4.11],[3.9,3.9,3.08,2.76,3.92,3.92,3.62],[3.15,3.21,3.07,3.07,3.07,2.93,3,3.23,2.76,3.15,3.73,3.08,4.22,3.54]]},{\"transform\":{\"type\":\"boxplot\",\"config\":{\"itemNameFormatter\":\"(p) => ['4','6','8'][p.value]\"}}}],\"series\":[{\"type\":\"boxplot\",\"name\":\"boxplot\",\"datasetIndex\":1,\"encode\":{\"tooltip\":[\"Low\",\"Q1\",\"Q2\",\"Q3\",\"High\"]},\"color\":\"LightGrey\",\"itemStyle\":{\"color\":\"DimGray\"},\"coordinateSystem\":\"cartesian2d\"},{\"type\":\"scatter\",\"jitter\":0.1,\"symbolSize\":5,\"emphasis\":{\"itemStyle\":{\"color\":\"chartreuse\",\"borderWidth\":4,\"opacity\":1}},\"name\":\"4\",\"large\":true,\"z\":3,\"data\":[[3.85,0.4374098815023899],[3.69,0.441033821972087],[3.92,0.5695795671083033],[4.08,0.5088060744572431],[4.93,0.4977616367861629],[4.22,0.5284685384947807],[3.7,0.4888973274733871],[4.08,0.5042826620861888],[4.43,0.4909801453817636],[3.77,0.5828898282721638],[4.11,0.4195588378235698]],\"yAxisIndex\":1,\"color\":\"LightGrey\",\"itemStyle\":{\"color\":\"DimGray\"}},{\"type\":\"scatter\",\"jitter\":0.1,\"symbolSize\":5,\"emphasis\":{\"itemStyle\":{\"color\":\"chartreuse\",\"borderWidth\":4,\"opacity\":1}},\"name\":\"6\",\"large\":true,\"z\":3,\"data\":[[3.9,1.470360603369772],[3.9,1.471299200691283],[3.08,1.44799889177084],[2.76,1.589832419203594],[3.92,1.566639425372705],[3.92,1.48746474715881],[3.62,1.447760090464726]],\"yAxisIndex\":1,\"color\":\"LightGrey\",\"itemStyle\":{\"color\":\"DimGray\"}},{\"type\":\"scatter\",\"jitter\":0.1,\"symbolSize\":5,\"emphasis\":{\"itemStyle\":{\"color\":\"chartreuse\",\"borderWidth\":4,\"opacity\":1}},\"name\":\"8\",\"large\":true,\"z\":3,\"data\":[[3.15,2.41174493143335],[3.21,2.495281379017979],[3.07,2.519692929228768],[3.07,2.481735875317827],[3.07,2.592519412562251],[2.93,2.551106295082718],[3,2.464575633406639],[3.23,2.582516251457855],[2.76,2.52844294430688],[3.15,2.592634053668007],[3.73,2.431809643190354],[3.08,2.531871907226741],[4.22,2.592210751539096],[3.54,2.402868018345907]],\"yAxisIndex\":1,\"color\":\"LightGrey\",\"itemStyle\":{\"color\":\"DimGray\"}}],\"xAxis\":[{\"scale\":true,\"name\":\"drat\"}],\"yAxis\":[{\"type\":\"category\",\"name\":\"cyl\"},{\"max\":3,\"show\":false}]}},\"evals\":[\"opts.dataset.1.transform.config.itemNameFormatter\"],\"jsHooks\":[]}  #------ Boxplot with grouping ds = airquality |> mutate(Day=round(Day/10)) |>    dplyr::relocate(Day,Wind,Month) |> group_by(Month) |>    ec.data(format='boxplot', jitter=0.1, layout= 'h') ec.init(   dataset= ds$dataset, series= ds$series,xAxis= ds$xAxis, yAxis= ds$yAxis,   legend= list(show= TRUE), tooltip= list(show=TRUE) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"source\":[[7.4,8,12.6,11.5,14.3],[14.9,8.6,13.8,20.1,8.6,6.9,9.699999999999999,9.199999999999999,10.9],[13.2,11.5,12,18.4,11.5,9.699999999999999,9.699999999999999,16.6,9.699999999999999,12,16.6],[14.9,8,12,14.9,5.7,7.4]]},{\"source\":[[8.6,9.699999999999999,16.1,9.199999999999999,8.6],[14.3,9.699999999999999,6.9,13.8,11.5,10.9,9.199999999999999,8,13.8],[11.5,14.9,20.7,9.199999999999999,11.5,10.3,6.3,1.7,4.6,6.3,8],[8,10.3,11.5,14.9,8]]},{\"source\":[[4.1,9.199999999999999,9.199999999999999,10.9,4.6],[10.9,5.1,6.3,5.7,7.4,8.6,14.3,14.9,14.9],[14.3,6.9,10.3,6.3,5.1,11.5,6.9,9.699999999999999,11.5,8.6,8],[8.6,12,7.4,7.4,7.4,9.199999999999999]]},{\"source\":[[6.9,13.8,7.4,6.9,7.4],[4.6,4,10.3,8,8.6,11.5,11.5,11.5,9.699999999999999],[11.5,10.3,6.3,7.4,10.9,10.3,15.5,14.3,12.6,9.699999999999999,3.4],[8,5.7,9.699999999999999,2.3,6.3,6.3]]},{\"source\":[[6.9,5.1,2.8,4.6,7.4],[15.5,10.9,10.3,10.9,9.699999999999999,14.9,15.5,6.3,10.9],[11.5,6.9,13.8,10.3,10.3,8,12.6,9.199999999999999,10.3,10.3,16.6],[6.9,13.2,14.3,8,11.5]]},{\"fromDatasetIndex\":0,\"transform\":{\"type\":\"boxplot\"}},{\"fromDatasetIndex\":1,\"transform\":{\"type\":\"boxplot\"}},{\"fromDatasetIndex\":2,\"transform\":{\"type\":\"boxplot\"}},{\"fromDatasetIndex\":3,\"transform\":{\"type\":\"boxplot\"}},{\"fromDatasetIndex\":4,\"transform\":{\"type\":\"boxplot\"}}],\"series\":[{\"name\":5,\"encode\":{\"tooltip\":[\"Low\",\"Q1\",\"Q2\",\"Q3\",\"High\"]},\"type\":\"boxplot\",\"datasetIndex\":5,\"coordinateSystem\":\"cartesian2d\"},{\"name\":6,\"encode\":{\"tooltip\":[\"Low\",\"Q1\",\"Q2\",\"Q3\",\"High\"]},\"type\":\"boxplot\",\"datasetIndex\":6,\"coordinateSystem\":\"cartesian2d\"},{\"name\":7,\"encode\":{\"tooltip\":[\"Low\",\"Q1\",\"Q2\",\"Q3\",\"High\"]},\"type\":\"boxplot\",\"datasetIndex\":7,\"coordinateSystem\":\"cartesian2d\"},{\"name\":8,\"encode\":{\"tooltip\":[\"Low\",\"Q1\",\"Q2\",\"Q3\",\"High\"]},\"type\":\"boxplot\",\"datasetIndex\":8,\"coordinateSystem\":\"cartesian2d\"},{\"name\":9,\"encode\":{\"tooltip\":[\"Low\",\"Q1\",\"Q2\",\"Q3\",\"High\"]},\"type\":\"boxplot\",\"datasetIndex\":9,\"coordinateSystem\":\"cartesian2d\"},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"h\",\"name\":\"0\",\"large\":true,\"z\":3,\"data\":[[7.4,0.5649348780047149],[8,0.4482186965178698],[12.6,0.4779113424941898],[11.5,0.5235719233285636],[14.3,0.4794015309773386],[8.6,0.5749637642875314],[9.699999999999999,0.4820341441314667],[16.1,0.4762925378978252],[9.199999999999999,0.4269003714900464],[8.6,0.4584145614877343],[4.1,0.4895307634957135],[9.199999999999999,0.4699938002042472],[9.199999999999999,0.5408015524968505],[10.9,0.5217737669590861],[4.6,0.4102198396809399],[6.9,0.5120703286956996],[13.8,0.4307911094743758],[7.4,0.4666191508527845],[6.9,0.5970116352662445],[7.4,0.406141440756619],[6.9,0.4433785846456885],[5.1,0.5060846041422338],[2.8,0.4855665843468159],[4.6,0.481781518086791],[7.4,0.5950098725501448]],\"yAxisIndex\":1},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"h\",\"name\":\"1\",\"large\":true,\"z\":3,\"data\":[[14.9,1.524910907726735],[8.6,1.565500794351101],[13.8,1.411123101226985],[20.1,1.519930114597082],[8.6,1.48556293239817],[6.9,1.568114725360647],[9.699999999999999,1.592093579238281],[9.199999999999999,1.543853415129706],[10.9,1.509072202723473],[14.3,1.529997843969613],[9.699999999999999,1.477016041008756],[6.9,1.404040939453989],[13.8,1.59205854581669],[11.5,1.412272387789562],[10.9,1.592963976878673],[9.199999999999999,1.478301117103547],[8,1.486731585813686],[13.8,1.410988914314657],[10.9,1.578549987543374],[5.1,1.452944543026388],[6.3,1.522826346941292],[5.7,1.436987682431936],[7.4,1.495715543162078],[8.6,1.422453434253111],[14.3,1.505923212040216],[14.9,1.518266140576452],[14.9,1.49089255426079],[4.6,1.584281397936866],[4,1.415162469772622],[10.3,1.421445958968252],[8,1.473229450406507],[8.6,1.581304082321003],[11.5,1.533680378040299],[11.5,1.565669737290591],[11.5,1.523045716341585],[9.699999999999999,1.495308610936627],[15.5,1.438988943351433],[10.9,1.597833096981049],[10.3,1.570943973818794],[10.9,1.430493742367253],[9.699999999999999,1.58227532110177],[14.9,1.476156639307737],[15.5,1.511666337447241],[6.3,1.582458850834519],[10.9,1.55830879220739]],\"yAxisIndex\":1},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"h\",\"name\":\"2\",\"large\":true,\"z\":3,\"data\":[[13.2,2.511897438764572],[11.5,2.412761038122698],[12,2.554112134408206],[18.4,2.404638435319066],[11.5,2.431273262295872],[9.699999999999999,2.58613011254929],[9.699999999999999,2.57683590981178],[16.6,2.409563561342657],[9.699999999999999,2.482879488449544],[12,2.425753170065582],[16.6,2.541817742306739],[11.5,2.444515778776258],[14.9,2.422605832340196],[20.7,2.45870299260132],[9.199999999999999,2.519034698838368],[11.5,2.441131954919547],[10.3,2.440867575723678],[6.3,2.518479074025527],[1.7,2.459001657553017],[4.6,2.446269546030089],[6.3,2.542517377436161],[8,2.470540576288477],[14.3,2.491609837766737],[6.9,2.44901534281671],[10.3,2.517109263129532],[6.3,2.590044228034094],[5.1,2.488243650179356],[11.5,2.560992124769837],[6.9,2.540305356308818],[9.699999999999999,2.528776411851868],[11.5,2.555002425145358],[8.6,2.532481737900525],[8,2.4201080232393],[11.5,2.564248013822362],[10.3,2.484105567308143],[6.3,2.423091737646609],[7.4,2.588277657376602],[10.9,2.415241212258115],[10.3,2.474630958819762],[15.5,2.467529328446835],[14.3,2.427955927466974],[12.6,2.518469676328823],[9.699999999999999,2.577402457315475],[3.4,2.512227683095261],[11.5,2.574471351318061],[6.9,2.539962285710499],[13.8,2.436102973902598],[10.3,2.507250686921179],[10.3,2.513503108872101],[8,2.418206842243671],[12.6,2.442835683608428],[9.199999999999999,2.565737249562517],[10.3,2.446413383260369],[10.3,2.522717388765886],[16.6,2.408161667315289]],\"yAxisIndex\":1},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"h\",\"name\":\"3\",\"large\":true,\"z\":3,\"data\":[[14.9,3.565568578708917],[8,3.588345461059362],[12,3.586102445842698],[14.9,3.428722152393311],[5.7,3.468181739095598],[7.4,3.551575601100922],[8,3.49706057771109],[10.3,3.419490188779309],[11.5,3.527461167890579],[14.9,3.558924597268924],[8,3.406893318053335],[8.6,3.404187520314008],[12,3.497597485873848],[7.4,3.530253436835483],[7.4,3.52997305332683],[7.4,3.534529692213982],[9.199999999999999,3.487594704143703],[8,3.501079880353063],[5.7,3.539384345291182],[9.699999999999999,3.573650869121775],[2.3,3.451375026116148],[6.3,3.594912756513804],[6.3,3.596731647942215],[6.9,3.529427269659936],[13.2,3.492863710317761],[14.3,3.410644552204758],[8,3.419709953851998],[11.5,3.464272750774398]],\"yAxisIndex\":1}],\"xAxis\":[{\"scale\":true,\"name\":\"Wind\"}],\"yAxis\":[{\"type\":\"category\",\"name\":\"Day\"},{\"max\":4,\"show\":false}],\"legend\":{\"show\":true},\"tooltip\":{\"show\":true}}},\"evals\":[],\"jsHooks\":[]}  #------ ecStat plugin: dataset transform to regression line # presets for xAxis,yAxis,dataset and series are used data.frame(x= 1:10, y= sample(1:100,10)) |> ec.init(load= 'ecStat',   js= c('echarts.registerTransform(ecStat.transform.regression)','','')) |> ec.upd({   dataset[[2]] <- list(      transform= list(type= 'ecStat:regression',                      config= list(method= 'polynomial', order= 3)))   series[[2]] <- list(     type= 'line', itemStyle=list(color= 'red'), datasetIndex= 1) })  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":[\"echarts.registerTransform(ecStat.transform.regression)\",\"\",\"\"],\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"x\",\"y\"],\"source\":[[1,13],[2,53],[3,56],[4,63],[5,80],[6,93],[7,36],[8,62],[9,28],[10,6]]},{\"transform\":{\"type\":\"ecStat:regression\",\"config\":{\"method\":\"polynomial\",\"order\":3}}}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"x\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"y\"},\"series\":[{\"type\":\"scatter\"},{\"type\":\"line\",\"itemStyle\":{\"color\":\"red\"},\"datasetIndex\":1}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}  #------ ECharts: dataset, transform and sort datset <- list(   list(source=list(     list('name', 'age', 'profession', 'score', 'date'),     list('Hannah Krause', 41, 'Engineer', 314, '2011-02-12'),     list('Zhao Qian', 20, 'Teacher', 351, '2011-03-01'),     list('Jasmin Krause', 52, 'Musician', 287, '2011-02-14'),     list('Li Lei', 37, 'Teacher', 219, '2011-02-18'),     list('Karle Neumann', 25, 'Engineer', 253, '2011-04-02'),     list('Adrian Groß', 19, 'Teacher', NULL, '2011-01-16'),     list('Mia Neumann', 71, 'Engineer', 165, '2011-03-19'),     list('Böhm Fuchs', 36, 'Musician', 318, '2011-02-24'),     list('Han Meimei', 67, 'Engineer', 366, '2011-03-12'))),   list(transform = list(type= 'sort', config=list(     list(dimension='profession', order='desc'),     list(dimension='score', order='desc'))   ))) ec.init(   title= list(     text= 'Data transform, multiple-sort bar',     subtext= 'JS source',     sublink= paste0('https://echarts.apache.org/next/examples/en/editor.html',                     '?c=doc-example/data-transform-multiple-sort-bar'),     left= 'center'),   tooltip= list(trigger= 'item', axisPointer= list(type= 'shadow')),   dataset= datset,   xAxis= list(type= 'category', axisLabel= list(interval=0, rotate=30)),   yAxis= list(name= 'score'),   series= list(list(     type= 'bar',     label= list(show= TRUE, rotate= 90, position= 'insideBottom',                 align= 'left', verticalAlign= 'middle'),     itemStyle =list(color= htmlwidgets::JS(\"function (params) {         return ({           Engineer: '#5470c6',           Teacher: '#91cc75',           Musician: '#fac858'         })[params.data[2]]       }\")),     encode= list(x= 'name', y= 'score', label= list('profession') ),     datasetIndex= 1   )) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"text\":\"Data transform, multiple-sort bar\",\"subtext\":\"JS source\",\"sublink\":\"https://echarts.apache.org/next/examples/en/editor.html?c=doc-example/data-transform-multiple-sort-bar\",\"left\":\"center\"},\"tooltip\":{\"trigger\":\"item\",\"axisPointer\":{\"type\":\"shadow\"}},\"dataset\":[{\"source\":[[\"name\",\"age\",\"profession\",\"score\",\"date\"],[\"Hannah Krause\",41,\"Engineer\",314,\"2011-02-12\"],[\"Zhao Qian\",20,\"Teacher\",351,\"2011-03-01\"],[\"Jasmin Krause\",52,\"Musician\",287,\"2011-02-14\"],[\"Li Lei\",37,\"Teacher\",219,\"2011-02-18\"],[\"Karle Neumann\",25,\"Engineer\",253,\"2011-04-02\"],[\"Adrian Groß\",19,\"Teacher\",null,\"2011-01-16\"],[\"Mia Neumann\",71,\"Engineer\",165,\"2011-03-19\"],[\"Böhm Fuchs\",36,\"Musician\",318,\"2011-02-24\"],[\"Han Meimei\",67,\"Engineer\",366,\"2011-03-12\"]]},{\"transform\":{\"type\":\"sort\",\"config\":[{\"dimension\":\"profession\",\"order\":\"desc\"},{\"dimension\":\"score\",\"order\":\"desc\"}]}}],\"xAxis\":{\"type\":\"category\",\"axisLabel\":{\"interval\":0,\"rotate\":30}},\"yAxis\":{\"name\":\"score\"},\"series\":[{\"type\":\"bar\",\"label\":{\"show\":true,\"rotate\":90,\"position\":\"insideBottom\",\"align\":\"left\",\"verticalAlign\":\"middle\"},\"itemStyle\":{\"color\":\"function (params) {\\n        return ({\\n          Engineer: '#5470c6',\\n          Teacher: '#91cc75',\\n          Musician: '#fac858'\\n        })[params.data[2]]\\n      }\"},\"encode\":{\"x\":\"name\",\"y\":\"score\",\"label\":[\"profession\"]},\"datasetIndex\":0}]}},\"evals\":[\"opts.series.0.itemStyle.color\"],\"jsHooks\":[]}  #------ Sunburst # see website for different ways to set hierarchical data # https://helgasoft.github.io/echarty/uc3.html data = list(list(name='Grandpa',children=list(list(name='Uncle Leo',value=15,      children=list(list(name='Cousin Jack',value=2), list(name='Cousin Mary',value=5,      children=list(list(name='Jackson',value=2))), list(name='Cousin Ben',value=4))),     list(name='Father',value=10,children=list(list(name='Me',value=5),    list(name='Brother Peter',value=1))))), list(name='Nancy',children=list(    list(name='Uncle Nike',children=list(list(name='Cousin Betty',value=1),    list(name='Cousin Jenny',value=2)))))) ec.init( preset= FALSE,          series= list(list(type= 'sunburst', data= data,                            radius= list(0, '90%'),                            label= list(rotate='radial') )) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"type\":\"sunburst\",\"data\":[{\"name\":\"Grandpa\",\"children\":[{\"name\":\"Uncle Leo\",\"value\":15,\"children\":[{\"name\":\"Cousin Jack\",\"value\":2},{\"name\":\"Cousin Mary\",\"value\":5,\"children\":[{\"name\":\"Jackson\",\"value\":2}]},{\"name\":\"Cousin Ben\",\"value\":4}]},{\"name\":\"Father\",\"value\":10,\"children\":[{\"name\":\"Me\",\"value\":5},{\"name\":\"Brother Peter\",\"value\":1}]}]},{\"name\":\"Nancy\",\"children\":[{\"name\":\"Uncle Nike\",\"children\":[{\"name\":\"Cousin Betty\",\"value\":1},{\"name\":\"Cousin Jenny\",\"value\":2}]}]}],\"radius\":[0,\"90%\"],\"label\":{\"rotate\":\"radial\"}}]}},\"evals\":[],\"jsHooks\":[]} #------ Gauge ec.init(preset= FALSE,         series= list(list(           type = 'gauge', max = 160, min=40,           detail = list(formatter='\\U1F9E0={value}'),           data = list(list(value=85, name='IQ test')) )) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"type\":\"gauge\",\"max\":160,\"min\":40,\"detail\":{\"formatter\":\"🧠={value}\"},\"data\":[{\"value\":85,\"name\":\"IQ test\"}]}]}},\"evals\":[],\"jsHooks\":[]}  #------ Custom gauge with animation jcode <- \"setInterval(function () {      opts.series[0].data[0].value = (Math.random() * 100).toFixed(2) - 0;       chart.setOption(opts, true);}, 2000);\" ec.init(preset= FALSE, js= jcode,         series= list(list(           type= 'gauge',           axisLine= list(lineStyle=list(width=30,             color= list(c(0.3, '#67e0e3'),c(0.7, '#37a2da'),c(1, '#fd666d')))),             pointer= list(itemStyle=list(color='auto')),             axisTick= list(distance=-30,length=8, lineStyle=list(color='#fff',width=2)),             splitLine= list(distance=-30,length=30, lineStyle=list(color='#fff',width=4)),             axisLabel= list(color='auto',distance=40,fontSize=20),             detail= list(valueAnimation=TRUE, formatter='{value} km/h',color='auto'),             data= list(list(value=70)) )))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":\"setInterval(function () { \\n    opts.series[0].data[0].value = (Math.random() * 100).toFixed(2) - 0;  \\n    chart.setOption(opts, true);}, 2000);\",\"dbg\":false,\"opts\":{\"series\":[{\"type\":\"gauge\",\"axisLine\":{\"lineStyle\":{\"width\":30,\"color\":[[\"0.3\",\"#67e0e3\"],[\"0.7\",\"#37a2da\"],[\"1\",\"#fd666d\"]]}},\"pointer\":{\"itemStyle\":{\"color\":\"auto\"}},\"axisTick\":{\"distance\":-30,\"length\":8,\"lineStyle\":{\"color\":\"#fff\",\"width\":2}},\"splitLine\":{\"distance\":-30,\"length\":30,\"lineStyle\":{\"color\":\"#fff\",\"width\":4}},\"axisLabel\":{\"color\":\"auto\",\"distance\":40,\"fontSize\":20},\"detail\":{\"valueAnimation\":true,\"formatter\":\"{value} km/h\",\"color\":\"auto\"},\"data\":[{\"value\":70}]}]}},\"evals\":[],\"jsHooks\":[]}  #------ Sankey and graph plots sankey <- data.frame(   name   = c(\"a\",\"b\", \"c\", \"d\", \"e\"),   source = c(\"a\", \"b\", \"c\", \"d\", \"c\"),   target = c(\"b\", \"c\", \"d\", \"e\", \"e\"),   value  = c(5, 6, 2, 8, 13) ) data <- ec.data(sankey, 'names') ec.init(preset= FALSE,   series= list(list( type= 'sankey',     data= data,     edges= data )) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"type\":\"sankey\",\"data\":[{\"name\":\"a\",\"source\":\"a\",\"target\":\"b\",\"value\":5},{\"name\":\"b\",\"source\":\"b\",\"target\":\"c\",\"value\":6},{\"name\":\"c\",\"source\":\"c\",\"target\":\"d\",\"value\":2},{\"name\":\"d\",\"source\":\"d\",\"target\":\"e\",\"value\":8},{\"name\":\"e\",\"source\":\"c\",\"target\":\"e\",\"value\":13}],\"edges\":[{\"name\":\"a\",\"source\":\"a\",\"target\":\"b\",\"value\":5},{\"name\":\"b\",\"source\":\"b\",\"target\":\"c\",\"value\":6},{\"name\":\"c\",\"source\":\"c\",\"target\":\"d\",\"value\":2},{\"name\":\"d\",\"source\":\"d\",\"target\":\"e\",\"value\":8},{\"name\":\"e\",\"source\":\"c\",\"target\":\"e\",\"value\":13}]}]}},\"evals\":[],\"jsHooks\":[]}  # graph plot with same data --------------- ec.init(preset= FALSE,         title= list(text= 'Graph'),         tooltip= list(show= TRUE),         series= list(list(           type= 'graph',           layout= 'force',   # try 'circular' too           data= lapply(data,              function(x) list(name= x$node, tooltip= list(show=FALSE))),           edges= lapply(data,              function(x) { x$lineStyle <- list(width=x$value); x }),           emphasis= list(focus= 'adjacency',                          label= list(position= 'right', show=TRUE)),           label= list(show=TRUE), roam= TRUE, zoom= 4,           tooltip= list(textStyle= list(color= 'blue')),           lineStyle= list(curveness= 0.3) )) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"text\":\"Graph\"},\"tooltip\":{\"show\":true},\"series\":[{\"type\":\"graph\",\"layout\":\"force\",\"data\":[{\"name\":null,\"tooltip\":{\"show\":false}},{\"name\":null,\"tooltip\":{\"show\":false}},{\"name\":null,\"tooltip\":{\"show\":false}},{\"name\":null,\"tooltip\":{\"show\":false}},{\"name\":null,\"tooltip\":{\"show\":false}}],\"edges\":[{\"name\":\"a\",\"source\":\"a\",\"target\":\"b\",\"value\":5,\"lineStyle\":{\"width\":5}},{\"name\":\"b\",\"source\":\"b\",\"target\":\"c\",\"value\":6,\"lineStyle\":{\"width\":6}},{\"name\":\"c\",\"source\":\"c\",\"target\":\"d\",\"value\":2,\"lineStyle\":{\"width\":2}},{\"name\":\"d\",\"source\":\"d\",\"target\":\"e\",\"value\":8,\"lineStyle\":{\"width\":8}},{\"name\":\"e\",\"source\":\"c\",\"target\":\"e\",\"value\":13,\"lineStyle\":{\"width\":13}}],\"emphasis\":{\"focus\":\"adjacency\",\"label\":{\"position\":\"right\",\"show\":true}},\"label\":{\"show\":true},\"roam\":true,\"zoom\":4,\"tooltip\":{\"textStyle\":{\"color\":\"blue\"}},\"lineStyle\":{\"curveness\":0.3}}]}},\"evals\":[],\"jsHooks\":[]}  #------ group connect  main <- mtcars |> ec.init(height= 200, legend= list(show=FALSE),      tooltip= list(axisPointer= list(axis='x')),     series.param= list(name= \"this legend is shared\")) main$x$group <- 'group1' # same group name for all charts main$x$connect <- 'group1' q1 <- main |> ec.upd({ series[[1]]$encode <- list(y='hp'); yAxis$name <- 'hp'        legend <- list(show=TRUE)  # show first legend to share }) q2 <- main |> ec.upd({ series[[1]]$encode <- list(y='wt'); yAxis$name <- 'wt' }) #if (interactive()) {   # browsable   ec.util(cmd='layout', list(q1,q2), cols=2, title='group connect')         group connect                         {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"legend\":{\"show\":true},\"tooltip\":{\"axisPointer\":{\"axis\":\"x\"}},\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"mpg\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"hp\"},\"series\":[{\"type\":\"scatter\",\"name\":\"this legend is shared\",\"encode\":{\"y\":\"hp\"}}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null},\"group\":\"group1\",\"connect\":\"group1\"},\"evals\":[],\"jsHooks\":[]}                   {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"legend\":{\"show\":false},\"tooltip\":{\"axisPointer\":{\"axis\":\"x\"}},\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"mpg\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"wt\"},\"series\":[{\"type\":\"scatter\",\"name\":\"this legend is shared\",\"encode\":{\"y\":\"wt\"}}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null},\"group\":\"group1\",\"connect\":\"group1\"},\"evals\":[],\"jsHooks\":[]}    #}   #------ Javascript execution: ec.init 'js' parameter demo # in single item scenario (js=jcode), execution is same as j3 below if (interactive()) {  j1 <- \"winvar= 'j1';\" # set window variables  j2 <- \"opts.title.text= 'changed';\"   # opts exposed  j3 <- \"ww= chart.getWidth(); alert('width:'+ww);\"  # chart exposed  ec.init(js= c(j1, j2, j3), title= list(text= 'Title'),     series.param= list(name='sname'),    legend= list(formatter= ec.clmn(\"function(name) {      return name +' - '+ this.winvar; }\"))  ) }  #------ echarty Javascript built-in functions jtgl <- \"() => {    ch1 = ec_chart(echwid);   // takes the auto-assigned id //ch1 = ec_chart('myTree'); // manual id is OK too   opts = ch1.getOption(); //opts = ec_option(echwid);  // for reading, without setOption   opts.series[0].orient= opts.series[0].orient=='TB' ? 'LR':'TB';   ch1.setOption(opts); }\" dbut <- ec.util(cmd='button', text='toggle', js=jtgl) data <- list(list(name='root', children=list(list(name='A',value=1),list(name='B',value=3)))) ec.init( # elementId='myTree',   series.param= list(type='tree', data=data), graphic= list(dbut) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"graphic\":[{\"type\":\"rect\",\"right\":40,\"top\":20,\"zlevel\":4,\"shape\":{\"height\":20,\"width\":60,\"r\":5},\"style\":{\"fill\":\"lightgray\"},\"textContent\":{\"zlevel\":4,\"style\":{\"text\":\"toggle\",\"fill\":\"black\"}},\"textConfig\":{\"position\":\"inside\"},\"onclick\":\"() => { \\n  ch1 = ec_chart(echwid);   // takes the auto-assigned id\\n//ch1 = ec_chart('myTree'); // manual id is OK too\\n  opts = ch1.getOption();\\n//opts = ec_option(echwid);  // for reading, without setOption\\n  opts.series[0].orient= opts.series[0].orient=='TB' ? 'LR':'TB';\\n  ch1.setOption(opts); }\",\"text\":\"toggle\"}],\"series\":[{\"type\":\"tree\",\"data\":[{\"name\":\"root\",\"children\":[{\"name\":\"A\",\"value\":1},{\"name\":\"B\",\"value\":3}]}]}]}},\"evals\":[\"opts.graphic.0.onclick\"],\"jsHooks\":[]} #------ Events in Shiny ---------- if (interactive()) {   library(shiny); library(dplyr); library(echarty)  ui <- fluidPage(ecs.output('plot'), textOutput('out1') ) server <- function(input, output, session) {   output$plot <- ecs.render({     p <- mtcars |> group_by(cyl) |> ec.init(dataZoom= list(type= 'inside'))     p$x$on <- list(                     # event(s) with Javascript handler       list(event= 'legendselectchanged',          handler= htmlwidgets::JS(\"(e) => Shiny.setInputValue('lgnd', 'legend:'+e.name);\"))     )     p$x$capture <- 'datazoom'     p   })   observeEvent(input$plot_datazoom, {   # captured event     output$out1 <- renderText({        paste('Zoom.start:',input$plot_datazoom$batch[[1]]$start,'%') })   })   observeEvent(input$plot_mouseover, {  # built-in event     v <- input$plot_mouseover     output$out1 <- renderText({ paste('s:',v$seriesName,'d:',v$data[v$dataIndex+1]) })   })   observeEvent(input$lgnd, {            # reactive response to on:legend event     output$out1 <- renderText({ input$lgnd })   }) } shinyApp(ui, server) }  #------------- Shiny interactive charts demo --------------- #  run command: demo(eshiny)  # }  # donttest"},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":null,"dir":"Reference","previous_headings":"","what":"JSON to chart — ec.fromJson","title":"JSON to chart — ec.fromJson","text":"Convert JSON string file chart","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JSON to chart — ec.fromJson","text":"","code":"ec.fromJson(txt, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"JSON to chart — ec.fromJson","text":"txt one following:   class url, like url('https://serv.us/cars.txt')   class file, like file('c:/temp/cars.txt','rb')   class json, like ec.inspect(p), options full   class character, JSON string options , see example ... attributes pass internal ec.init txt options ","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"JSON to chart — ec.fromJson","text":"echarty widget.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"JSON to chart — ec.fromJson","text":"txt either list options (x$opts) set setOption, entire htmlwidget generated thru ec.inspect target='full'. latter imports JavaScript functions defined user.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"JSON to chart — ec.fromJson","text":"","code":"txt <- '{    \"xAxis\": { \"data\": [\"Mon\", \"Tue\", \"Wed\"]}, \"yAxis\": { },    \"series\": { \"type\": \"line\", \"data\": [150, 230, 224] } }' ec.fromJson(txt)  # text json  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"xAxis\":{\"data\":[\"Mon\",\"Tue\",\"Wed\"]},\"yAxis\":{},\"series\":{\"type\":\"line\",\"data\":[150,230,224]}}},\"evals\":[],\"jsHooks\":[]}# outFile <- 'c:/temp/cars.json' # cars |> ec.init() |> ec.inspect(target='full', file=outFile) # ec.fromJson(file(outFile, 'rb')) # ec.fromJson(url('http://localhost/echarty/cars.json')) ec.fromJson('https://helgasoft.github.io/echarty/test/pfull.json')  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":[\"\",\"\",\"\\nloc= [[2.32968,48.85948,0],[2.32959,48.85967,0],[2.33026,48.86059,0],[2.33005,48.86097,0],[2.33358,48.86583,0],[2.33421,48.8664,0],[2.33293,48.86935,0],[2.33245,48.87093,0]];\\nii= 0; inc= 1;\\nsetInterval( (p) => {\\n  ii = ii + inc;\\n  if (ii> 7) { inc= -1; ii--; }\\n  if (ii< 0) { inc= +1; ii++; }\\n  loca = loc[ii];\\n  opt = {series: {id: 'bycicle', data: [loca]} };\\n  chart.setOption(opt);\\n}, 633)\"],\"opts\":{\"leaflet\":{\"center\":[2.329466,48.859475],\"zoom\":14,\"roam\":true,\"tiles\":[{\"urlTemplate\":\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}]},\"tooltip\":{\"show\":true,\"formatter\":\"{b}\"},\"color\":[\"green\",\"blue\",\"red\"],\"series\":[{\"type\":\"custom\",\"renderItem\":\"(params, api) => { ecf.geofill=null;  ecf.geojson= {\\\"type\\\":[\\\"FeatureCollection\\\"],\\\"properties\\\":{\\\"id\\\":[\\\"all3\\\"]},\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[2.3305,48.8622],[2.3303,48.8616],[2.3296,48.8616],[2.3295,48.8615],[2.3294,48.8615],[2.3288,48.8615],[2.3285,48.8614],[2.3285,48.8614],[2.3284,48.8614],[2.3278,48.8611],[2.3275,48.861],[2.327,48.861],[2.3269,48.861],[2.3265,48.861],[2.3261,48.8611],[2.3258,48.8615],[2.3258,48.8618],[2.3255,48.8622],[2.3252,48.8622],[2.3247,48.8622],[2.3245,48.8622],[2.3243,48.8617],[2.3236,48.8616],[2.3235,48.8615],[2.3234,48.8616],[2.3229,48.8615],[2.3231,48.8611],[2.3232,48.8607],[2.3233,48.8605],[2.3234,48.8604],[2.3235,48.8603],[2.3238,48.8598],[2.324,48.8595],[2.3243,48.8593],[2.3245,48.8592],[2.3247,48.8593],[2.3253,48.8593],[2.3255,48.8594],[2.3256,48.8594],[2.3258,48.8595],[2.3263,48.8596],[2.3265,48.8596],[2.3266,48.8596],[2.3272,48.8598],[2.3275,48.8598],[2.3276,48.8597],[2.3277,48.8595],[2.3279,48.859],[2.328,48.859],[2.3283,48.8585],[2.3284,48.8584],[2.3285,48.8578],[2.3286,48.8576],[2.3287,48.8575],[2.3294,48.8574],[2.3295,48.8574],[2.3295,48.8574],[2.3301,48.8575],[2.3303,48.8576],[2.3305,48.8576],[2.3308,48.8578],[2.331,48.8579],[2.3315,48.8581],[2.3319,48.8581],[2.3322,48.8582],[2.3325,48.8582],[2.3327,48.8582],[2.3334,48.8585],[2.3328,48.8588],[2.3325,48.8591],[2.3323,48.8593],[2.3323,48.8595],[2.3323,48.8597],[2.3325,48.8603],[2.3325,48.8604],[2.3325,48.8605],[2.3325,48.8605],[2.3325,48.8605],[2.3325,48.8605],[2.3316,48.8606],[2.3315,48.8606],[2.3311,48.8609],[2.3309,48.8609],[2.3309,48.8611],[2.3306,48.8615],[2.3307,48.8617],[2.3305,48.8622]]]]},\\\"properties\\\":{\\\"name\\\":\\\"p500\\\",\\\"range\\\":500,\\\"id\\\":\\\"0.5 min\\\",\\\"ppfill\\\":\\\"#00FF0077\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[2.3335,48.8662],[2.3331,48.8659],[2.3329,48.8659],[2.3325,48.8658],[2.3322,48.8658],[2.3318,48.8655],[2.3316,48.8653],[2.3315,48.8653],[2.3313,48.8653],[2.3308,48.8655],[2.3305,48.8655],[2.3305,48.8655],[2.3304,48.8655],[2.3304,48.8655],[2.3304,48.8654],[2.3302,48.8647],[2.3296,48.8646],[2.3295,48.8645],[2.3293,48.8646],[2.3285,48.8645],[2.3285,48.8646],[2.3285,48.8645],[2.3285,48.8645],[2.3285,48.8645],[2.3285,48.8645],[2.3285,48.8645],[2.3294,48.8644],[2.3295,48.8644],[2.3295,48.8644],[2.3303,48.8643],[2.3305,48.8643],[2.3308,48.8641],[2.3311,48.8641],[2.331,48.8639],[2.3312,48.8635],[2.3309,48.863],[2.3305,48.8628],[2.3303,48.8627],[2.3301,48.8625],[2.3299,48.862],[2.3295,48.8618],[2.3291,48.8618],[2.3288,48.8618],[2.3285,48.8618],[2.3282,48.8618],[2.3277,48.8617],[2.3275,48.8617],[2.3271,48.8619],[2.3269,48.8619],[2.3269,48.862],[2.3267,48.8625],[2.3266,48.8626],[2.3265,48.8627],[2.3262,48.8627],[2.3258,48.8628],[2.3255,48.8628],[2.3252,48.8628],[2.3248,48.8628],[2.3245,48.8628],[2.324,48.863],[2.3239,48.8629],[2.3239,48.863],[2.3237,48.8635],[2.3236,48.8636],[2.3235,48.8637],[2.3232,48.8637],[2.3227,48.8637],[2.3225,48.8638],[2.3221,48.8639],[2.3218,48.8638],[2.3215,48.8639],[2.321,48.8639],[2.3206,48.8635],[2.3205,48.8634],[2.3205,48.8634],[2.3204,48.8634],[2.3203,48.8635],[2.3202,48.8637],[2.3203,48.8644],[2.3196,48.8644],[2.3195,48.8644],[2.3194,48.8644],[2.3189,48.8641],[2.3185,48.8639],[2.3181,48.8638],[2.3178,48.8638],[2.3175,48.8637],[2.3173,48.8637],[2.3166,48.8635],[2.3166,48.8633],[2.3165,48.8625],[2.3165,48.8625],[2.3173,48.8624],[2.3175,48.8619],[2.3177,48.8617],[2.3181,48.8615],[2.3179,48.861],[2.3179,48.8609],[2.3177,48.8605],[2.3181,48.8602],[2.3185,48.8598],[2.3187,48.8597],[2.3192,48.8597],[2.3195,48.8597],[2.3196,48.8596],[2.3204,48.8595],[2.3205,48.8595],[2.3205,48.8595],[2.3205,48.8595],[2.3205,48.8595],[2.3205,48.8594],[2.3204,48.8594],[2.3197,48.8593],[2.3195,48.8591],[2.319,48.8589],[2.3188,48.8585],[2.3191,48.8581],[2.3195,48.8579],[2.3196,48.8584],[2.3203,48.8583],[2.3205,48.8584],[2.3207,48.8582],[2.3211,48.8581],[2.3211,48.8578],[2.3213,48.8575],[2.3212,48.8572],[2.3212,48.8567],[2.3206,48.8566],[2.3205,48.8565],[2.3204,48.8566],[2.3197,48.8565],[2.32,48.856],[2.3202,48.8558],[2.3204,48.8555],[2.3204,48.8554],[2.3205,48.8554],[2.3205,48.8555],[2.3205,48.8555],[2.3205,48.8555],[2.3206,48.8563],[2.3212,48.8563],[2.3215,48.8563],[2.3217,48.8563],[2.3224,48.8565],[2.3225,48.8563],[2.3229,48.8559],[2.3232,48.8555],[2.3234,48.8554],[2.3235,48.8554],[2.3235,48.8554],[2.3237,48.8555],[2.3242,48.8558],[2.3245,48.8558],[2.3247,48.8558],[2.3252,48.8555],[2.3253,48.8554],[2.3255,48.8553],[2.3256,48.8553],[2.3259,48.8555],[2.3262,48.8557],[2.3265,48.8562],[2.3266,48.8564],[2.3269,48.8565],[2.3265,48.8565],[2.3265,48.8565],[2.3265,48.8565],[2.3256,48.8566],[2.3255,48.8566],[2.3252,48.8567],[2.3247,48.8568],[2.3248,48.8572],[2.3247,48.8575],[2.3249,48.858],[2.325,48.858],[2.325,48.858],[2.3255,48.8582],[2.3257,48.8582],[2.3262,48.8582],[2.3265,48.8582],[2.3269,48.8581],[2.3271,48.8581],[2.3272,48.8578],[2.3273,48.8575],[2.3273,48.8573],[2.3275,48.8565],[2.3275,48.8565],[2.3284,48.8566],[2.3285,48.8565],[2.3285,48.8565],[2.3294,48.8565],[2.3295,48.8565],[2.3295,48.8565],[2.3296,48.8565],[2.3296,48.8564],[2.3296,48.8556],[2.3296,48.8555],[2.33,48.855],[2.33,48.855],[2.3302,48.8545],[2.3303,48.8543],[2.3305,48.8541],[2.3307,48.8543],[2.3309,48.8545],[2.3312,48.8547],[2.3315,48.8547],[2.3317,48.8547],[2.3322,48.8548],[2.3325,48.8548],[2.3328,48.8548],[2.3333,48.8547],[2.3335,48.8547],[2.3338,48.8552],[2.3344,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3336,48.8556],[2.3335,48.8556],[2.3333,48.8557],[2.3327,48.8557],[2.3328,48.8561],[2.3327,48.8565],[2.3327,48.8567],[2.3327,48.8572],[2.3328,48.8575],[2.333,48.8579],[2.3335,48.8581],[2.3339,48.8579],[2.3342,48.8575],[2.3342,48.8573],[2.3345,48.8566],[2.3346,48.8566],[2.3352,48.8567],[2.3355,48.8567],[2.3358,48.8568],[2.3361,48.8569],[2.3365,48.8569],[2.3369,48.8571],[2.3371,48.8571],[2.3375,48.8572],[2.3379,48.8571],[2.3381,48.8571],[2.3383,48.8566],[2.3384,48.8565],[2.3384,48.8564],[2.3385,48.8564],[2.3385,48.8564],[2.339,48.8565],[2.3393,48.8566],[2.3395,48.8569],[2.3395,48.8574],[2.3395,48.8575],[2.3395,48.8575],[2.3395,48.8576],[2.3394,48.8575],[2.3386,48.8576],[2.3385,48.8576],[2.3384,48.8576],[2.3376,48.8576],[2.3375,48.8576],[2.3373,48.8576],[2.3367,48.8577],[2.3365,48.8577],[2.3363,48.8577],[2.3357,48.8577],[2.3355,48.8577],[2.335,48.858],[2.3348,48.8585],[2.335,48.859],[2.3355,48.8593],[2.3357,48.8593],[2.3363,48.8593],[2.3365,48.8593],[2.3366,48.8593],[2.3374,48.8594],[2.3375,48.8594],[2.3376,48.8594],[2.3384,48.8594],[2.3385,48.8594],[2.3386,48.8594],[2.3392,48.8595],[2.3385,48.8595],[2.3385,48.8595],[2.3383,48.8596],[2.3377,48.8597],[2.3376,48.8604],[2.3375,48.8605],[2.3375,48.8605],[2.3375,48.8609],[2.3372,48.8612],[2.3371,48.8615],[2.3368,48.8618],[2.3365,48.862],[2.3362,48.8623],[2.3361,48.8625],[2.3358,48.8628],[2.3355,48.8632],[2.3353,48.8633],[2.3351,48.8635],[2.335,48.864],[2.335,48.864],[2.3347,48.8645],[2.3346,48.8646],[2.3345,48.8647],[2.3341,48.8651],[2.3339,48.8655],[2.3338,48.8658],[2.3335,48.8662]]]]},\\\"properties\\\":{\\\"name\\\":\\\"p1000\\\",\\\"range\\\":1000,\\\"id\\\":\\\"1 min\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[2.3355,48.8697],[2.335,48.87],[2.3348,48.8701],[2.3345,48.8703],[2.3343,48.8703],[2.3336,48.8704],[2.3335,48.8704],[2.3334,48.8704],[2.3325,48.8705],[2.3325,48.8705],[2.3321,48.8698],[2.3319,48.8695],[2.3317,48.8692],[2.3315,48.8691],[2.331,48.869],[2.3309,48.869],[2.3305,48.8689],[2.3301,48.8688],[2.3297,48.8685],[2.3303,48.8683],[2.3305,48.8684],[2.3308,48.8682],[2.3311,48.8681],[2.331,48.8679],[2.3312,48.8675],[2.3312,48.8672],[2.3312,48.8668],[2.3312,48.8665],[2.3309,48.866],[2.3305,48.8658],[2.3302,48.8658],[2.3299,48.8655],[2.3297,48.8652],[2.3295,48.8651],[2.3292,48.8652],[2.329,48.8655],[2.3288,48.8658],[2.3285,48.866],[2.3281,48.8661],[2.3279,48.8661],[2.3275,48.8661],[2.3271,48.8661],[2.3268,48.8662],[2.3265,48.8662],[2.3261,48.8661],[2.3256,48.8663],[2.3257,48.8657],[2.3255,48.8655],[2.3262,48.8652],[2.3265,48.8652],[2.3267,48.8652],[2.3272,48.8652],[2.3275,48.8652],[2.3279,48.8649],[2.3281,48.8645],[2.3282,48.8642],[2.3285,48.8641],[2.3288,48.8641],[2.3291,48.8641],[2.3295,48.8641],[2.3298,48.8641],[2.3301,48.8641],[2.3305,48.8641],[2.3308,48.8639],[2.331,48.8635],[2.3308,48.8631],[2.3305,48.863],[2.3301,48.8628],[2.33,48.8625],[2.3298,48.8621],[2.3295,48.862],[2.329,48.862],[2.329,48.862],[2.3285,48.862],[2.328,48.8619],[2.3279,48.8619],[2.3275,48.8619],[2.3271,48.8621],[2.3269,48.8625],[2.3268,48.8628],[2.3265,48.8629],[2.326,48.8629],[2.3259,48.8629],[2.3255,48.863],[2.325,48.863],[2.325,48.863],[2.3245,48.863],[2.3241,48.8631],[2.3239,48.8635],[2.3237,48.8638],[2.3235,48.8639],[2.323,48.864],[2.3226,48.8645],[2.3228,48.8648],[2.3228,48.8651],[2.3232,48.8652],[2.3235,48.8653],[2.3236,48.8654],[2.3236,48.8655],[2.3237,48.8657],[2.3237,48.8662],[2.3243,48.8664],[2.3245,48.8664],[2.3246,48.8664],[2.3252,48.8665],[2.3248,48.8668],[2.3245,48.8672],[2.3243,48.8673],[2.3239,48.8675],[2.3236,48.8676],[2.3235,48.8677],[2.3231,48.8681],[2.3229,48.8681],[2.3225,48.8682],[2.3221,48.8678],[2.3218,48.8678],[2.3215,48.8677],[2.3214,48.8676],[2.3205,48.8675],[2.3205,48.8675],[2.3204,48.8675],[2.3199,48.8675],[2.3196,48.8673],[2.3195,48.8673],[2.3191,48.8672],[2.3189,48.8671],[2.3185,48.8669],[2.3182,48.8668],[2.3176,48.8665],[2.3177,48.8662],[2.3178,48.8659],[2.3184,48.8655],[2.3175,48.8654],[2.3175,48.8654],[2.3174,48.8654],[2.3167,48.8652],[2.3165,48.8652],[2.3161,48.8651],[2.3159,48.8651],[2.3155,48.865],[2.3151,48.8649],[2.3148,48.8648],[2.3145,48.8647],[2.3142,48.8648],[2.3135,48.8646],[2.3135,48.8646],[2.3134,48.8645],[2.3133,48.8645],[2.3134,48.8644],[2.3131,48.8639],[2.3131,48.8635],[2.3129,48.863],[2.3125,48.8628],[2.3122,48.8628],[2.3117,48.8627],[2.3115,48.8627],[2.3112,48.8627],[2.3106,48.8626],[2.3105,48.8626],[2.3104,48.8625],[2.3103,48.8625],[2.3103,48.8623],[2.3105,48.8621],[2.3108,48.8618],[2.311,48.8615],[2.3112,48.8612],[2.3115,48.8608],[2.3115,48.8614],[2.3123,48.8613],[2.3125,48.8614],[2.3127,48.8613],[2.3132,48.8612],[2.3132,48.8607],[2.3134,48.8605],[2.3133,48.8603],[2.3134,48.8595],[2.3134,48.8595],[2.3134,48.8594],[2.3134,48.8585],[2.3134,48.8585],[2.3135,48.8585],[2.3135,48.8585],[2.3135,48.8585],[2.3143,48.8583],[2.3143,48.8576],[2.3144,48.8575],[2.3144,48.8574],[2.3145,48.8566],[2.3145,48.8565],[2.3154,48.8566],[2.3155,48.8565],[2.3155,48.8565],[2.3156,48.8565],[2.3156,48.8564],[2.3155,48.8559],[2.3153,48.8556],[2.3154,48.8555],[2.3154,48.8554],[2.3155,48.8554],[2.3155,48.8555],[2.3163,48.8553],[2.3165,48.8554],[2.3167,48.8552],[2.3172,48.8552],[2.3172,48.8548],[2.3173,48.8545],[2.3173,48.8543],[2.3174,48.8536],[2.3173,48.8535],[2.3174,48.8534],[2.3175,48.8525],[2.3175,48.8525],[2.3175,48.8525],[2.3175,48.8524],[2.3175,48.8525],[2.3175,48.8525],[2.3175,48.8525],[2.3176,48.8533],[2.3182,48.8532],[2.3185,48.8533],[2.3188,48.8532],[2.3191,48.8531],[2.3192,48.8528],[2.3193,48.8525],[2.3192,48.8522],[2.3194,48.8516],[2.3185,48.8515],[2.3185,48.8515],[2.3185,48.8515],[2.3184,48.8515],[2.3184,48.8515],[2.3185,48.8514],[2.3185,48.8514],[2.3192,48.8512],[2.3195,48.851],[2.3195,48.8514],[2.3197,48.8515],[2.3196,48.8516],[2.3197,48.8523],[2.3196,48.8525],[2.3196,48.8526],[2.3197,48.8533],[2.3197,48.8535],[2.32,48.854],[2.3205,48.8542],[2.3209,48.854],[2.321,48.854],[2.321,48.8539],[2.3213,48.8535],[2.3214,48.8534],[2.3215,48.8533],[2.3216,48.8533],[2.3224,48.8534],[2.3225,48.8534],[2.3227,48.8532],[2.3231,48.8531],[2.3232,48.8528],[2.3233,48.8525],[2.3232,48.8523],[2.3234,48.8516],[2.3229,48.8515],[2.3234,48.8514],[2.3235,48.8511],[2.3237,48.8512],[2.3242,48.8515],[2.3244,48.8516],[2.3245,48.8516],[2.3246,48.8516],[2.3252,48.8515],[2.3254,48.8514],[2.3255,48.8514],[2.3257,48.8513],[2.326,48.851],[2.3265,48.8508],[2.3268,48.8508],[2.3271,48.8509],[2.3275,48.8508],[2.3278,48.8508],[2.3281,48.8508],[2.3285,48.8508],[2.3289,48.8509],[2.329,48.851],[2.3295,48.8511],[2.3299,48.8511],[2.3302,48.8512],[2.3305,48.8512],[2.3307,48.8513],[2.3311,48.8515],[2.3314,48.8516],[2.3315,48.8516],[2.3316,48.8516],[2.3322,48.8518],[2.3325,48.8518],[2.3328,48.8518],[2.3331,48.8519],[2.3335,48.8519],[2.3339,48.852],[2.3342,48.8522],[2.3345,48.8524],[2.3347,48.8523],[2.3351,48.8521],[2.3355,48.8518],[2.3359,48.8519],[2.3361,48.8519],[2.3365,48.8519],[2.3367,48.8517],[2.3374,48.8515],[2.3375,48.8515],[2.3375,48.8515],[2.3375,48.8515],[2.3375,48.8515],[2.338,48.8519],[2.3385,48.8523],[2.3386,48.8523],[2.3389,48.8525],[2.3393,48.8527],[2.3395,48.8528],[2.3398,48.8532],[2.3401,48.8535],[2.3398,48.8539],[2.3396,48.8543],[2.3395,48.8545],[2.3403,48.8547],[2.3405,48.8547],[2.3407,48.8547],[2.3411,48.8548],[2.3415,48.8548],[2.3419,48.8549],[2.342,48.855],[2.3425,48.8551],[2.3429,48.855],[2.3431,48.8551],[2.3435,48.8547],[2.3435,48.8554],[2.3435,48.8555],[2.3435,48.8555],[2.3436,48.8564],[2.3436,48.8565],[2.3436,48.8566],[2.3435,48.8566],[2.343,48.8569],[2.3429,48.8569],[2.3429,48.857],[2.3427,48.8575],[2.3428,48.8578],[2.3428,48.8581],[2.3429,48.8585],[2.3429,48.8589],[2.3429,48.859],[2.343,48.8595],[2.3429,48.8599],[2.3425,48.8603],[2.3423,48.8603],[2.342,48.8605],[2.3418,48.8608],[2.3417,48.8613],[2.3416,48.8615],[2.3415,48.8616],[2.3415,48.8617],[2.3411,48.8621],[2.3409,48.8625],[2.3407,48.8627],[2.3405,48.863],[2.3403,48.8633],[2.3401,48.8635],[2.3398,48.8638],[2.3395,48.8639],[2.3391,48.8641],[2.3389,48.8645],[2.3388,48.8648],[2.3385,48.8651],[2.3383,48.8653],[2.3383,48.8655],[2.3382,48.8657],[2.3383,48.8663],[2.3382,48.8665],[2.3379,48.8669],[2.3379,48.8671],[2.3377,48.8675],[2.3376,48.8676],[2.3375,48.8684],[2.3375,48.8685],[2.3375,48.8685],[2.3375,48.8685],[2.3373,48.8686],[2.3369,48.8689],[2.3365,48.8692],[2.3363,48.8693],[2.3358,48.8695],[2.3356,48.8696],[2.3355,48.8697]]]]},\\\"properties\\\":{\\\"name\\\":\\\"p1500\\\",\\\"range\\\":1500,\\\"id\\\":\\\"1.5 min\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[2.3295,48.8595]},\\\"properties\\\":{\\\"id\\\":\\\"start\\\",\\\"ppfill\\\":\\\"#FF00FF66\\\",\\\"color\\\":\\\"red\\\",\\\"radius\\\":11,\\\"lwidth\\\":\\\"5\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[2.3325,48.8709,0]},\\\"properties\\\":{\\\"id\\\":\\\"end\\\",\\\"ppfill\\\":\\\"lightgreen\\\",\\\"color\\\":\\\"teal\\\",\\\"radius\\\":10,\\\"lwidth\\\":\\\"5\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"LineString\\\",\\\"coordinates\\\":[[2.3297,48.8595,0],[2.3296,48.8597,0],[2.3303,48.8606,0],[2.33,48.861,0],[2.3336,48.8658,0],[2.3342,48.8664,0],[2.3329,48.8693,0],[2.3325,48.8709,0]]},\\\"properties\\\":{\\\"id\\\":\\\"trajet Quai Voltaire to Pl. de l'Opéra\\\",\\\"color\\\":\\\"maroon\\\",\\\"ldash\\\":\\\"[4,2]\\\"}}]} ; return riGeoJson(params, api); }\",\"data\":[{\"name\":\"0.5 min\"},{\"name\":\"1 min\"},{\"name\":\"1.5 min\"},{\"name\":\"start\"},{\"name\":\"end\"},{\"name\":\"trajet Quai Voltaire to Pl. de l'Opéra\"}],\"colorBy\":\"data\",\"ppfill\":null,\"nid\":\"id\",\"coordinateSystem\":\"leaflet\"},{\"type\":\"custom\",\"id\":\"bycicle\",\"zlevel\":11,\"renderItem\":\"(params, api) => {\\n        cc = api.coord([api.value(0), api.value(1)]);\\n        return {\\n          type: 'path',\\n          shape: {\\n            pathData: 'M4 4.5a.5.5 0 0 1 .5-.5H6a.5.5 0 0 1 0 1v.5h4.14l.386-1.158A.5.5 0 0 1 11 4h1a.5.5 0 0 1 0 1h-.64l-.311.935.807 1.29a3 3 0 1 1-.848.53l-.508-.812-2.076 3.322A.5.5 0 0 1 8 10.5H5.959a3 3 0 1 1-1.815-3.274L5 5.856V5h-.5a.5.5 0 0 1-.5-.5zm1.5 2.443-.508.814c.5.444.85 1.054.967 1.743h1.139L5.5 6.943zM8 9.057 9.598 6.5H6.402L8 9.057zM4.937 9.5a1.997 1.997 0 0 0-.487-.877l-.548.877h1.035zM3.603 8.092A2 2 0 1 0 4.937 10.5H3a.5.5 0 0 1-.424-.765l1.027-1.643zm7.947.53a2 2 0 1 0 .848-.53l1.026 1.643a.5.5 0 1 1-.848.53L11.55 8.623z',\\n          },\\n          x: cc[0], y: cc[1],\\n          originX: 17, originY: 17,\\n          scaleX: 2, scaleY : 2  // 3 = orig.XY 12\\n        }\\n      }\",\"data\":[[2.329466,48.859475]],\"coordinateSystem\":\"leaflet\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.0.renderItem\",\"opts.series.1.renderItem\"],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize command — ec.init","title":"Initialize command — ec.init","text":"Required build chart. cases command necessary.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize command — ec.init","text":"","code":"ec.init(   df = NULL,   preset = TRUE,   ctype = \"scatter\",   ...,   series.param = NULL,   tl.series = NULL,   width = NULL,   height = NULL )"},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize command — ec.init","text":"df Optional data.frame preset dataset, default NULL  default first column X values, second column Y, third Z 3D. Best practice grouping column placed last. Grouping column used axis. Timeline requires grouped data.frame build options. grouping multiple columns, first one used determine settings. preset Boolean (default TRUE). Build preset attributes like dataset, series, xAxis, yAxis, etc. preset FALSE, attributes need set explicitly. ctype Chart type, default 'scatter'. set series.param instead. ... Optional widget attributes. See Details. series.param Additional attributes single preset series, default NULL. Defines single series non-timeline timeline charts. Multiple series defined directly series=list(list(type=...),list(type=...)) added ec.upd. tl.series Deprecated, use timeline series.param instead. width, height Optional valid CSS unit (like '100%', '500px', 'auto') number, coerced string 'px' appended.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize command — ec.init","text":"widget plot, save expand features.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize command — ec.init","text":"Command ec.init creates widget createWidget, adds ECharts features . Numerical indexes series,visualMap,etc. R-counted (1,2...) Presets:  data.frame df present, dataset preset.  df grouped ctype NULL, datasets legend series also preset.  Plugin '3D' (load='3D') required GL series like scatterGL, linesGL, etc.  Plugins 'leaflet' 'world' preset center mean coordinates df.  Users can delete overwrite presets needed. Widget attributes:  Optional echarty widget attributes include: elementId - Id widget, default NULL(auto-generated) load - name(s) plugin(s) load. character vector comma-delimited string. default NULL. ask - prompt user downloading plugins load present, FALSE default js - single string vector JavaScript expressions evaluate. single: exposed chart object (common) vector:      see demo code ec.examples     First expression evaluated initialization, exposed object window      Second evaluated exposed object opts.      Third evaluated exposed chart object opts set. renderer - 'canvas'(default) 'svg' locale - 'EN'(default) 'ZH'. Use predefined custom like . useDirtyRect - enable dirty rectangle rendering , FALSE default, see Built-plugins: leaflet - Leaflet maps customizable tiles, see source world - world map country boundaries, see source lottie - support lotties ecStat - statistical tools, seeecharts-stat custom - renderers ecr.band ecr.ebars  Plugins one-time installation: 3D - support 3D charts WebGL acceleration, see source docs      plugin auto-loaded 3D/GL axes/series detected. liquid - liquid fill, see source gmodular - graph modularity, see source wordcloud - cloud words, see source  install third-party plugins. Crosstalk: Parameter df type SharedData, see info. Optional parameter xtKey: unique ID column name data frame df. Must key parameter used SharedData$new(). missing, new column XkeyX appended df. Enabling crosstalk also generate additional dataset called Xtalk bind first series . Timeline: Defined series.param options series timeline list actual control. grouped df required, group providing data one option serie. Timeline data options preset chart. option title can include current timeline item adding placeholder '%@' title$text. See example . Another preset encode(x=1,y=2,z=3), first 3 columns df. Parameter z ignored 2D. See Details . Optional attribute groupBy, df column name, can create series groups inside timeline option. Options/timeline hierarchical charts like graph,tree,treemap,sankey built directly, see example. Encode  series attribute define columns use axes, depending chart type coordinate system: set x y coordinateSystem cartesian2d set lng lat coordinateSystem geo scatter series set value name coordinateSystem geo map series set radius angle coordinateSystem polar set value itemName pie chart Example: encode(x='col3', y='col1') binds xAxis df column 'col3'.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize command — ec.init","text":"","code":"# basic scatter chart from a data.frame, using presets cars |> ec.init()  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}   # grouping, tooltips, formatting iris |> dplyr::group_by(Species) |>  ec.init(        # init with presets   tooltip= list(show= TRUE),   series.param= list(      symbolSize= ec.clmn('Petal.Width', scale=7),     tooltip= list(formatter= ec.clmn('Petal.Width: %@', 'Petal.Width'))   ) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"tooltip\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\"],\"source\":[[5.1,3.5,1.4,0.2,\"setosa\"],[4.9,3,1.4,0.2,\"setosa\"],[4.7,3.2,1.3,0.2,\"setosa\"],[4.6,3.1,1.5,0.2,\"setosa\"],[5,3.6,1.4,0.2,\"setosa\"],[5.4,3.9,1.7,0.4,\"setosa\"],[4.6,3.4,1.4,0.3,\"setosa\"],[5,3.4,1.5,0.2,\"setosa\"],[4.4,2.9,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.1,\"setosa\"],[5.4,3.7,1.5,0.2,\"setosa\"],[4.8,3.4,1.6,0.2,\"setosa\"],[4.8,3,1.4,0.1,\"setosa\"],[4.3,3,1.1,0.1,\"setosa\"],[5.8,4,1.2,0.2,\"setosa\"],[5.7,4.4,1.5,0.4,\"setosa\"],[5.4,3.9,1.3,0.4,\"setosa\"],[5.1,3.5,1.4,0.3,\"setosa\"],[5.7,3.8,1.7,0.3,\"setosa\"],[5.1,3.8,1.5,0.3,\"setosa\"],[5.4,3.4,1.7,0.2,\"setosa\"],[5.1,3.7,1.5,0.4,\"setosa\"],[4.6,3.6,1,0.2,\"setosa\"],[5.1,3.3,1.7,0.5,\"setosa\"],[4.8,3.4,1.9,0.2,\"setosa\"],[5,3,1.6,0.2,\"setosa\"],[5,3.4,1.6,0.4,\"setosa\"],[5.2,3.5,1.5,0.2,\"setosa\"],[5.2,3.4,1.4,0.2,\"setosa\"],[4.7,3.2,1.6,0.2,\"setosa\"],[4.8,3.1,1.6,0.2,\"setosa\"],[5.4,3.4,1.5,0.4,\"setosa\"],[5.2,4.1,1.5,0.1,\"setosa\"],[5.5,4.2,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.2,\"setosa\"],[5,3.2,1.2,0.2,\"setosa\"],[5.5,3.5,1.3,0.2,\"setosa\"],[4.9,3.6,1.4,0.1,\"setosa\"],[4.4,3,1.3,0.2,\"setosa\"],[5.1,3.4,1.5,0.2,\"setosa\"],[5,3.5,1.3,0.3,\"setosa\"],[4.5,2.3,1.3,0.3,\"setosa\"],[4.4,3.2,1.3,0.2,\"setosa\"],[5,3.5,1.6,0.6,\"setosa\"],[5.1,3.8,1.9,0.4,\"setosa\"],[4.8,3,1.4,0.3,\"setosa\"],[5.1,3.8,1.6,0.2,\"setosa\"],[4.6,3.2,1.4,0.2,\"setosa\"],[5.3,3.7,1.5,0.2,\"setosa\"],[5,3.3,1.4,0.2,\"setosa\"],[7,3.2,4.7,1.4,\"versicolor\"],[6.4,3.2,4.5,1.5,\"versicolor\"],[6.9,3.1,4.9,1.5,\"versicolor\"],[5.5,2.3,4,1.3,\"versicolor\"],[6.5,2.8,4.6,1.5,\"versicolor\"],[5.7,2.8,4.5,1.3,\"versicolor\"],[6.3,3.3,4.7,1.6,\"versicolor\"],[4.9,2.4,3.3,1,\"versicolor\"],[6.6,2.9,4.6,1.3,\"versicolor\"],[5.2,2.7,3.9,1.4,\"versicolor\"],[5,2,3.5,1,\"versicolor\"],[5.9,3,4.2,1.5,\"versicolor\"],[6,2.2,4,1,\"versicolor\"],[6.1,2.9,4.7,1.4,\"versicolor\"],[5.6,2.9,3.6,1.3,\"versicolor\"],[6.7,3.1,4.4,1.4,\"versicolor\"],[5.6,3,4.5,1.5,\"versicolor\"],[5.8,2.7,4.1,1,\"versicolor\"],[6.2,2.2,4.5,1.5,\"versicolor\"],[5.6,2.5,3.9,1.1,\"versicolor\"],[5.9,3.2,4.8,1.8,\"versicolor\"],[6.1,2.8,4,1.3,\"versicolor\"],[6.3,2.5,4.9,1.5,\"versicolor\"],[6.1,2.8,4.7,1.2,\"versicolor\"],[6.4,2.9,4.3,1.3,\"versicolor\"],[6.6,3,4.4,1.4,\"versicolor\"],[6.8,2.8,4.8,1.4,\"versicolor\"],[6.7,3,5,1.7,\"versicolor\"],[6,2.9,4.5,1.5,\"versicolor\"],[5.7,2.6,3.5,1,\"versicolor\"],[5.5,2.4,3.8,1.1,\"versicolor\"],[5.5,2.4,3.7,1,\"versicolor\"],[5.8,2.7,3.9,1.2,\"versicolor\"],[6,2.7,5.1,1.6,\"versicolor\"],[5.4,3,4.5,1.5,\"versicolor\"],[6,3.4,4.5,1.6,\"versicolor\"],[6.7,3.1,4.7,1.5,\"versicolor\"],[6.3,2.3,4.4,1.3,\"versicolor\"],[5.6,3,4.1,1.3,\"versicolor\"],[5.5,2.5,4,1.3,\"versicolor\"],[5.5,2.6,4.4,1.2,\"versicolor\"],[6.1,3,4.6,1.4,\"versicolor\"],[5.8,2.6,4,1.2,\"versicolor\"],[5,2.3,3.3,1,\"versicolor\"],[5.6,2.7,4.2,1.3,\"versicolor\"],[5.7,3,4.2,1.2,\"versicolor\"],[5.7,2.9,4.2,1.3,\"versicolor\"],[6.2,2.9,4.3,1.3,\"versicolor\"],[5.1,2.5,3,1.1,\"versicolor\"],[5.7,2.8,4.1,1.3,\"versicolor\"],[6.3,3.3,6,2.5,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[7.1,3,5.9,2.1,\"virginica\"],[6.3,2.9,5.6,1.8,\"virginica\"],[6.5,3,5.8,2.2,\"virginica\"],[7.6,3,6.6,2.1,\"virginica\"],[4.9,2.5,4.5,1.7,\"virginica\"],[7.3,2.9,6.3,1.8,\"virginica\"],[6.7,2.5,5.8,1.8,\"virginica\"],[7.2,3.6,6.1,2.5,\"virginica\"],[6.5,3.2,5.1,2,\"virginica\"],[6.4,2.7,5.3,1.9,\"virginica\"],[6.8,3,5.5,2.1,\"virginica\"],[5.7,2.5,5,2,\"virginica\"],[5.8,2.8,5.1,2.4,\"virginica\"],[6.4,3.2,5.3,2.3,\"virginica\"],[6.5,3,5.5,1.8,\"virginica\"],[7.7,3.8,6.7,2.2,\"virginica\"],[7.7,2.6,6.9,2.3,\"virginica\"],[6,2.2,5,1.5,\"virginica\"],[6.9,3.2,5.7,2.3,\"virginica\"],[5.6,2.8,4.9,2,\"virginica\"],[7.7,2.8,6.7,2,\"virginica\"],[6.3,2.7,4.9,1.8,\"virginica\"],[6.7,3.3,5.7,2.1,\"virginica\"],[7.2,3.2,6,1.8,\"virginica\"],[6.2,2.8,4.8,1.8,\"virginica\"],[6.1,3,4.9,1.8,\"virginica\"],[6.4,2.8,5.6,2.1,\"virginica\"],[7.2,3,5.8,1.6,\"virginica\"],[7.4,2.8,6.1,1.9,\"virginica\"],[7.9,3.8,6.4,2,\"virginica\"],[6.4,2.8,5.6,2.2,\"virginica\"],[6.3,2.8,5.1,1.5,\"virginica\"],[6.1,2.6,5.6,1.4,\"virginica\"],[7.7,3,6.1,2.3,\"virginica\"],[6.3,3.4,5.6,2.4,\"virginica\"],[6.4,3.1,5.5,1.8,\"virginica\"],[6,3,4.8,1.8,\"virginica\"],[6.9,3.1,5.4,2.1,\"virginica\"],[6.7,3.1,5.6,2.4,\"virginica\"],[6.9,3.1,5.1,2.3,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[6.8,3.2,5.9,2.3,\"virginica\"],[6.7,3.3,5.7,2.5,\"virginica\"],[6.7,3,5.2,2.3,\"virginica\"],[6.3,2.5,5,1.9,\"virginica\"],[6.5,3,5.2,2,\"virginica\"],[6.2,3.4,5.4,2.3,\"virginica\"],[5.9,3,5.1,1.8,\"virginica\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"setosa\"}},\"id\":\"setosa\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"versicolor\"}},\"id\":\"versicolor\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"virginica\"}},\"id\":\"virginica\"}],\"series\":[{\"type\":\"scatter\",\"datasetIndex\":1,\"name\":\"setosa\",\"symbolSize\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 7 );c= sprintf(`%@`, vv); return c; }\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`Petal.Width: %@`, vv); return c; }\"}},{\"type\":\"scatter\",\"datasetIndex\":2,\"name\":\"versicolor\",\"symbolSize\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 7 );c= sprintf(`%@`, vv); return c; }\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`Petal.Width: %@`, vv); return c; }\"}},{\"type\":\"scatter\",\"datasetIndex\":3,\"name\":\"virginica\",\"symbolSize\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 7 );c= sprintf(`%@`, vv); return c; }\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`Petal.Width: %@`, vv); return c; }\"}}],\"legend\":{\"data\":[{\"name\":\"setosa\"},{\"name\":\"versicolor\"},{\"name\":\"virginica\"}]},\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Length\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Width\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.0.symbolSize\",\"opts.series.0.tooltip.formatter\",\"opts.series.1.symbolSize\",\"opts.series.1.tooltip.formatter\",\"opts.series.2.symbolSize\",\"opts.series.2.tooltip.formatter\"],\"jsHooks\":[]} data.frame(n=1:5) |> dplyr::group_by(n) |> ec.init(   title= list(text= \"gauge #%@\"),   timeline= list(show=TRUE, autoPlay=TRUE),   series.param= list(type='gauge', max=5) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"text\":\"gauge #%@\"},\"timeline\":{\"show\":true,\"autoPlay\":true,\"data\":[\"1\",\"2\",\"3\",\"4\",\"5\"],\"axisType\":\"category\"},\"dataset\":[{\"dimensions\":\"n\",\"source\":[[1],[2],[3],[4],[5]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":1}},\"id\":1},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":2}},\"id\":2},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":3}},\"id\":3},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":5}},\"id\":5}],\"legend\":{\"data\":[{\"name\":\"1\"},{\"name\":\"2\"},{\"name\":\"3\"},{\"name\":\"4\"},{\"name\":\"5\"}]},\"options\":[{\"series\":[{\"datasetIndex\":1,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #1\"}},{\"series\":[{\"datasetIndex\":2,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #2\"}},{\"series\":[{\"datasetIndex\":3,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #3\"}},{\"series\":[{\"datasetIndex\":4,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #4\"}},{\"series\":[{\"datasetIndex\":5,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #5\"}}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Chart to JSON — ec.inspect","title":"Chart to JSON — ec.inspect","text":"Convert chart JSON string","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chart to JSON — ec.inspect","text":"","code":"ec.inspect(wt, target = \"opts\", ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chart to JSON — ec.inspect","text":"wt echarty widget returned ec.init target type resulting value:    'opts' - htmlwidget options JSON (default)   'full' - entire htmlwidget JSON   'data' - info chart's embedded data (char vector) ... Additional attributes pass toJSON 'file' - optional file name save target='full'","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chart to JSON — ec.inspect","text":"JSON string, except target 'data' - character vector.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chart to JSON — ec.inspect","text":"Must invoked chained last command. target='full' export JavaScript custom code, ready used import. See also ec.fromJson.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chart to JSON — ec.inspect","text":"","code":"# extract JSON json <- cars |> ec.init() |> ec.inspect() json #> { #>   \"dataset\": [ #>     { #>       \"dimensions\": [\"speed\", \"dist\"], #>       \"source\": [ #>         [ #>           4, #>           2 #>         ], #>         [ #>           4, #>           10 #>         ], #>         [ #>           7, #>           4 #>         ], #>         [ #>           7, #>           22 #>         ], #>         [ #>           8, #>           16 #>         ], #>         [ #>           9, #>           10 #>         ], #>         [ #>           10, #>           18 #>         ], #>         [ #>           10, #>           26 #>         ], #>         [ #>           10, #>           34 #>         ], #>         [ #>           11, #>           17 #>         ], #>         [ #>           11, #>           28 #>         ], #>         [ #>           12, #>           14 #>         ], #>         [ #>           12, #>           20 #>         ], #>         [ #>           12, #>           24 #>         ], #>         [ #>           12, #>           28 #>         ], #>         [ #>           13, #>           26 #>         ], #>         [ #>           13, #>           34 #>         ], #>         [ #>           13, #>           34 #>         ], #>         [ #>           13, #>           46 #>         ], #>         [ #>           14, #>           26 #>         ], #>         [ #>           14, #>           36 #>         ], #>         [ #>           14, #>           60 #>         ], #>         [ #>           14, #>           80 #>         ], #>         [ #>           15, #>           20 #>         ], #>         [ #>           15, #>           26 #>         ], #>         [ #>           15, #>           54 #>         ], #>         [ #>           16, #>           32 #>         ], #>         [ #>           16, #>           40 #>         ], #>         [ #>           17, #>           32 #>         ], #>         [ #>           17, #>           40 #>         ], #>         [ #>           17, #>           50 #>         ], #>         [ #>           18, #>           42 #>         ], #>         [ #>           18, #>           56 #>         ], #>         [ #>           18, #>           76 #>         ], #>         [ #>           18, #>           84 #>         ], #>         [ #>           19, #>           36 #>         ], #>         [ #>           19, #>           46 #>         ], #>         [ #>           19, #>           68 #>         ], #>         [ #>           20, #>           32 #>         ], #>         [ #>           20, #>           48 #>         ], #>         [ #>           20, #>           52 #>         ], #>         [ #>           20, #>           56 #>         ], #>         [ #>           20, #>           64 #>         ], #>         [ #>           22, #>           66 #>         ], #>         [ #>           23, #>           54 #>         ], #>         [ #>           24, #>           70 #>         ], #>         [ #>           24, #>           92 #>         ], #>         [ #>           24, #>           93 #>         ], #>         [ #>           24, #>           120 #>         ], #>         [ #>           25, #>           85 #>         ] #>       ] #>     } #>   ], #>   \"xAxis\": { #>     \"show\": true, #>     \"type\": \"value\", #>     \"name\": \"speed\" #>   }, #>   \"yAxis\": { #>     \"show\": true, #>     \"type\": \"value\", #>     \"name\": \"dist\" #>   }, #>   \"series\": [ #>     { #>       \"type\": \"scatter\" #>     } #>   ] #> }   # get from JSON and modify plot ec.fromJson(json) |> ec.theme('macarons')  {\"x\":{\"theme\":\"macarons\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Axis — ec.paxis","title":"Parallel Axis — ec.paxis","text":"Build 'parallelAxis' parallel chart","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Axis — ec.paxis","text":"","code":"ec.paxis(dfwt = NULL, cols = NULL, minmax = TRUE, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel Axis — ec.paxis","text":"dfwt echarty widget data.frame(regular grouped) cols string vector columns names desired order minmax Boolean add max/min limits , default TRUE ... Additional attributes parallelAxis.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel Axis — ec.paxis","text":"list, see format parallelAxis.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel Axis — ec.paxis","text":"function chained ec.init used data.frame","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Axis — ec.paxis","text":"","code":"iris |> dplyr::group_by(Species) |>    # chained ec.init(ctype= 'parallel', series.param= list(lineStyle= list(width=3))) |>  ec.paxis(cols= c('Petal.Length','Petal.Width','Sepal.Width'))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\"],\"source\":[[5.1,3.5,1.4,0.2,\"setosa\"],[4.9,3,1.4,0.2,\"setosa\"],[4.7,3.2,1.3,0.2,\"setosa\"],[4.6,3.1,1.5,0.2,\"setosa\"],[5,3.6,1.4,0.2,\"setosa\"],[5.4,3.9,1.7,0.4,\"setosa\"],[4.6,3.4,1.4,0.3,\"setosa\"],[5,3.4,1.5,0.2,\"setosa\"],[4.4,2.9,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.1,\"setosa\"],[5.4,3.7,1.5,0.2,\"setosa\"],[4.8,3.4,1.6,0.2,\"setosa\"],[4.8,3,1.4,0.1,\"setosa\"],[4.3,3,1.1,0.1,\"setosa\"],[5.8,4,1.2,0.2,\"setosa\"],[5.7,4.4,1.5,0.4,\"setosa\"],[5.4,3.9,1.3,0.4,\"setosa\"],[5.1,3.5,1.4,0.3,\"setosa\"],[5.7,3.8,1.7,0.3,\"setosa\"],[5.1,3.8,1.5,0.3,\"setosa\"],[5.4,3.4,1.7,0.2,\"setosa\"],[5.1,3.7,1.5,0.4,\"setosa\"],[4.6,3.6,1,0.2,\"setosa\"],[5.1,3.3,1.7,0.5,\"setosa\"],[4.8,3.4,1.9,0.2,\"setosa\"],[5,3,1.6,0.2,\"setosa\"],[5,3.4,1.6,0.4,\"setosa\"],[5.2,3.5,1.5,0.2,\"setosa\"],[5.2,3.4,1.4,0.2,\"setosa\"],[4.7,3.2,1.6,0.2,\"setosa\"],[4.8,3.1,1.6,0.2,\"setosa\"],[5.4,3.4,1.5,0.4,\"setosa\"],[5.2,4.1,1.5,0.1,\"setosa\"],[5.5,4.2,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.2,\"setosa\"],[5,3.2,1.2,0.2,\"setosa\"],[5.5,3.5,1.3,0.2,\"setosa\"],[4.9,3.6,1.4,0.1,\"setosa\"],[4.4,3,1.3,0.2,\"setosa\"],[5.1,3.4,1.5,0.2,\"setosa\"],[5,3.5,1.3,0.3,\"setosa\"],[4.5,2.3,1.3,0.3,\"setosa\"],[4.4,3.2,1.3,0.2,\"setosa\"],[5,3.5,1.6,0.6,\"setosa\"],[5.1,3.8,1.9,0.4,\"setosa\"],[4.8,3,1.4,0.3,\"setosa\"],[5.1,3.8,1.6,0.2,\"setosa\"],[4.6,3.2,1.4,0.2,\"setosa\"],[5.3,3.7,1.5,0.2,\"setosa\"],[5,3.3,1.4,0.2,\"setosa\"],[7,3.2,4.7,1.4,\"versicolor\"],[6.4,3.2,4.5,1.5,\"versicolor\"],[6.9,3.1,4.9,1.5,\"versicolor\"],[5.5,2.3,4,1.3,\"versicolor\"],[6.5,2.8,4.6,1.5,\"versicolor\"],[5.7,2.8,4.5,1.3,\"versicolor\"],[6.3,3.3,4.7,1.6,\"versicolor\"],[4.9,2.4,3.3,1,\"versicolor\"],[6.6,2.9,4.6,1.3,\"versicolor\"],[5.2,2.7,3.9,1.4,\"versicolor\"],[5,2,3.5,1,\"versicolor\"],[5.9,3,4.2,1.5,\"versicolor\"],[6,2.2,4,1,\"versicolor\"],[6.1,2.9,4.7,1.4,\"versicolor\"],[5.6,2.9,3.6,1.3,\"versicolor\"],[6.7,3.1,4.4,1.4,\"versicolor\"],[5.6,3,4.5,1.5,\"versicolor\"],[5.8,2.7,4.1,1,\"versicolor\"],[6.2,2.2,4.5,1.5,\"versicolor\"],[5.6,2.5,3.9,1.1,\"versicolor\"],[5.9,3.2,4.8,1.8,\"versicolor\"],[6.1,2.8,4,1.3,\"versicolor\"],[6.3,2.5,4.9,1.5,\"versicolor\"],[6.1,2.8,4.7,1.2,\"versicolor\"],[6.4,2.9,4.3,1.3,\"versicolor\"],[6.6,3,4.4,1.4,\"versicolor\"],[6.8,2.8,4.8,1.4,\"versicolor\"],[6.7,3,5,1.7,\"versicolor\"],[6,2.9,4.5,1.5,\"versicolor\"],[5.7,2.6,3.5,1,\"versicolor\"],[5.5,2.4,3.8,1.1,\"versicolor\"],[5.5,2.4,3.7,1,\"versicolor\"],[5.8,2.7,3.9,1.2,\"versicolor\"],[6,2.7,5.1,1.6,\"versicolor\"],[5.4,3,4.5,1.5,\"versicolor\"],[6,3.4,4.5,1.6,\"versicolor\"],[6.7,3.1,4.7,1.5,\"versicolor\"],[6.3,2.3,4.4,1.3,\"versicolor\"],[5.6,3,4.1,1.3,\"versicolor\"],[5.5,2.5,4,1.3,\"versicolor\"],[5.5,2.6,4.4,1.2,\"versicolor\"],[6.1,3,4.6,1.4,\"versicolor\"],[5.8,2.6,4,1.2,\"versicolor\"],[5,2.3,3.3,1,\"versicolor\"],[5.6,2.7,4.2,1.3,\"versicolor\"],[5.7,3,4.2,1.2,\"versicolor\"],[5.7,2.9,4.2,1.3,\"versicolor\"],[6.2,2.9,4.3,1.3,\"versicolor\"],[5.1,2.5,3,1.1,\"versicolor\"],[5.7,2.8,4.1,1.3,\"versicolor\"],[6.3,3.3,6,2.5,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[7.1,3,5.9,2.1,\"virginica\"],[6.3,2.9,5.6,1.8,\"virginica\"],[6.5,3,5.8,2.2,\"virginica\"],[7.6,3,6.6,2.1,\"virginica\"],[4.9,2.5,4.5,1.7,\"virginica\"],[7.3,2.9,6.3,1.8,\"virginica\"],[6.7,2.5,5.8,1.8,\"virginica\"],[7.2,3.6,6.1,2.5,\"virginica\"],[6.5,3.2,5.1,2,\"virginica\"],[6.4,2.7,5.3,1.9,\"virginica\"],[6.8,3,5.5,2.1,\"virginica\"],[5.7,2.5,5,2,\"virginica\"],[5.8,2.8,5.1,2.4,\"virginica\"],[6.4,3.2,5.3,2.3,\"virginica\"],[6.5,3,5.5,1.8,\"virginica\"],[7.7,3.8,6.7,2.2,\"virginica\"],[7.7,2.6,6.9,2.3,\"virginica\"],[6,2.2,5,1.5,\"virginica\"],[6.9,3.2,5.7,2.3,\"virginica\"],[5.6,2.8,4.9,2,\"virginica\"],[7.7,2.8,6.7,2,\"virginica\"],[6.3,2.7,4.9,1.8,\"virginica\"],[6.7,3.3,5.7,2.1,\"virginica\"],[7.2,3.2,6,1.8,\"virginica\"],[6.2,2.8,4.8,1.8,\"virginica\"],[6.1,3,4.9,1.8,\"virginica\"],[6.4,2.8,5.6,2.1,\"virginica\"],[7.2,3,5.8,1.6,\"virginica\"],[7.4,2.8,6.1,1.9,\"virginica\"],[7.9,3.8,6.4,2,\"virginica\"],[6.4,2.8,5.6,2.2,\"virginica\"],[6.3,2.8,5.1,1.5,\"virginica\"],[6.1,2.6,5.6,1.4,\"virginica\"],[7.7,3,6.1,2.3,\"virginica\"],[6.3,3.4,5.6,2.4,\"virginica\"],[6.4,3.1,5.5,1.8,\"virginica\"],[6,3,4.8,1.8,\"virginica\"],[6.9,3.1,5.4,2.1,\"virginica\"],[6.7,3.1,5.6,2.4,\"virginica\"],[6.9,3.1,5.1,2.3,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[6.8,3.2,5.9,2.3,\"virginica\"],[6.7,3.3,5.7,2.5,\"virginica\"],[6.7,3,5.2,2.3,\"virginica\"],[6.3,2.5,5,1.9,\"virginica\"],[6.5,3,5.2,2,\"virginica\"],[6.2,3.4,5.4,2.3,\"virginica\"],[5.9,3,5.1,1.8,\"virginica\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"setosa\"}},\"id\":\"setosa\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"versicolor\"}},\"id\":\"versicolor\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"virginica\"}},\"id\":\"virginica\"}],\"series\":[{\"type\":\"parallel\",\"datasetIndex\":1,\"name\":\"setosa\",\"lineStyle\":{\"width\":3}},{\"type\":\"parallel\",\"datasetIndex\":2,\"name\":\"versicolor\",\"lineStyle\":{\"width\":3}},{\"type\":\"parallel\",\"datasetIndex\":3,\"name\":\"virginica\",\"lineStyle\":{\"width\":3}}],\"legend\":{\"data\":[{\"name\":\"setosa\"},{\"name\":\"versicolor\"},{\"name\":\"virginica\"}]},\"parallelAxis\":[{\"dim\":2,\"name\":\"Petal.Length\",\"max\":6.9,\"min\":1},{\"dim\":3,\"name\":\"Petal.Width\",\"max\":2.5,\"min\":0.1},{\"dim\":1,\"name\":\"Sepal.Width\",\"max\":4.4,\"min\":2}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} mtcars |> ec.init(ctype= 'parallel',     parallelAxis= ec.paxis(mtcars, cols= c('gear','cyl','hp','carb'), nameRotate= 45),    series.param= list(smooth= TRUE) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"parallelAxis\":[{\"dim\":9,\"name\":\"gear\",\"nameRotate\":45,\"max\":5,\"min\":3},{\"dim\":1,\"name\":\"cyl\",\"nameRotate\":45,\"max\":8,\"min\":4},{\"dim\":3,\"name\":\"hp\",\"nameRotate\":45,\"max\":335,\"min\":52},{\"dim\":10,\"name\":\"carb\",\"nameRotate\":45,\"max\":8,\"min\":1}],\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]}],\"series\":[{\"type\":\"parallel\",\"smooth\":true}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Javascript plugin from URL source — ec.plugjs","title":"Install Javascript plugin from URL source — ec.plugjs","text":"Install Javascript plugin URL source","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Javascript plugin from URL source — ec.plugjs","text":"","code":"ec.plugjs(wt = NULL, source = NULL, ask = FALSE)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Javascript plugin from URL source — ec.plugjs","text":"wt widget add dependency , see createWidget source URL file:// Javascript plugin,  file name suffix '.js'. Default NULL. ask Boolean, ask user download source missing. Default FALSE.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Javascript plugin from URL source — ec.plugjs","text":"widget JS dependency added successful, otherwise input wt","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install Javascript plugin from URL source — ec.plugjs","text":"source URL, plugin file installed optional popup prompt. source file name (file://xxx.js), assumed installed dependency added. Called internally ec.init. recommended use ec.init(load=...) instead ec.plugjs.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Javascript plugin from URL source — ec.plugjs","text":"","code":"# import map plugin and display two (lon,lat) locations if (interactive()) {   ec.init(preset= FALSE,           geo = list(map= 'china-contour', roam= TRUE),           series = list(list(             type= 'scatter', coordinateSystem= 'geo',             symbolSize= 9, itemStyle= list(color= 'red'),             data= list(list(value= c(113, 40)), list(value= c(118, 39))) ))   ) |>    ec.plugjs( paste0('https://raw.githubusercontent.com/apache/echarts/',                     'master/test/data/map/js/china-contour.js') ) }"},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Themes — ec.theme","title":"Themes — ec.theme","text":"Apply pre-built custom coded theme chart","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Themes — ec.theme","text":"","code":"ec.theme(wt, name = \"custom\", code = NULL)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Themes — ec.theme","text":"wt Required echarty widget returned ec.init name Name existing theme file (without extension), name custom theme defined code. code Custom theme JSON formatted string, default NULL.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Themes — ec.theme","text":"echarty widget.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Themes — ec.theme","text":"Just built-themes included folder inst/themes. names dark, gray, jazz, dark-mushroom macarons. entire ECharts theme collection found files copied needed. create custom themes view predefined ones, visit site.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Themes — ec.theme","text":"","code":"mtcars |> ec.init() |> ec.theme('dark-mushroom')  {\"x\":{\"theme\":\"dark-mushroom\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"mpg\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"cyl\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}cars |> ec.init() |> ec.theme('mine', code=   '{\"color\": [\"green\",\"#eeaa33\"],      \"backgroundColor\": \"lemonchiffon\"}')  {\"x\":{\"theme\":\"mine\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null},\"themeCode\":\"{\\\"color\\\": [\\\"green\\\",\\\"#eeaa33\\\"], \\n    \\\"backgroundColor\\\": \\\"lemonchiffon\\\"}\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":null,"dir":"Reference","previous_headings":"","what":"Update option lists — ec.upd","title":"Update option lists — ec.upd","text":"Chain commands ec.init add update chart items","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update option lists — ec.upd","text":"","code":"ec.upd(wt, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update option lists — ec.upd","text":"wt echarty widget ... R commands add/update chart option lists","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update option lists — ec.upd","text":"ec.upd makes changes chart already set ec.init. always piped(chained) ec.init. numerical indexes series,visualMap,etc. JS-counted starting 0.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update option lists — ec.upd","text":"","code":"library(dplyr) df <- data.frame(x= 1:30, y= runif(30, 5, 10), cat= sample(LETTERS[1:3],size=30,replace=TRUE)) |>       mutate(lwr= y-runif(30, 1, 3), upr= y+runif(30, 2, 4)) band.df <- df  |> group_by(cat) |> group_split()  df |> group_by(cat) |>  ec.init(load='custom', ctype='line',          xAxis=list(data=c(0,unique(df$x)), boundaryGap=FALSE) ) |>  ec.upd({   for(ii in 1:length(band.df))   # add bands to their respective groups     series <- append(series,          ecr.band(band.df[[ii]], 'lwr', 'upr', type='stack', smooth=FALSE,          name= unique(band.df[[ii]]$cat), areaStyle= list(color=c('blue','green','yellow')[ii])) ) }) #> Error in eval(substitute(expr), e): object 'band.df' not found"},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions — ec.util","title":"Utility functions — ec.util","text":"tabset, table layout, support GIS shapefiles library 'sf'","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions — ec.util","text":"","code":"ec.util(..., cmd = \"sf.series\", js = NULL, event = \"click\")"},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions — ec.util","text":"... Optional parameters command  sf.series - see points, polylines, polygons(itemStyle). tabset parameters format name1=chart1, name2=chart2, see example cmd utility command, see Details js optional JavaScript function, default NULL. event optional event name cmd='morph'.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions — ec.util","text":"cmd = 'sf.series' Build leaflet geo map series shapefiles. Supported types: POINT, MULTIPOINT, LINESTRING, MULTILINESTRING, POLYGON, MULTIPOLYGON  Coordinate system leaflet(default), geo cartesian3D (POINT(xyz)) Limitations:     polygons can name tooltip,       assumes Geodetic CRS WGS 84, conversion use st_transform crs=4326. Parameters:   df - value st_read   nid - optional column name name-id used tooltips   cs - optional coordinateSystem value, default 'leaflet'   verbose - optional, print shapefile item names console Returns list chart seriescmd = 'sf.bbox' Returns JavaScript code position map inside bounding box st_bbox, leaflet .cmd = 'sf.unzip' Unzips remote file returns local file name unzipped .shp file   url - URL remote zipped shapefile   shp - optional name .shp file inside ZIP file multiple exist. add file extension. cmd = 'geojson'  Custom series list geoJson objects   geojson - object fromJSON   cs - optional coordinateSystem value, default 'leaflet'   ppfill - optional fill color like '#F00', NULL -fill, Points Polygons   nid - optional feature property item name used tooltips   ... - optional custom series attributes like itemStyle Can display also geoJson feature properties: color; lwidth, ldash (lines); ppfill, radius (points)cmd = 'layout'  Multiple charts table-like rows/columns format   ... - List charts   title - optional title set, rows= Number rows, cols= Number columns Returns container div rmarkdown, otherwise browsable. 3-4 charts one use multiple series within grid.  greater number charts ec.util(cmd='layout') comes handycmd = 'tabset'    ... - list name/chart pairs like n1=chart1, n2=chart2, tab may contain chart.   tabStyle - tab style string, see default tabStyle variable code Returns ) tagList tabs pipe without '...' params, see example Returns B) browsable '...' params provided usercmd = 'button'  UI button execute JS function,   text - button label   js - JS function string   ... - optional parameters rect element Returns graphic.elements-rect element.cmd = 'morph'    ... - list charts chart option lists   event - name event switching charts. Default click. Returns chart ability morph chartscmd = 'fullscreen'  toolbox feature toggle fullscreen /. Works browser, RStudio.cmd = 'rescale'    v - input vector numeric values rescale   t - target range c(min,max), numeric vector twocmd = 'level'  Calculate vertical levels timeline line charts, returns numeric vector   df - data.frame columns   - name '' column   - name '' column","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions — ec.util","text":"{\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"grid\":{\"top\":20},\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}","code":"if (interactive()) {  # comm.out: Fedora errors about some 'browser'   library(sf)   fname <- system.file(\"shape/nc.shp\", package=\"sf\")   nc <- as.data.frame(st_read(fname))   ec.init(load= c('leaflet', 'custom'),  # load custom for polygons      js= ec.util(cmd= 'sf.bbox', bbox= st_bbox(nc$geometry)),      series= ec.util(cmd= 'sf.series', df= nc, nid= 'NAME', itemStyle= list(opacity=0.3)),      tooltip= list(formatter= '{a}')   )    htmltools::browsable(     lapply(iris |> dplyr::group_by(Species) |> dplyr::group_split(),             function(x) {      x |> ec.init(ctype= 'scatter', title= list(text= unique(x$Species)))            }) |>      ec.util(cmd= 'tabset')   ) }  cars |> ec.init(  graphic = list(    ec.util(cmd='button', text='see type', right='center', top=20,      js=\"function(a) {op=ec_option(echwid); alert(op.series[0].type);}\")  ) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"graphic\":[{\"type\":\"rect\",\"zlevel\":4,\"shape\":{\"height\":20,\"width\":80,\"r\":5},\"style\":{\"fill\":\"lightgray\"},\"textContent\":{\"zlevel\":4,\"style\":{\"text\":\"see type\",\"fill\":\"black\"}},\"textConfig\":{\"position\":\"inside\"},\"onclick\":\"function(a) {op=ec_option(echwid); alert(op.series[0].type);}\",\"text\":\"see type\",\"right\":\"center\",\"top\":20}],\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.graphic.0.onclick\"],\"jsHooks\":[]} p1 <- cars |> ec.init(grid= list(top=20), height=333)  # move chart up p2 <- mtcars |> ec.init(height=333) ec.util(cmd= 'tabset', cars= p1, mtcars= p2)  /*\tCSS for the main interaction */ .tabset > input[type='radio'] {  position: absolute;  left: -200vw; } .tabset .tab-panel {\tdisplay: none; } .tabset > input:first-child:checked ~ .tab-panels > .tab-panel:first-child, .tabset > input:nth-child(3):checked ~ .tab-panels > .tab-panel:nth-child(2), .tabset > input:nth-child(5):checked ~ .tab-panels > .tab-panel:nth-child(3), .tabset > input:nth-child(7):checked ~ .tab-panels > .tab-panel:nth-child(4), .tabset > input:nth-child(9):checked ~ .tab-panels > .tab-panel:nth-child(5), .tabset > input:nth-child(11):checked ~ .tab-panels > .tab-panel:nth-child(6) { display: block; } /*\tStyling */ body {  font: 16px/1.5em 'Overpass', 'Open Sans', Helvetica, sans-serif;  color: #333; font-weight: 300; } .tabset > label {  position: relative;  display: inline-block;  padding: 15px 15px 25px;  border: 1px solid transparent;  border-bottom: 0;  cursor: pointer;  font-weight: 600; } .tabset > label::after {  content: '';  position: absolute;  left: 15px;  bottom: 10px;  width: 22px;  height: 4px;  background: #8d8d8d; } .tabset > label:hover, .tabset > input:focus + label { color: #06c; } .tabset > label:hover::after, .tabset > input:focus + label::after, .tabset > input:checked + label::after { background: #06c;} .tabset > input:checked + label {  border-color: #ccc;  border-bottom: 1px solid #fff;  margin-bottom: -1px; } .tab-panel {  padding: 10px 0;  border-top: 1px solid #ccc; } body { padding: 10px; } .tabset { max-width: 65em; }    cars   mtcars           {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"grid\":{\"top\":20},\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}            {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"mpg\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"cyl\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} function trsz(i) { var ecs= document.getElementsByClassName('echarty');          ecs[i].htmlwidget_data_init_result.resize(); } lapply(list('dark','macarons','gray','jazz','dark-mushroom'),        function(x) cars |> ec.init() |> ec.theme(x) ) |>   ec.util(cmd='layout', cols= 2, title= 'my layout')         my layout                         {\"x\":{\"theme\":\"dark\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}                   {\"x\":{\"theme\":\"macarons\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}                         {\"x\":{\"theme\":\"gray\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}                   {\"x\":{\"theme\":\"jazz\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}                         {\"x\":{\"theme\":\"dark-mushroom\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}            setd <- function(type) {   mtcars |> dplyr::group_by(cyl) |>    ec.init(ctype= type,       title= list(subtext= 'click points to morph'),       xAxis= list(scale= TRUE)) } oscatter <- setd('scatter') obar <- setd('bar') ec.util(cmd='morph', oscatter, obar)  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"subtext\":\"click points to morph\"},\"xAxis\":{\"scale\":true,\"type\":\"value\",\"name\":\"mpg\"},\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"type\":\"scatter\",\"datasetIndex\":1,\"name\":\"4\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}},{\"type\":\"scatter\",\"datasetIndex\":2,\"name\":\"6\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}},{\"type\":\"scatter\",\"datasetIndex\":3,\"name\":\"8\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"disp\"},\"morph\":[{\"title\":{\"subtext\":\"click points to morph\"},\"xAxis\":{\"scale\":true,\"type\":\"value\",\"name\":\"mpg\"},\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"type\":\"scatter\",\"datasetIndex\":1,\"name\":\"4\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}},{\"type\":\"scatter\",\"datasetIndex\":2,\"name\":\"6\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}},{\"type\":\"scatter\",\"datasetIndex\":3,\"name\":\"8\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"disp\"}},{\"title\":{\"subtext\":\"click points to morph\"},\"xAxis\":{\"scale\":true,\"type\":\"value\",\"name\":\"mpg\"},\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"type\":\"bar\",\"datasetIndex\":1,\"name\":\"4\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}},{\"type\":\"bar\",\"datasetIndex\":2,\"name\":\"6\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}},{\"type\":\"bar\",\"datasetIndex\":3,\"name\":\"8\",\"encode\":{\"x\":0,\"y\":2},\"universalTransition\":{\"enabled\":true}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"disp\"}}]},\"on\":[{\"event\":\"click\",\"handler\":\"function(event) {\\n        opt= this.getOption();\\n        keep= opt.morph;\\n        for(i=0; i<keep.length; i++) {\\n    \\t    if (opt.series[0].type==keep[i].series[0].type) {\\n    \\t      next= (i+1) % keep.length;\\n       \\t\\t  optcurr= Object.assign({}, keep[next]);\\n       \\t\\t  break;\\n    \\t    }\\n    \\t  };\\n    \\t  if (!optcurr) return;\\n    \\t  optcurr.morph= keep;\\n    \\t  this.setOption(optcurr, true);\\n      }\"}]},\"evals\":[\"on.0.handler\"],\"jsHooks\":[]}"},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":null,"dir":"Reference","previous_headings":"","what":"Area band — ecr.band","title":"Area band — ecr.band","text":"'custom' serie lower upper boundaries","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area band — ecr.band","text":"","code":"ecr.band(df = NULL, lower = NULL, upper = NULL, type = \"polygon\", ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area band — ecr.band","text":"df data.frame lower upper numerical columns first column X coordinates. lower column name band's lower boundary (string). upper column name band's upper boundary (string). type Type rendering 'polygon' - drawing polygon polyline upper/lower points (default) 'stack' - two stacked lines ... attributes serie","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area band — ecr.band","text":"list one serie type='polygon', list two series type='stack'","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Area band — ecr.band","text":"type='polygon': coordinates two boundaries chained one polygon.     xAxis type 'category' 'value'.     Set fill color attribute color. type='stack': two stacked lines drawn, lower customizable areaStyle.     xAxis type 'category' !      Set fill color attribute areaStyle$color.     Optional tooltip formatter available band[[1]]$tipFmt. Optional parameter name, given, show legend. Legend merges series name one item.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area band — ecr.band","text":"","code":"set.seed(222) df <- data.frame( x = 1:10, y = round(runif(10, 5, 10),2)) |>   dplyr::mutate(lwr= round(y-runif(10, 1, 3),2), upr= round(y+runif(10, 2, 4),2) ) banda <- ecr.band(df, 'lwr', 'upr', type='stack', name='stak', areaStyle= list(color='green')) #banda <- ecr.band(df, 'lwr', 'upr', type='polygon', name='poly1')  df |> ec.init( load='custom', # polygon only   legend= list(show= TRUE),   xAxis= list(type='category', boundaryGap=FALSE), # stack   #xAxis= list(scale=T, min='dataMin'),            # polygon    series= append(     list(list(type='line', color='blue', name='line1')),     banda   ),   tooltip= list(trigger='axis', formatter= banda[[1]]$tipFmt) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"legend\":{\"show\":true},\"xAxis\":{\"type\":\"category\",\"boundaryGap\":false,\"name\":\"x\"},\"series\":[{\"type\":\"line\",\"color\":\"blue\",\"name\":\"line1\"},{\"type\":\"line\",\"name\":\"stak\",\"stack\":\"stak\",\"showSymbol\":false,\"lineStyle\":{\"width\":0},\"data\":[[1,7.86],[2,4.18],[3,6.28],[4,2.59],[5,6.7],[6,8.68],[7,4.43],[8,6],[9,6.64],[10,4.29]],\"tipFmt\":\"(ss) => { lo=''; hi=''; lin='';\\nss.map(o => { nn = o.dimensionNames[1]; vv= o.value[1];\\nif (nn==='.s.lo') lo= vv; \\nelse if (nn==='.s.hi') hi= vv;\\nelse lin= '<br>line <b>'+vv+'<\\/b>'; });\\nstr='high <b>'+(lo+hi)+'<\\/b>'+lin+'<br>low <b>'+lo+'<\\/b>'; return str;}\",\"dimensions\":[\"x\",\".s.lo\"]},{\"type\":\"line\",\"name\":\"stak\",\"areaStyle\":{\"color\":\"green\"},\"stack\":\"stak\",\"showSymbol\":false,\"lineStyle\":{\"width\":0},\"data\":[[1,5.509999999999999,13.37],[2,3.67,7.85],[3,3.409999999999999,9.69],[4,5.43,8.02],[5,5.37,12.07],[6,5.030000000000001,13.71],[7,5.780000000000001,10.21],[8,4.039999999999999,10.04],[9,4.070000000000001,10.71],[10,5.239999999999999,9.529999999999999]],\"dimensions\":[\"x\",\".s.hi\",\".s.tip\"]}],\"tooltip\":{\"trigger\":\"axis\",\"formatter\":\"(ss) => { lo=''; hi=''; lin='';\\nss.map(o => { nn = o.dimensionNames[1]; vv= o.value[1];\\nif (nn==='.s.lo') lo= vv; \\nelse if (nn==='.s.hi') hi= vv;\\nelse lin= '<br>line <b>'+vv+'<\\/b>'; });\\nstr='high <b>'+(lo+hi)+'<\\/b>'+lin+'<br>low <b>'+lo+'<\\/b>'; return str;}\"},\"dataset\":[{\"dimensions\":[\"x\",\"y\",\"lwr\",\"upr\"],\"source\":[[1,9.66,7.86,13.37],[2,5.33,4.18,7.85],[3,7.5,6.28,9.69],[4,5,2.59,8.02],[5,9.58,6.7,12.07],[6,9.789999999999999,8.68,13.71],[7,6.76,4.43,10.21],[8,7.1,6,10.04],[9,7.87,6.64,10.71],[10,5.72,4.29,9.529999999999999]]}],\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"y\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.1.tipFmt\",\"opts.tooltip.formatter\"],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":null,"dir":"Reference","previous_headings":"","what":"Error bars — ecr.ebars","title":"Error bars — ecr.ebars","text":"Custom series display error-bars scatter, bar line series","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error bars — ecr.ebars","text":"","code":"ecr.ebars(wt, encode = list(x = 1, y = c(2, 3, 4)), hwidth = 6, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error bars — ecr.ebars","text":"wt echarty widget add error bars , see ec.init. encode Column selection axes (x & y) vectors, see encode hwidth Half-width error bar pixels, default 6. ... parameters custom serie","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error bars — ecr.ebars","text":"widget error bars added successful, otherwise input widget","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Error bars — ecr.ebars","text":"Command called ec.init main series set.ecr.ebars custom series, ec.init(load='custom') required.  Horizontal vertical layouts supported, just switch encode values x y series ecr.ebars. default tooltip format showing value, high & low. Grouped bar series supported. Non-grouped series shown formatter riErrBarSimple instead ecr.ebars. limited vertical , see example . limitations:     manually add axis type='category' needed     error bars name data grouped     legend select/deselect re-position grouped error bars","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error bars — ecr.ebars","text":"","code":"library(dplyr) df <- mtcars |> group_by(cyl,gear) |> summarise(avg.mpg= round(mean(mpg),2)) |>   mutate(low = round(avg.mpg-cyl*runif(1),2),           high= round(avg.mpg+cyl*runif(1),2)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument. ec.init(df, load= 'custom', ctype= 'bar',       xAxis= list(type='category'), tooltip= list(show=TRUE)) |> ecr.ebars(encode= list(y=c('avg.mpg','low','high'), x='gear'))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"xAxis\":{\"type\":\"category\",\"name\":\"gear\"},\"tooltip\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"cyl\",\"gear\",\"avg.mpg\",\"low\",\"high\"],\"source\":[[4,3,21.5,21.03,23.65],[4,4,26.92,26.45,29.07],[4,5,28.2,27.73,30.35],[6,3,19.75,15.67,22.77],[6,4,19.75,15.67,22.77],[6,5,19.7,15.62,22.72],[8,3,15.05,14.87,22.62],[8,5,15.4,15.22,22.97]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"type\":\"bar\",\"datasetIndex\":1,\"name\":\"4\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"bar\",\"datasetIndex\":2,\"name\":\"6\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"bar\",\"datasetIndex\":3,\"name\":\"8\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"custom\",\"datasetIndex\":1,\"encode\":{\"y\":[2,3,4],\"x\":1},\"renderItem\":\"riErrBars\",\"name\":\"4\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}},{\"type\":\"custom\",\"datasetIndex\":2,\"encode\":{\"y\":[2,3,4],\"x\":1},\"renderItem\":\"riErrBars\",\"name\":\"6\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}},{\"type\":\"custom\",\"datasetIndex\":3,\"encode\":{\"y\":[2,3,4],\"x\":1},\"renderItem\":\"riErrBars\",\"name\":\"8\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"avg.mpg\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.3.renderItem\",\"opts.series.3.tooltip.formatter\",\"opts.series.4.renderItem\",\"opts.series.4.tooltip.formatter\",\"opts.series.5.renderItem\",\"opts.series.5.tooltip.formatter\"],\"jsHooks\":[]}#ecr.ebars(encode= list(y=c(3,4,5), x=2))  # ok: data indexes  # same but horizontal ec.init(df, load= 'custom',   yAxis= list(type='category'), tooltip= list(show=TRUE),   series.param= list(type='bar', encode= list(x='avg.mpg', y='gear') )) |> ecr.ebars(encode= list(x=c('avg.mpg','low','high'), y='gear'))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"yAxis\":{\"type\":\"category\",\"name\":\"gear\"},\"tooltip\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"cyl\",\"gear\",\"avg.mpg\",\"low\",\"high\"],\"source\":[[4,3,21.5,21.03,23.65],[4,4,26.92,26.45,29.07],[4,5,28.2,27.73,30.35],[6,3,19.75,15.67,22.77],[6,4,19.75,15.67,22.77],[6,5,19.7,15.62,22.72],[8,3,15.05,14.87,22.62],[8,5,15.4,15.22,22.97]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"datasetIndex\":1,\"name\":\"4\",\"type\":\"bar\",\"encode\":{\"x\":\"avg.mpg\",\"y\":\"gear\"}},{\"datasetIndex\":2,\"name\":\"6\",\"type\":\"bar\",\"encode\":{\"x\":\"avg.mpg\",\"y\":\"gear\"}},{\"datasetIndex\":3,\"name\":\"8\",\"type\":\"bar\",\"encode\":{\"x\":\"avg.mpg\",\"y\":\"gear\"}},{\"type\":\"custom\",\"datasetIndex\":1,\"encode\":{\"x\":[2,3,4],\"y\":1},\"renderItem\":\"riErrBars\",\"name\":\"4\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}},{\"type\":\"custom\",\"datasetIndex\":2,\"encode\":{\"x\":[2,3,4],\"y\":1},\"renderItem\":\"riErrBars\",\"name\":\"6\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}},{\"type\":\"custom\",\"datasetIndex\":3,\"encode\":{\"x\":[2,3,4],\"y\":1},\"renderItem\":\"riErrBars\",\"name\":\"8\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"xAxis\":{\"show\":true,\"name\":\"avg.mpg\",\"type\":\"value\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.3.renderItem\",\"opts.series.3.tooltip.formatter\",\"opts.series.4.renderItem\",\"opts.series.4.tooltip.formatter\",\"opts.series.5.renderItem\",\"opts.series.5.tooltip.formatter\"],\"jsHooks\":[]} # ----- riErrBarSimple ------ df <- mtcars |> mutate(name= row.names(mtcars), hi= hp-drat*3, lo= hp+wt*3) |>    filter(cyl==4) |> select(name,hp,hi,lo) ec.init(df, load= 'custom', legend= list(show=TRUE)) |> ec.upd({ series <- append(series, list(   list(type= 'custom', name= 'error',     data= ec.data(df |> select(name,hi,lo)),     renderItem= htmlwidgets::JS('riErrBarSimple')   ))) }) #> Error in UseMethod(\"select\"): no applicable method for 'select' applied to an object of class \"function\""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny: Execute a proxy command — ecs.exec","title":"Shiny: Execute a proxy command — ecs.exec","text":"chart changes made, need sent back widget display","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny: Execute a proxy command — ecs.exec","text":"","code":"ecs.exec(proxy, cmd = \"p_merge\")"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny: Execute a proxy command — ecs.exec","text":"proxy ecs.proxy object cmd Name command, default p_merge proxy commands :p_update - add new series axesp_merge - modify add series features like style,marks,etc.p_replace - replace entire chart p_del_serie - delete serie index namep_del_marks - delete marks seriep_append_data - add data existing seriesp_dispatch - send action commands, see documentation","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny: Execute a proxy command — ecs.exec","text":"proxy object update chart.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny: Execute a proxy command — ecs.exec","text":"","code":"if (interactive()) {    demo(eshiny, package='echarty') }"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.output.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny: UI chart — ecs.output","title":"Shiny: UI chart — ecs.output","text":"Placeholder chart Shiny UI","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny: UI chart — ecs.output","text":"","code":"ecs.output(outputId, width = \"100%\", height = \"400px\")"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny: UI chart — ecs.output","text":"outputId Name output UI element. width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny: UI chart — ecs.output","text":"output render function enables use widget within Shiny applications.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ecs.proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny: Create a proxy — ecs.proxy","title":"Shiny: Create a proxy — ecs.proxy","text":"Create proxy existing chart Shiny UI. allows add, merge, delete elements chart without reloading .","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny: Create a proxy — ecs.proxy","text":"","code":"ecs.proxy(id)"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny: Create a proxy — ecs.proxy","text":"id Target chart id Shiny UI.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny: Create a proxy — ecs.proxy","text":"proxy object update chart.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ecs.render.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny: Plot command to render chart — ecs.render","title":"Shiny: Plot command to render chart — ecs.render","text":"initial rendering chart UI.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny: Plot command to render chart — ecs.render","text":"","code":"ecs.render(wt, env = parent.frame(), quoted = FALSE)"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny: Plot command to render chart — ecs.render","text":"wt echarty widget generate chart. env environment evaluate expr. quoted expr quoted expression? default FALSE.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny: Plot command to render chart — ecs.render","text":"output render function enables use widget within Shiny applications.","code":""},{"path":[]}]
