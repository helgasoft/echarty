[{"path":"https://helgasoft.github.io/echarty/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Larry Helgason. Maintainer.","code":""},{"path":"https://helgasoft.github.io/echarty/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Helgason L, echarts4r wicfJCl (2024). echarty: Minimal R/Shiny Interface JavaScript Library 'ECharts'. R package version 1.6.4.1, https://helgasoft.github.io/echarty/.","code":"@Manual{,   title = {echarty: Minimal R/Shiny Interface to JavaScript Library 'ECharts'},   author = {Larry Helgason and with initial code from John Coene's library echarts4r},   year = {2024},   note = {R package version 1.6.4.1},   url = {https://helgasoft.github.io/echarty/}, }"},{"path":"https://helgasoft.github.io/echarty/index.html","id":"id_-echarty","dir":"","previous_headings":"","what":"Minimal R/Shiny Interface to JavaScript Library ECharts","title":"Minimal R/Shiny Interface to JavaScript Library ECharts","text":"package thin R wrapper around Javascript library ECharts.One major command(ec.init) uses R lists support ECharts API. Benefit ECharts full functionality build interactive charts R Shiny minimal overhead. Wider connectivity deployment potential WebR crosstalk. (1) encourage users follow original ECharts API construct charts echarty. differs echarts4r uses commands chart options. Please consider granting Github star ⭐ show support.","code":""},{"path":"https://helgasoft.github.io/echarty/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Minimal R/Shiny Interface to JavaScript Library ECharts","text":"Latest development build 1.6.4.1 CRAN:","code":"if (!requireNamespace('remotes')) install.packages('remotes') remotes::install_github('helgasoft/echarty') install.packages('echarty')"},{"path":"https://helgasoft.github.io/echarty/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Minimal R/Shiny Interface to JavaScript Library ECharts","text":"","code":"library(echarty); library(dplyr)  #  scatter chart (default) cars |> ec.init()  #  parallel chart ToothGrowth |> ec.init(ctype= 'parallel')  #  3D chart with GL plugin iris |> group_by(Species) |> ec.init(load= '3D')  #  timeline of two series with grouping, formatting, autoPlay iris |> group_by(Species) |>  ec.init(   timeline= list(autoPlay= TRUE),   series.param = list(     symbolSize= ec.clmn('Petal.Width', scale= 9),     encode= list(x= 'Sepal.Width', y='Petal.Length'),     markLine= list(data= list(list(type='max'), list(type='min')))   ) )  # show a remote map chart, needs package leaflet installed echarty::ec.fromJson('https://helgasoft.github.io/echarty/test/pfull.json')"},{"path":"https://helgasoft.github.io/echarty/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Minimal R/Shiny Interface to JavaScript Library ECharts","text":"Coder good introduction, type library(echarty); demo(coder). WEBSITE vast gallery code tutorials. package code examples included. Now can start building beautiful ECharts R Shiny! Made echarty. Powered ECharts.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":null,"dir":"Reference","previous_headings":"","what":"echarty — -- Introduction --","title":"echarty — -- Introduction --","text":"echarty","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"description","dir":"Reference","previous_headings":"","what":"Description","title":"echarty — -- Introduction --","text":"echarty provides lean interface R Javascript library ECharts. encourage users follow original ECharts API documentation construct charts echarty. Main command ec.init can set multiple native ECharts options build chart. benefits - learn limited set commands, enjoy full functionality ECharts.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"package-conventions","dir":"Reference","previous_headings":"","what":"Package Conventions","title":"echarty — -- Introduction --","text":"pipe-friendly - supports %>% |> commands three prefixes help auto-completion: ec. general functions, like ec.init ecs. Shiny functions, like ecs.output ecr. rendering functions, like ecr.band","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"events","dir":"Reference","previous_headings":"","what":"Events","title":"echarty — -- Introduction --","text":"event handling Shiny see sample code eshiny.R, run demo(eshiny). Echarty three built-event callbacks - click, mouseover, mouseout. ECharts events initialized p$x$capture. Another option use p$x$JavaScript handlers, see code examples.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"widget-x-parameters","dir":"Reference","previous_headings":"","what":"Widget x parameters","title":"echarty — -- Introduction --","text":"htmlwidget ECharts initialization parameters supported echarty. code samples examples: capture = event name(s), monitor events, usually Shiny = define JavaScript code event handling, see ECharts registerMap = define map geoJSON file, see ECharts group = group-name chart, see ECharts connect = command connect charts group-name, see ECharts locale = EN(default) ZH, set locale parameter ec.init, see ECharts. renderer = canvas(default) svg, set renderer ec.init, see ECharts. jcode = custom JavaScript code execute, set js parameter ec.init","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"r-vs-javascript-numbering","dir":"Reference","previous_headings":"","what":"R vs Javascript numbering","title":"echarty — -- Introduction --","text":"R language counting starts 1. Javascript (JS) counting starts 0. ec.init supports R-counting indexes (ex. encode) dimension (ex. visualMap). ec.upd requires indexes dimensions set JS-counting.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"javascript-built-in-functions","dir":"Reference","previous_headings":"","what":"Javascript built-in functions","title":"echarty — -- Introduction --","text":"allow access charts JS. ec_chart(id) - get chart object id (former get_e_charts) ec_option(id) - get chart’s option object id (former get_e_charts_opt) Parameter ‘id’ internal variable echwid, value set ec.init parameter elementId. See demo code examples","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"code-examples","dir":"Reference","previous_headings":"","what":"Code examples","title":"echarty — -- Introduction --","text":"complete list sample code locations: website gallery demo examples Shiny code eshiny.R, run demo(eshiny) demos RPubs searchable gists answers Github issues code Github tests command examples, like ?ec.init","code":""},{"path":"https://helgasoft.github.io/echarty/reference/Introduction.html","id":"global-options","dir":"Reference","previous_headings":"","what":"Global Options","title":"echarty — -- Introduction --","text":"Options set R command options. Echarty uses following options: echarty.theme = name theme file, without extension, folder /inst/themes echarty.font = font family name echarty.urlTiles = tiles URL template leaflet maps","code":"# set/get global options options('echarty.theme'='jazz') # set getOption('echarty.theme')      # get #> [1] \"jazz\" options('echarty.theme'=NULL)   # remove"},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":null,"dir":"Reference","previous_headings":"","what":"Data column format — ec.clmn","title":"Data column format — ec.clmn","text":"Helper function display/format data column(s) index name","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data column format — ec.clmn","text":"","code":"ec.clmn(col = NULL, ..., scale = 1)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data column format — ec.clmn","text":"col single column index(number) column name(quoted string),  sprintf string template multiple columns. NULL(default) charts single values like tree, pie. 'json' display tooltip available values choose . 'log' write values JS console (F12) debugging. Can contain JS function starting 'function(' '(x) => {'. ... Comma separated column indexes names, col sprintf. allows formatting multiple columns, tooltip. scale positive number, multiplier numeric columns. scale 0, numeric values rounded.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data column format — ec.clmn","text":"JavaScript code string (usually function) marked executable, see JS.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data column format — ec.clmn","text":"function useful attributes like formatter, color, symbolSize, label. Column indexes counted R start 1. Omit col use index -1 single values tree/pie charts, axisLabel.formatter valueFormatter. See ec.data dendrogram example. Column indexes decimals combo charts multiple series, see ecr.band example. whole number part serie index, decimal part column index inside.col sprintf placeholder %@ column indexes column names.col sprintf can contain double quotes, single backquotes. Template placeholders formatting: %@ display column value -. %L@ display number locale format, like '12,345.09'. %LR@ rounded number locale format, like '12,345'. %R@ rounded number, like '12345'. %R2@ rounded number, two digits decimal point. %M@ marker series' color. trigger='axis' (multiple series) one can use decimal column indexes. See definition example .","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.clmn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data column format — ec.clmn","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union tmp <- data.frame(Species = as.vector(unique(iris$Species)),                   emoji = c('A','B','C')) df <- iris |> inner_join(tmp)      # add 6th column emoji #> Joining with `by = join_by(Species)` df |> group_by(Species) |> ec.init(   series.param= list(label= list(show= TRUE, formatter= ec.clmn('emoji'))),   tooltip= list(formatter=     # with sprintf template + multiple column indexes     ec.clmn('%M@ species <b>%@<\/b><br>s.len <b>%@<\/b><br>s.wid <b>%@<\/b>', 5,1,2)) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[4,0,1]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%M@ species <b>%@<\\/b><br>s.len <b>%@<\\/b><br>s.wid <b>%@<\\/b>`, vv); return c; }\"},\"dataset\":[{\"dimensions\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\",\"emoji\"],\"source\":[[5.1,3.5,1.4,0.2,\"setosa\",\"A\"],[4.9,3,1.4,0.2,\"setosa\",\"A\"],[4.7,3.2,1.3,0.2,\"setosa\",\"A\"],[4.6,3.1,1.5,0.2,\"setosa\",\"A\"],[5,3.6,1.4,0.2,\"setosa\",\"A\"],[5.4,3.9,1.7,0.4,\"setosa\",\"A\"],[4.6,3.4,1.4,0.3,\"setosa\",\"A\"],[5,3.4,1.5,0.2,\"setosa\",\"A\"],[4.4,2.9,1.4,0.2,\"setosa\",\"A\"],[4.9,3.1,1.5,0.1,\"setosa\",\"A\"],[5.4,3.7,1.5,0.2,\"setosa\",\"A\"],[4.8,3.4,1.6,0.2,\"setosa\",\"A\"],[4.8,3,1.4,0.1,\"setosa\",\"A\"],[4.3,3,1.1,0.1,\"setosa\",\"A\"],[5.8,4,1.2,0.2,\"setosa\",\"A\"],[5.7,4.4,1.5,0.4,\"setosa\",\"A\"],[5.4,3.9,1.3,0.4,\"setosa\",\"A\"],[5.1,3.5,1.4,0.3,\"setosa\",\"A\"],[5.7,3.8,1.7,0.3,\"setosa\",\"A\"],[5.1,3.8,1.5,0.3,\"setosa\",\"A\"],[5.4,3.4,1.7,0.2,\"setosa\",\"A\"],[5.1,3.7,1.5,0.4,\"setosa\",\"A\"],[4.6,3.6,1,0.2,\"setosa\",\"A\"],[5.1,3.3,1.7,0.5,\"setosa\",\"A\"],[4.8,3.4,1.9,0.2,\"setosa\",\"A\"],[5,3,1.6,0.2,\"setosa\",\"A\"],[5,3.4,1.6,0.4,\"setosa\",\"A\"],[5.2,3.5,1.5,0.2,\"setosa\",\"A\"],[5.2,3.4,1.4,0.2,\"setosa\",\"A\"],[4.7,3.2,1.6,0.2,\"setosa\",\"A\"],[4.8,3.1,1.6,0.2,\"setosa\",\"A\"],[5.4,3.4,1.5,0.4,\"setosa\",\"A\"],[5.2,4.1,1.5,0.1,\"setosa\",\"A\"],[5.5,4.2,1.4,0.2,\"setosa\",\"A\"],[4.9,3.1,1.5,0.2,\"setosa\",\"A\"],[5,3.2,1.2,0.2,\"setosa\",\"A\"],[5.5,3.5,1.3,0.2,\"setosa\",\"A\"],[4.9,3.6,1.4,0.1,\"setosa\",\"A\"],[4.4,3,1.3,0.2,\"setosa\",\"A\"],[5.1,3.4,1.5,0.2,\"setosa\",\"A\"],[5,3.5,1.3,0.3,\"setosa\",\"A\"],[4.5,2.3,1.3,0.3,\"setosa\",\"A\"],[4.4,3.2,1.3,0.2,\"setosa\",\"A\"],[5,3.5,1.6,0.6,\"setosa\",\"A\"],[5.1,3.8,1.9,0.4,\"setosa\",\"A\"],[4.8,3,1.4,0.3,\"setosa\",\"A\"],[5.1,3.8,1.6,0.2,\"setosa\",\"A\"],[4.6,3.2,1.4,0.2,\"setosa\",\"A\"],[5.3,3.7,1.5,0.2,\"setosa\",\"A\"],[5,3.3,1.4,0.2,\"setosa\",\"A\"],[7,3.2,4.7,1.4,\"versicolor\",\"B\"],[6.4,3.2,4.5,1.5,\"versicolor\",\"B\"],[6.9,3.1,4.9,1.5,\"versicolor\",\"B\"],[5.5,2.3,4,1.3,\"versicolor\",\"B\"],[6.5,2.8,4.6,1.5,\"versicolor\",\"B\"],[5.7,2.8,4.5,1.3,\"versicolor\",\"B\"],[6.3,3.3,4.7,1.6,\"versicolor\",\"B\"],[4.9,2.4,3.3,1,\"versicolor\",\"B\"],[6.6,2.9,4.6,1.3,\"versicolor\",\"B\"],[5.2,2.7,3.9,1.4,\"versicolor\",\"B\"],[5,2,3.5,1,\"versicolor\",\"B\"],[5.9,3,4.2,1.5,\"versicolor\",\"B\"],[6,2.2,4,1,\"versicolor\",\"B\"],[6.1,2.9,4.7,1.4,\"versicolor\",\"B\"],[5.6,2.9,3.6,1.3,\"versicolor\",\"B\"],[6.7,3.1,4.4,1.4,\"versicolor\",\"B\"],[5.6,3,4.5,1.5,\"versicolor\",\"B\"],[5.8,2.7,4.1,1,\"versicolor\",\"B\"],[6.2,2.2,4.5,1.5,\"versicolor\",\"B\"],[5.6,2.5,3.9,1.1,\"versicolor\",\"B\"],[5.9,3.2,4.8,1.8,\"versicolor\",\"B\"],[6.1,2.8,4,1.3,\"versicolor\",\"B\"],[6.3,2.5,4.9,1.5,\"versicolor\",\"B\"],[6.1,2.8,4.7,1.2,\"versicolor\",\"B\"],[6.4,2.9,4.3,1.3,\"versicolor\",\"B\"],[6.6,3,4.4,1.4,\"versicolor\",\"B\"],[6.8,2.8,4.8,1.4,\"versicolor\",\"B\"],[6.7,3,5,1.7,\"versicolor\",\"B\"],[6,2.9,4.5,1.5,\"versicolor\",\"B\"],[5.7,2.6,3.5,1,\"versicolor\",\"B\"],[5.5,2.4,3.8,1.1,\"versicolor\",\"B\"],[5.5,2.4,3.7,1,\"versicolor\",\"B\"],[5.8,2.7,3.9,1.2,\"versicolor\",\"B\"],[6,2.7,5.1,1.6,\"versicolor\",\"B\"],[5.4,3,4.5,1.5,\"versicolor\",\"B\"],[6,3.4,4.5,1.6,\"versicolor\",\"B\"],[6.7,3.1,4.7,1.5,\"versicolor\",\"B\"],[6.3,2.3,4.4,1.3,\"versicolor\",\"B\"],[5.6,3,4.1,1.3,\"versicolor\",\"B\"],[5.5,2.5,4,1.3,\"versicolor\",\"B\"],[5.5,2.6,4.4,1.2,\"versicolor\",\"B\"],[6.1,3,4.6,1.4,\"versicolor\",\"B\"],[5.8,2.6,4,1.2,\"versicolor\",\"B\"],[5,2.3,3.3,1,\"versicolor\",\"B\"],[5.6,2.7,4.2,1.3,\"versicolor\",\"B\"],[5.7,3,4.2,1.2,\"versicolor\",\"B\"],[5.7,2.9,4.2,1.3,\"versicolor\",\"B\"],[6.2,2.9,4.3,1.3,\"versicolor\",\"B\"],[5.1,2.5,3,1.1,\"versicolor\",\"B\"],[5.7,2.8,4.1,1.3,\"versicolor\",\"B\"],[6.3,3.3,6,2.5,\"virginica\",\"C\"],[5.8,2.7,5.1,1.9,\"virginica\",\"C\"],[7.1,3,5.9,2.1,\"virginica\",\"C\"],[6.3,2.9,5.6,1.8,\"virginica\",\"C\"],[6.5,3,5.8,2.2,\"virginica\",\"C\"],[7.6,3,6.6,2.1,\"virginica\",\"C\"],[4.9,2.5,4.5,1.7,\"virginica\",\"C\"],[7.3,2.9,6.3,1.8,\"virginica\",\"C\"],[6.7,2.5,5.8,1.8,\"virginica\",\"C\"],[7.2,3.6,6.1,2.5,\"virginica\",\"C\"],[6.5,3.2,5.1,2,\"virginica\",\"C\"],[6.4,2.7,5.3,1.9,\"virginica\",\"C\"],[6.8,3,5.5,2.1,\"virginica\",\"C\"],[5.7,2.5,5,2,\"virginica\",\"C\"],[5.8,2.8,5.1,2.4,\"virginica\",\"C\"],[6.4,3.2,5.3,2.3,\"virginica\",\"C\"],[6.5,3,5.5,1.8,\"virginica\",\"C\"],[7.7,3.8,6.7,2.2,\"virginica\",\"C\"],[7.7,2.6,6.9,2.3,\"virginica\",\"C\"],[6,2.2,5,1.5,\"virginica\",\"C\"],[6.9,3.2,5.7,2.3,\"virginica\",\"C\"],[5.6,2.8,4.9,2,\"virginica\",\"C\"],[7.7,2.8,6.7,2,\"virginica\",\"C\"],[6.3,2.7,4.9,1.8,\"virginica\",\"C\"],[6.7,3.3,5.7,2.1,\"virginica\",\"C\"],[7.2,3.2,6,1.8,\"virginica\",\"C\"],[6.2,2.8,4.8,1.8,\"virginica\",\"C\"],[6.1,3,4.9,1.8,\"virginica\",\"C\"],[6.4,2.8,5.6,2.1,\"virginica\",\"C\"],[7.2,3,5.8,1.6,\"virginica\",\"C\"],[7.4,2.8,6.1,1.9,\"virginica\",\"C\"],[7.9,3.8,6.4,2,\"virginica\",\"C\"],[6.4,2.8,5.6,2.2,\"virginica\",\"C\"],[6.3,2.8,5.1,1.5,\"virginica\",\"C\"],[6.1,2.6,5.6,1.4,\"virginica\",\"C\"],[7.7,3,6.1,2.3,\"virginica\",\"C\"],[6.3,3.4,5.6,2.4,\"virginica\",\"C\"],[6.4,3.1,5.5,1.8,\"virginica\",\"C\"],[6,3,4.8,1.8,\"virginica\",\"C\"],[6.9,3.1,5.4,2.1,\"virginica\",\"C\"],[6.7,3.1,5.6,2.4,\"virginica\",\"C\"],[6.9,3.1,5.1,2.3,\"virginica\",\"C\"],[5.8,2.7,5.1,1.9,\"virginica\",\"C\"],[6.8,3.2,5.9,2.3,\"virginica\",\"C\"],[6.7,3.3,5.7,2.5,\"virginica\",\"C\"],[6.7,3,5.2,2.3,\"virginica\",\"C\"],[6.3,2.5,5,1.9,\"virginica\",\"C\"],[6.5,3,5.2,2,\"virginica\",\"C\"],[6.2,3.4,5.4,2.3,\"virginica\",\"C\"],[5.9,3,5.1,1.8,\"virginica\",\"C\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"setosa\"}},\"id\":\"setosa\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"versicolor\"}},\"id\":\"versicolor\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"virginica\"}},\"id\":\"virginica\"}],\"series\":[{\"type\":\"scatter\",\"datasetIndex\":1,\"name\":\"setosa\",\"label\":{\"show\":true,\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species','emoji'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['emoji']]; else {  if (!aa || !aa.length) return `no data`;  args= [`emoji`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@`, vv); return c; }\"}},{\"type\":\"scatter\",\"datasetIndex\":2,\"name\":\"versicolor\",\"label\":{\"show\":true,\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species','emoji'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['emoji']]; else {  if (!aa || !aa.length) return `no data`;  args= [`emoji`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@`, vv); return c; }\"}},{\"type\":\"scatter\",\"datasetIndex\":3,\"name\":\"virginica\",\"label\":{\"show\":true,\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species','emoji'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['emoji']]; else {  if (!aa || !aa.length) return `no data`;  args= [`emoji`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@`, vv); return c; }\"}}],\"legend\":{\"data\":[{\"name\":\"setosa\"},{\"name\":\"versicolor\"},{\"name\":\"virginica\"}]},\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Length\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Width\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.tooltip.formatter\",\"opts.series.0.label.formatter\",\"opts.series.1.label.formatter\",\"opts.series.2.label.formatter\"],\"jsHooks\":[]} # tooltip decimal indexes work with full data sets (no missing/partial data) ChickWeight |> mutate(Chick=as.numeric(Chick)) |> filter(Chick>47) |> group_by(Chick) |> ec.init(   tooltip= list(trigger='axis',                  formatter= ec.clmn(\"48: %@<br>49: %@<br>50: %@\", 1.1, 2.1, 3.1)),   xAxis= list(type='category'), legend= list(formatter= 'Ch.{name}'),   series.param= list(type='line', encode= list(x='Time', y='weight')), )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"tooltip\":{\"trigger\":\"axis\",\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[0.1,1.1,2.1]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`48: %@<br>49: %@<br>50: %@`, vv); return c; }\"},\"xAxis\":{\"type\":\"category\",\"name\":\"Time\"},\"legend\":{\"formatter\":\"Ch.{name}\"},\"dataset\":[{\"dimensions\":[\"weight\",\"Time\",\"Chick\",\"Diet\"],\"source\":[[42,0,49,\"4\"],[49,2,49,\"4\"],[63,4,49,\"4\"],[84,6,49,\"4\"],[103,8,49,\"4\"],[126,10,49,\"4\"],[160,12,49,\"4\"],[174,14,49,\"4\"],[204,16,49,\"4\"],[234,18,49,\"4\"],[269,20,49,\"4\"],[281,21,49,\"4\"],[39,0,50,\"4\"],[50,2,50,\"4\"],[62,4,50,\"4\"],[80,6,50,\"4\"],[104,8,50,\"4\"],[125,10,50,\"4\"],[154,12,50,\"4\"],[170,14,50,\"4\"],[222,16,50,\"4\"],[261,18,50,\"4\"],[303,20,50,\"4\"],[322,21,50,\"4\"],[41,0,48,\"4\"],[54,2,48,\"4\"],[67,4,48,\"4\"],[84,6,48,\"4\"],[105,8,48,\"4\"],[122,10,48,\"4\"],[155,12,48,\"4\"],[175,14,48,\"4\"],[205,16,48,\"4\"],[234,18,48,\"4\"],[264,20,48,\"4\"],[264,21,48,\"4\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Chick\",\"=\":48}},\"id\":48},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Chick\",\"=\":49}},\"id\":49},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Chick\",\"=\":50}},\"id\":50}],\"series\":[{\"datasetIndex\":1,\"name\":\"48\",\"type\":\"line\",\"encode\":{\"x\":\"Time\",\"y\":\"weight\"}},{\"datasetIndex\":2,\"name\":\"49\",\"type\":\"line\",\"encode\":{\"x\":\"Time\",\"y\":\"weight\"}},{\"datasetIndex\":3,\"name\":\"50\",\"type\":\"line\",\"encode\":{\"x\":\"Time\",\"y\":\"weight\"}}],\"yAxis\":{\"show\":true,\"name\":\"weight\",\"type\":\"value\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.tooltip.formatter\"],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data helper — ec.data","title":"Data helper — ec.data","text":"Make data lists data.frame","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data helper — ec.data","text":"","code":"ec.data(df, format = \"dataset\", header = FALSE, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data helper — ec.data","text":"df Required chart data data.frame.  Except format dendrogram, df list, result hclust function. format Output list format dataset = list used dataset (default), series.data (without header). values = list customized series.data names = named lists useful named data like sankey links. dendrogram = build series data Hierarchical Clustering dendrogram treePC = build series data tree charts parent/children data.frame treeTT = build series data tree charts data.frame like Titanic. boxplot = build dataset source lists, see Details header dataset, include column names , default TRUE. Set FALSE series.data. ... optional parameters Optional parameters boxplot : layout = 'h' horizontal(default) 'v' vertical layout outliers boolean add outlier points (default FALSE) jitter value jitter numerical values second column, default 0 (scatter). Adds scatter series top boxplot. Optional parameter names: nasep = single character name separator nested lists, see Examples.  Purpose facilitate conversion data.frame nested named lists.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data helper — ec.data","text":"list dataset.source, series.data lists: boxplot - named list, see Details Examples  dendrogram & treePC - tree structure, see format tree data","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data helper — ec.data","text":"format='boxplot' requires first two df columns :      column non-computational categorical axis     column (numeric) data compute five boxplot values Additional grouping supported column second. Groups show legend, enabled. Returns list(dataset, series, xAxis, yAxis) set params ec.init. Make sure enough data computation, 4+ values per boxplot.format='treeTT' expects data.frame df columns pathString,value,(optional itemStyle) FromDataFrameTable. add column 'pct' value percentage node. See Details.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ec.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data helper — ec.data","text":"","code":"library(dplyr) ds <- iris |> relocate(Species) |>    ec.data(format= 'boxplot', jitter= 0.1, layout= 'v') ec.init(   dataset= ds$dataset, series= ds$series, xAxis= ds$xAxis, yAxis= ds$yAxis,   legend= list(show= TRUE), tooltip= list(show= TRUE) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"source\":[[5.1,4.9,4.7,4.6,5,5.4,4.6,5,4.4,4.9,5.4,4.8,4.8,4.3,5.8,5.7,5.4,5.1,5.7,5.1,5.4,5.1,4.6,5.1,4.8,5,5,5.2,5.2,4.7,4.8,5.4,5.2,5.5,4.9,5,5.5,4.9,4.4,5.1,5,4.5,4.4,5,5.1,4.8,5.1,4.6,5.3,5],[7,6.4,6.9,5.5,6.5,5.7,6.3,4.9,6.6,5.2,5,5.9,6,6.1,5.6,6.7,5.6,5.8,6.2,5.6,5.9,6.1,6.3,6.1,6.4,6.6,6.8,6.7,6,5.7,5.5,5.5,5.8,6,5.4,6,6.7,6.3,5.6,5.5,5.5,6.1,5.8,5,5.6,5.7,5.7,6.2,5.1,5.7],[6.3,5.8,7.1,6.3,6.5,7.6,4.9,7.3,6.7,7.2,6.5,6.4,6.8,5.7,5.8,6.4,6.5,7.7,7.7,6,6.9,5.6,7.7,6.3,6.7,7.2,6.2,6.1,6.4,7.2,7.4,7.9,6.4,6.3,6.1,7.7,6.3,6.4,6,6.9,6.7,6.9,5.8,6.8,6.7,6.7,6.3,6.5,6.2,5.9]]},{\"transform\":{\"type\":\"boxplot\",\"config\":{\"itemNameFormatter\":\"(p) => ['setosa','versicolor','virginica'][p.value]\"}}}],\"series\":[{\"type\":\"boxplot\",\"name\":\"boxplot\",\"datasetIndex\":1,\"encode\":{\"x\":null,\"y\":null,\"tooltip\":[\"Low\",\"Q1\",\"Q2\",\"Q3\",\"High\"]},\"coordinateSystem\":\"cartesian2d\"},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"v\",\"name\":\"setosa\",\"large\":true,\"z\":3,\"data\":[[0.4161500275135041,5.1],[0.5668666074518114,4.9],[0.5201521772425621,4.7],[0.431441688304767,4.6],[0.4014798882417381,5],[0.4932786994613707,5.4],[0.4995554777327925,4.6],[0.4579534489195794,5],[0.5465763974003494,4.4],[0.5545043022371828,4.9],[0.5749201321508736,5.4],[0.4349881253670901,4.8],[0.4068482665345073,4.8],[0.4640771461650729,4.3],[0.4804656476713717,5.8],[0.4391339669469744,5.7],[0.4807076234836131,5.4],[0.4127322914544493,5.1],[0.4777402626350522,5.7],[0.5951095670461655,5.1],[0.4579784590750933,5.4],[0.5356760854832828,5.1],[0.5470639197621494,4.6],[0.4391913466155529,5.1],[0.5961079349275679,4.8],[0.5483043058309705,5],[0.4102892552502453,5],[0.5060424927156418,5.2],[0.5391647757962346,5.2],[0.5377112006768584,4.7],[0.40624606506899,4.8],[0.4451125069055706,5.4],[0.4601661612279713,5.2],[0.527293122978881,5.5],[0.4958049099426717,4.9],[0.4864342516288161,5],[0.5412867675535381,5.5],[0.5897153152618557,4.9],[0.4360677536111325,4.4],[0.4433799752965569,5.1],[0.5360325835179538,5],[0.4997691221069545,4.5],[0.5283358696848154,4.4],[0.5320568698458373,5],[0.4192048316355795,5.1],[0.5531200327910483,4.8],[0.5539349608588964,5.1],[0.5981424624565989,4.6],[0.5941041805781424,5.3],[0.4778365521226078,5]],\"xAxisIndex\":1},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"v\",\"name\":\"versicolor\",\"large\":true,\"z\":3,\"data\":[[1.492237292928621,7],[1.463048350485042,6.4],[1.434935178793967,6.9],[1.506314708152786,5.5],[1.498727403208613,6.5],[1.555861725192517,5.7],[1.440835668565705,6.3],[1.542679455783218,4.9],[1.413043222343549,6.6],[1.4708413597662,5.2],[1.565039884205908,5],[1.45476364903152,5.9],[1.51400899020955,6],[1.467143816128373,6.1],[1.519252557773143,5.6],[1.438303606305271,6.7],[1.589552787551656,5.6],[1.508496081735939,5.8],[1.508920678682625,6.2],[1.455719430791214,5.6],[1.489340493828058,5.9],[1.474302236875519,6.1],[1.405612194864079,6.3],[1.493197438167408,6.1],[1.478006277466193,6.4],[1.404013043548912,6.6],[1.475394185539335,6.8],[1.511982567980886,6.7],[1.571416717208922,6],[1.476961942203343,5.7],[1.505583407124504,5.5],[1.520127504738048,5.5],[1.452274271659553,5.8],[1.458010032307357,6],[1.496015034802258,5.4],[1.584001109236851,6],[1.48014403693378,6.7],[1.44263454223983,6.3],[1.534353363141417,5.6],[1.411722822207957,5.5],[1.599413827061653,5.5],[1.429807093460113,6.1],[1.503711327118799,5.8],[1.569224010920152,5],[1.543653944833204,5.6],[1.44826280400157,5.7],[1.509408673690632,5.7],[1.566960363043472,6.2],[1.405591205088422,5.1],[1.493876859964803,5.7]],\"xAxisIndex\":1},{\"type\":\"scatter\",\"jitter\":0.1,\"layout\":\"v\",\"name\":\"virginica\",\"large\":true,\"z\":3,\"data\":[[2.561136006144807,6.3],[2.562810262013227,5.8],[2.480782200396061,7.1],[2.44368620174937,6.3],[2.483672280469909,6.5],[2.533774149557575,7.6],[2.501530056400225,4.9],[2.532071861298755,7.3],[2.502358262753114,6.7],[2.567110487399623,7.2],[2.541756232269108,6.5],[2.574841188173741,6.4],[2.402295907586813,6.8],[2.577649913588539,5.7],[2.599269383773207,5.8],[2.50003830017522,6.4],[2.47179340487346,6.5],[2.554982604458928,7.7],[2.516895050182939,7.7],[2.526795274205506,6],[2.571733230957761,6.9],[2.513378867739811,5.6],[2.450599403865636,7.7],[2.583760642912239,6.3],[2.573470040969551,6.7],[2.44970773938112,7.2],[2.480576242366806,6.2],[2.55392603520304,6.1],[2.423897074908018,6.4],[2.438938992330804,7.2],[2.4329138496425,7.4],[2.532641316251829,7.9],[2.571315000904724,6.4],[2.585309289675206,6.3],[2.510475518926978,6.1],[2.515413138875738,7.7],[2.537489549117163,6.3],[2.448943645926192,6.4],[2.408923431672156,6],[2.581970911333337,6.9],[2.414136243844405,6.7],[2.599378294683993,6.9],[2.522370483493432,5.8],[2.434511769143865,6.8],[2.581888193031773,6.7],[2.407490233378485,6.7],[2.518710758071393,6.3],[2.447395510971546,6.5],[2.581259453343228,6.2],[2.563774596806616,5.9]],\"xAxisIndex\":1}],\"xAxis\":[{\"type\":\"category\",\"name\":\"Species\",\"axisLabel\":{\"formatter\":\"function(v) { return v;}\"}},{\"max\":3,\"show\":false}],\"yAxis\":[{\"scale\":true,\"name\":\"Sepal.Length\"}],\"legend\":{\"show\":true},\"tooltip\":{\"show\":true}}},\"evals\":[\"opts.dataset.1.transform.config.itemNameFormatter\",\"opts.xAxis.0.axisLabel.formatter\"],\"jsHooks\":[]} hc <- hclust(dist(USArrests), \"complete\") ec.init(preset= FALSE,   series= list(list(     type= 'tree', orient= 'TB', roam= TRUE, initialTreeDepth= -1,     data= ec.data(hc, format='dendrogram'),     layout= 'radial', # symbolSize= ec.clmn(scale= 0.33),     ## exclude added labels like 'pXX', leaving only the originals     label= list(formatter= htmlwidgets::JS(       \"function(n) { out= /p\\\\d+/.test(n.name) ? '' : n.name; return out;}\"))   )) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"type\":\"tree\",\"orient\":\"TB\",\"roam\":true,\"initialTreeDepth\":-1,\"data\":[{\"name\":\"p49\",\"value\":1,\"children\":[{\"name\":\"p47\",\"value\":293.62,\"children\":[{\"name\":\"p39\",\"value\":102.86,\"children\":[{\"name\":\"Florida\",\"value\":38.53},{\"name\":\"North Carolina\",\"value\":38.53}]},{\"name\":\"p44\",\"value\":102.86,\"children\":[{\"name\":\"p41\",\"value\":64.98999999999999,\"children\":[{\"name\":\"p23\",\"value\":48.73,\"children\":[{\"name\":\"Delaware\",\"value\":16.98},{\"name\":\"p20\",\"value\":16.98,\"children\":[{\"name\":\"Alabama\",\"value\":15.45},{\"name\":\"Louisiana\",\"value\":15.45}]}]},{\"name\":\"p32\",\"value\":48.73,\"children\":[{\"name\":\"Alaska\",\"value\":28.64},{\"name\":\"p27\",\"value\":28.64,\"children\":[{\"name\":\"Mississippi\",\"value\":21.17},{\"name\":\"South Carolina\",\"value\":21.17}]}]}]},{\"name\":\"p42\",\"value\":64.98999999999999,\"children\":[{\"name\":\"p22\",\"value\":53.59,\"children\":[{\"name\":\"Maryland\",\"value\":15.89},{\"name\":\"p17\",\"value\":15.89,\"children\":[{\"name\":\"Arizona\",\"value\":13.9},{\"name\":\"New Mexico\",\"value\":13.9}]}]},{\"name\":\"p36\",\"value\":53.59,\"children\":[{\"name\":\"California\",\"value\":32.72},{\"name\":\"p28\",\"value\":32.72,\"children\":[{\"name\":\"p4\",\"value\":22.37,\"children\":[{\"name\":\"Illinois\",\"value\":6.24},{\"name\":\"New York\",\"value\":6.24}]},{\"name\":\"p15\",\"value\":22.37,\"children\":[{\"name\":\"Michigan\",\"value\":13.3},{\"name\":\"Nevada\",\"value\":13.3}]}]}]}]}]}]},{\"name\":\"p48\",\"value\":293.62,\"children\":[{\"name\":\"p45\",\"value\":168.61,\"children\":[{\"name\":\"p37\",\"value\":68.76000000000001,\"children\":[{\"name\":\"p30\",\"value\":36.73,\"children\":[{\"name\":\"Missouri\",\"value\":24.89},{\"name\":\"p12\",\"value\":24.89,\"children\":[{\"name\":\"Arkansas\",\"value\":12.61},{\"name\":\"Tennessee\",\"value\":12.61}]}]},{\"name\":\"p31\",\"value\":36.73,\"children\":[{\"name\":\"Georgia\",\"value\":25.09},{\"name\":\"p18\",\"value\":25.09,\"children\":[{\"name\":\"Colorado\",\"value\":14.5},{\"name\":\"Texas\",\"value\":14.5}]}]}]},{\"name\":\"p38\",\"value\":68.76000000000001,\"children\":[{\"name\":\"Rhode Island\",\"value\":36.85},{\"name\":\"p33\",\"value\":36.85,\"children\":[{\"name\":\"p21\",\"value\":29.25,\"children\":[{\"name\":\"Wyoming\",\"value\":15.63},{\"name\":\"p11\",\"value\":15.63,\"children\":[{\"name\":\"Oregon\",\"value\":12.42},{\"name\":\"p6\",\"value\":12.42,\"children\":[{\"name\":\"Oklahoma\",\"value\":7.36},{\"name\":\"Virginia\",\"value\":7.36}]}]}]},{\"name\":\"p29\",\"value\":29.25,\"children\":[{\"name\":\"Washington\",\"value\":22.77},{\"name\":\"p10\",\"value\":22.77,\"children\":[{\"name\":\"Massachusetts\",\"value\":11.46},{\"name\":\"New Jersey\",\"value\":11.46}]}]}]}]}]},{\"name\":\"p46\",\"value\":168.61,\"children\":[{\"name\":\"p34\",\"value\":87.33,\"children\":[{\"name\":\"p24\",\"value\":31.48,\"children\":[{\"name\":\"p5\",\"value\":18.26,\"children\":[{\"name\":\"Ohio\",\"value\":6.64},{\"name\":\"Utah\",\"value\":6.64}]},{\"name\":\"p7\",\"value\":18.26,\"children\":[{\"name\":\"Connecticut\",\"value\":8.029999999999999},{\"name\":\"Pennsylvania\",\"value\":8.029999999999999}]}]},{\"name\":\"p26\",\"value\":31.48,\"children\":[{\"name\":\"p16\",\"value\":19.9,\"children\":[{\"name\":\"Nebraska\",\"value\":13.35},{\"name\":\"p2\",\"value\":13.35,\"children\":[{\"name\":\"Kentucky\",\"value\":3.83},{\"name\":\"Montana\",\"value\":3.83}]}]},{\"name\":\"p19\",\"value\":19.9,\"children\":[{\"name\":\"Idaho\",\"value\":15.41},{\"name\":\"p3\",\"value\":15.41,\"children\":[{\"name\":\"Indiana\",\"value\":3.93},{\"name\":\"Kansas\",\"value\":3.93}]}]}]}]},{\"name\":\"p43\",\"value\":87.33,\"children\":[{\"name\":\"p35\",\"value\":57.27,\"children\":[{\"name\":\"Hawaii\",\"value\":31.62},{\"name\":\"p25\",\"value\":31.62,\"children\":[{\"name\":\"Minnesota\",\"value\":19.44},{\"name\":\"p9\",\"value\":19.44,\"children\":[{\"name\":\"Wisconsin\",\"value\":10.86},{\"name\":\"p1\",\"value\":10.86,\"children\":[{\"name\":\"Iowa\",\"value\":2.29},{\"name\":\"New Hampshire\",\"value\":2.29}]}]}]}]},{\"name\":\"p40\",\"value\":57.27,\"children\":[{\"name\":\"p13\",\"value\":41.49,\"children\":[{\"name\":\"West Virginia\",\"value\":12.78},{\"name\":\"p8\",\"value\":12.78,\"children\":[{\"name\":\"Maine\",\"value\":8.539999999999999},{\"name\":\"South Dakota\",\"value\":8.539999999999999}]}]},{\"name\":\"p14\",\"value\":41.49,\"children\":[{\"name\":\"North Dakota\",\"value\":13.04},{\"name\":\"Vermont\",\"value\":13.04}]}]}]}]}]}]}],\"layout\":\"radial\",\"label\":{\"formatter\":\"function(n) { out= /p\\\\d+/.test(n.name) ? '' : n.name; return out;}\"}}]}},\"evals\":[\"opts.series.0.label.formatter\"],\"jsHooks\":[]} # build required pathString,value and optional itemStyle columns df <- as.data.frame(Titanic) |> rename(value= Freq) |> mutate(   pathString= paste('Titanic\\nSurvival', Survived, Age, Sex, Class, sep='/'),    itemStyle= case_when(Survived=='Yes' ~\"color='green'\", TRUE ~\"color='LightSalmon'\")) |>    select(pathString, value, itemStyle) ec.init(     series= list(list(       data= ec.data(df, format='treeTT'),       type= 'tree', symbolSize= ec.clmn(\"(x) => {return Math.log(x)*10}\")     )),     tooltip= list(formatter= ec.clmn('%@<br>%@%','value','pct')) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"data\":[{\"name\":\"Titanic\\nSurvival\",\"value\":2201,\"children\":[{\"value\":1490,\"children\":[{\"value\":52,\"children\":[{\"value\":35,\"children\":[{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"1st\",\"pct\":0},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"2nd\",\"pct\":0},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":35,\"name\":\"3rd\",\"pct\":100},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"Crew\",\"pct\":0}],\"name\":\"Male\",\"pct\":67.31,\"itemStyle\":{\"color\":\"LightSalmon\"}},{\"value\":17,\"children\":[{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"1st\",\"pct\":0},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"2nd\",\"pct\":0},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":17,\"name\":\"3rd\",\"pct\":100},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":0,\"name\":\"Crew\",\"pct\":0}],\"name\":\"Female\",\"pct\":32.69,\"itemStyle\":{\"color\":\"LightSalmon\"}}],\"name\":\"Child\",\"pct\":3.49,\"itemStyle\":{\"color\":\"LightSalmon\"}},{\"value\":1438,\"children\":[{\"value\":1329,\"children\":[{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":118,\"name\":\"1st\",\"pct\":8.880000000000001},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":154,\"name\":\"2nd\",\"pct\":11.59},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":387,\"name\":\"3rd\",\"pct\":29.12},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":670,\"name\":\"Crew\",\"pct\":50.41}],\"name\":\"Male\",\"pct\":92.42,\"itemStyle\":{\"color\":\"LightSalmon\"}},{\"value\":109,\"children\":[{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":4,\"name\":\"1st\",\"pct\":3.67},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":13,\"name\":\"2nd\",\"pct\":11.93},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":89,\"name\":\"3rd\",\"pct\":81.65000000000001},{\"itemStyle\":{\"color\":\"LightSalmon\"},\"value\":3,\"name\":\"Crew\",\"pct\":2.75}],\"name\":\"Female\",\"pct\":7.58,\"itemStyle\":{\"color\":\"LightSalmon\"}}],\"name\":\"Adult\",\"pct\":96.51000000000001,\"itemStyle\":{\"color\":\"LightSalmon\"}}],\"name\":\"No\",\"pct\":67.7,\"itemStyle\":{\"color\":\"LightSalmon\"}},{\"value\":711,\"children\":[{\"value\":57,\"children\":[{\"value\":29,\"children\":[{\"itemStyle\":{\"color\":\"green\"},\"value\":5,\"name\":\"1st\",\"pct\":17.24},{\"itemStyle\":{\"color\":\"green\"},\"value\":11,\"name\":\"2nd\",\"pct\":37.93},{\"itemStyle\":{\"color\":\"green\"},\"value\":13,\"name\":\"3rd\",\"pct\":44.83},{\"itemStyle\":{\"color\":\"green\"},\"value\":0,\"name\":\"Crew\",\"pct\":0}],\"name\":\"Male\",\"pct\":50.88,\"itemStyle\":{\"color\":\"green\"}},{\"value\":28,\"children\":[{\"itemStyle\":{\"color\":\"green\"},\"value\":1,\"name\":\"1st\",\"pct\":3.57},{\"itemStyle\":{\"color\":\"green\"},\"value\":13,\"name\":\"2nd\",\"pct\":46.43},{\"itemStyle\":{\"color\":\"green\"},\"value\":14,\"name\":\"3rd\",\"pct\":50},{\"itemStyle\":{\"color\":\"green\"},\"value\":0,\"name\":\"Crew\",\"pct\":0}],\"name\":\"Female\",\"pct\":49.12,\"itemStyle\":{\"color\":\"green\"}}],\"name\":\"Child\",\"pct\":8.02,\"itemStyle\":{\"color\":\"green\"}},{\"value\":654,\"children\":[{\"value\":338,\"children\":[{\"itemStyle\":{\"color\":\"green\"},\"value\":57,\"name\":\"1st\",\"pct\":16.86},{\"itemStyle\":{\"color\":\"green\"},\"value\":14,\"name\":\"2nd\",\"pct\":4.14},{\"itemStyle\":{\"color\":\"green\"},\"value\":75,\"name\":\"3rd\",\"pct\":22.19},{\"itemStyle\":{\"color\":\"green\"},\"value\":192,\"name\":\"Crew\",\"pct\":56.8}],\"name\":\"Male\",\"pct\":51.68,\"itemStyle\":{\"color\":\"green\"}},{\"value\":316,\"children\":[{\"itemStyle\":{\"color\":\"green\"},\"value\":140,\"name\":\"1st\",\"pct\":44.3},{\"itemStyle\":{\"color\":\"green\"},\"value\":80,\"name\":\"2nd\",\"pct\":25.32},{\"itemStyle\":{\"color\":\"green\"},\"value\":76,\"name\":\"3rd\",\"pct\":24.05},{\"itemStyle\":{\"color\":\"green\"},\"value\":20,\"name\":\"Crew\",\"pct\":6.33}],\"name\":\"Female\",\"pct\":48.32,\"itemStyle\":{\"color\":\"green\"}}],\"name\":\"Adult\",\"pct\":91.98,\"itemStyle\":{\"color\":\"green\"}}],\"name\":\"Yes\",\"pct\":32.3,\"itemStyle\":{\"color\":\"green\"}}],\"itemStyle\":{\"color\":\"LightSalmon\"}}],\"type\":\"tree\",\"symbolSize\":\"(x) => {return Math.log(x)*10}\"}],\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['pathString','value','itemStyle'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['value'],x.data['pct']]; else {  if (!aa || !aa.length) return `no data`;  args= [`value`,`pct`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`%@<br>%@%`, vv); return c; }\"}}},\"evals\":[\"opts.series.0.symbolSize\",\"opts.tooltip.formatter\"],\"jsHooks\":[]} # column itemStyle_color will become itemStyle= list(color=...) in data list # attribute names separator (nasep) is \"_\" df <- data.frame(name= c('A','B','C'), value= c(1,2,3),       itemStyle_color= c('chartreuse','lightblue','pink'),      itemStyle_decal_symbol= c('rect','diamond','none'),      emphasis_itemStyle_color= c('darkgreen','blue','red') ) ec.init(series.param= list(type='pie', data= ec.data(df, 'names', nasep='_')))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"series\":[{\"type\":\"pie\",\"data\":[{\"name\":\"A\",\"value\":1,\"itemStyle\":{\"color\":\"chartreuse\",\"decal\":{\"symbol\":\"rect\"}},\"emphasis\":{\"itemStyle\":{\"color\":\"darkgreen\"}}},{\"name\":\"B\",\"value\":2,\"itemStyle\":{\"color\":\"lightblue\",\"decal\":{\"symbol\":\"diamond\"}},\"emphasis\":{\"itemStyle\":{\"color\":\"blue\"}}},{\"name\":\"C\",\"value\":3,\"itemStyle\":{\"color\":\"pink\",\"decal\":{\"symbol\":\"none\"}},\"emphasis\":{\"itemStyle\":{\"color\":\"red\"}}}]}]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":null,"dir":"Reference","previous_headings":"","what":"JSON to chart — ec.fromJson","title":"JSON to chart — ec.fromJson","text":"Convert JSON string file chart","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JSON to chart — ec.fromJson","text":"","code":"ec.fromJson(txt, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"JSON to chart — ec.fromJson","text":"txt one following:     class url, like url('https://serv.us/cars.txt')     class file, like file('c:/temp/cars.txt','rb')     class json, like ec.inspect(p), options full     class character, JSON string options , see example ... attributes pass internal ec.init txt options ","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"JSON to chart — ec.fromJson","text":"echarty widget.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"JSON to chart — ec.fromJson","text":"txt either list options (x$opts) set setOption, entire htmlwidget generated thru ec.inspect target='full'. latter imports JavaScript functions defined user.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.fromJson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"JSON to chart — ec.fromJson","text":"","code":"txt <- '{    \"xAxis\": { \"data\": [\"Mon\", \"Tue\", \"Wed\"]}, \"yAxis\": { },    \"series\": { \"type\": \"line\", \"data\": [150, 230, 224] } }' ec.fromJson(txt)  # text json  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"xAxis\":{\"data\":[\"Mon\",\"Tue\",\"Wed\"]},\"yAxis\":{},\"series\":{\"type\":\"line\",\"data\":[150,230,224]}}},\"evals\":[],\"jsHooks\":[]}# outFile <- 'c:/temp/cars.json' # cars |> ec.init() |> ec.inspect(target='full', file=outFile) # ec.fromJson(file(outFile, 'rb')) # ec.fromJson(url('http://localhost/echarty/cars.json'))  ec.fromJson('https://helgasoft.github.io/echarty/test/pfull.json')  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":[\"\",\"\",\"\\nloc= [[2.32968,48.85948,0],[2.32959,48.85967,0],[2.33026,48.86059,0],[2.33005,48.86097,0],[2.33358,48.86583,0],[2.33421,48.8664,0],[2.33293,48.86935,0],[2.33245,48.87093,0]];\\nii= 0; inc= 1;\\nsetInterval( (p) => {\\n  ii = ii + inc;\\n  if (ii> 7) { inc= -1; ii--; }\\n  if (ii< 0) { inc= +1; ii++; }\\n  loca = loc[ii];\\n  opt = {series: {id: 'bycicle', data: [loca]} };\\n  chart.setOption(opt);\\n}, 633)\"],\"opts\":{\"leaflet\":{\"center\":[2.329466,48.859475],\"zoom\":14,\"roam\":true,\"tiles\":[{\"urlTemplate\":\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}]},\"tooltip\":{\"show\":true,\"formatter\":\"{b}\"},\"color\":[\"green\",\"blue\",\"red\"],\"series\":[{\"type\":\"custom\",\"renderItem\":\"(params, api) => { ecf.geofill=null;  ecf.geojson= {\\\"type\\\":[\\\"FeatureCollection\\\"],\\\"properties\\\":{\\\"id\\\":[\\\"all3\\\"]},\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[2.3305,48.8622],[2.3303,48.8616],[2.3296,48.8616],[2.3295,48.8615],[2.3294,48.8615],[2.3288,48.8615],[2.3285,48.8614],[2.3285,48.8614],[2.3284,48.8614],[2.3278,48.8611],[2.3275,48.861],[2.327,48.861],[2.3269,48.861],[2.3265,48.861],[2.3261,48.8611],[2.3258,48.8615],[2.3258,48.8618],[2.3255,48.8622],[2.3252,48.8622],[2.3247,48.8622],[2.3245,48.8622],[2.3243,48.8617],[2.3236,48.8616],[2.3235,48.8615],[2.3234,48.8616],[2.3229,48.8615],[2.3231,48.8611],[2.3232,48.8607],[2.3233,48.8605],[2.3234,48.8604],[2.3235,48.8603],[2.3238,48.8598],[2.324,48.8595],[2.3243,48.8593],[2.3245,48.8592],[2.3247,48.8593],[2.3253,48.8593],[2.3255,48.8594],[2.3256,48.8594],[2.3258,48.8595],[2.3263,48.8596],[2.3265,48.8596],[2.3266,48.8596],[2.3272,48.8598],[2.3275,48.8598],[2.3276,48.8597],[2.3277,48.8595],[2.3279,48.859],[2.328,48.859],[2.3283,48.8585],[2.3284,48.8584],[2.3285,48.8578],[2.3286,48.8576],[2.3287,48.8575],[2.3294,48.8574],[2.3295,48.8574],[2.3295,48.8574],[2.3301,48.8575],[2.3303,48.8576],[2.3305,48.8576],[2.3308,48.8578],[2.331,48.8579],[2.3315,48.8581],[2.3319,48.8581],[2.3322,48.8582],[2.3325,48.8582],[2.3327,48.8582],[2.3334,48.8585],[2.3328,48.8588],[2.3325,48.8591],[2.3323,48.8593],[2.3323,48.8595],[2.3323,48.8597],[2.3325,48.8603],[2.3325,48.8604],[2.3325,48.8605],[2.3325,48.8605],[2.3325,48.8605],[2.3325,48.8605],[2.3316,48.8606],[2.3315,48.8606],[2.3311,48.8609],[2.3309,48.8609],[2.3309,48.8611],[2.3306,48.8615],[2.3307,48.8617],[2.3305,48.8622]]]]},\\\"properties\\\":{\\\"name\\\":\\\"p500\\\",\\\"range\\\":500,\\\"id\\\":\\\"0.5 min\\\",\\\"ppfill\\\":\\\"#00FF0077\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[2.3335,48.8662],[2.3331,48.8659],[2.3329,48.8659],[2.3325,48.8658],[2.3322,48.8658],[2.3318,48.8655],[2.3316,48.8653],[2.3315,48.8653],[2.3313,48.8653],[2.3308,48.8655],[2.3305,48.8655],[2.3305,48.8655],[2.3304,48.8655],[2.3304,48.8655],[2.3304,48.8654],[2.3302,48.8647],[2.3296,48.8646],[2.3295,48.8645],[2.3293,48.8646],[2.3285,48.8645],[2.3285,48.8646],[2.3285,48.8645],[2.3285,48.8645],[2.3285,48.8645],[2.3285,48.8645],[2.3285,48.8645],[2.3294,48.8644],[2.3295,48.8644],[2.3295,48.8644],[2.3303,48.8643],[2.3305,48.8643],[2.3308,48.8641],[2.3311,48.8641],[2.331,48.8639],[2.3312,48.8635],[2.3309,48.863],[2.3305,48.8628],[2.3303,48.8627],[2.3301,48.8625],[2.3299,48.862],[2.3295,48.8618],[2.3291,48.8618],[2.3288,48.8618],[2.3285,48.8618],[2.3282,48.8618],[2.3277,48.8617],[2.3275,48.8617],[2.3271,48.8619],[2.3269,48.8619],[2.3269,48.862],[2.3267,48.8625],[2.3266,48.8626],[2.3265,48.8627],[2.3262,48.8627],[2.3258,48.8628],[2.3255,48.8628],[2.3252,48.8628],[2.3248,48.8628],[2.3245,48.8628],[2.324,48.863],[2.3239,48.8629],[2.3239,48.863],[2.3237,48.8635],[2.3236,48.8636],[2.3235,48.8637],[2.3232,48.8637],[2.3227,48.8637],[2.3225,48.8638],[2.3221,48.8639],[2.3218,48.8638],[2.3215,48.8639],[2.321,48.8639],[2.3206,48.8635],[2.3205,48.8634],[2.3205,48.8634],[2.3204,48.8634],[2.3203,48.8635],[2.3202,48.8637],[2.3203,48.8644],[2.3196,48.8644],[2.3195,48.8644],[2.3194,48.8644],[2.3189,48.8641],[2.3185,48.8639],[2.3181,48.8638],[2.3178,48.8638],[2.3175,48.8637],[2.3173,48.8637],[2.3166,48.8635],[2.3166,48.8633],[2.3165,48.8625],[2.3165,48.8625],[2.3173,48.8624],[2.3175,48.8619],[2.3177,48.8617],[2.3181,48.8615],[2.3179,48.861],[2.3179,48.8609],[2.3177,48.8605],[2.3181,48.8602],[2.3185,48.8598],[2.3187,48.8597],[2.3192,48.8597],[2.3195,48.8597],[2.3196,48.8596],[2.3204,48.8595],[2.3205,48.8595],[2.3205,48.8595],[2.3205,48.8595],[2.3205,48.8595],[2.3205,48.8594],[2.3204,48.8594],[2.3197,48.8593],[2.3195,48.8591],[2.319,48.8589],[2.3188,48.8585],[2.3191,48.8581],[2.3195,48.8579],[2.3196,48.8584],[2.3203,48.8583],[2.3205,48.8584],[2.3207,48.8582],[2.3211,48.8581],[2.3211,48.8578],[2.3213,48.8575],[2.3212,48.8572],[2.3212,48.8567],[2.3206,48.8566],[2.3205,48.8565],[2.3204,48.8566],[2.3197,48.8565],[2.32,48.856],[2.3202,48.8558],[2.3204,48.8555],[2.3204,48.8554],[2.3205,48.8554],[2.3205,48.8555],[2.3205,48.8555],[2.3205,48.8555],[2.3206,48.8563],[2.3212,48.8563],[2.3215,48.8563],[2.3217,48.8563],[2.3224,48.8565],[2.3225,48.8563],[2.3229,48.8559],[2.3232,48.8555],[2.3234,48.8554],[2.3235,48.8554],[2.3235,48.8554],[2.3237,48.8555],[2.3242,48.8558],[2.3245,48.8558],[2.3247,48.8558],[2.3252,48.8555],[2.3253,48.8554],[2.3255,48.8553],[2.3256,48.8553],[2.3259,48.8555],[2.3262,48.8557],[2.3265,48.8562],[2.3266,48.8564],[2.3269,48.8565],[2.3265,48.8565],[2.3265,48.8565],[2.3265,48.8565],[2.3256,48.8566],[2.3255,48.8566],[2.3252,48.8567],[2.3247,48.8568],[2.3248,48.8572],[2.3247,48.8575],[2.3249,48.858],[2.325,48.858],[2.325,48.858],[2.3255,48.8582],[2.3257,48.8582],[2.3262,48.8582],[2.3265,48.8582],[2.3269,48.8581],[2.3271,48.8581],[2.3272,48.8578],[2.3273,48.8575],[2.3273,48.8573],[2.3275,48.8565],[2.3275,48.8565],[2.3284,48.8566],[2.3285,48.8565],[2.3285,48.8565],[2.3294,48.8565],[2.3295,48.8565],[2.3295,48.8565],[2.3296,48.8565],[2.3296,48.8564],[2.3296,48.8556],[2.3296,48.8555],[2.33,48.855],[2.33,48.855],[2.3302,48.8545],[2.3303,48.8543],[2.3305,48.8541],[2.3307,48.8543],[2.3309,48.8545],[2.3312,48.8547],[2.3315,48.8547],[2.3317,48.8547],[2.3322,48.8548],[2.3325,48.8548],[2.3328,48.8548],[2.3333,48.8547],[2.3335,48.8547],[2.3338,48.8552],[2.3344,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3345,48.8555],[2.3336,48.8556],[2.3335,48.8556],[2.3333,48.8557],[2.3327,48.8557],[2.3328,48.8561],[2.3327,48.8565],[2.3327,48.8567],[2.3327,48.8572],[2.3328,48.8575],[2.333,48.8579],[2.3335,48.8581],[2.3339,48.8579],[2.3342,48.8575],[2.3342,48.8573],[2.3345,48.8566],[2.3346,48.8566],[2.3352,48.8567],[2.3355,48.8567],[2.3358,48.8568],[2.3361,48.8569],[2.3365,48.8569],[2.3369,48.8571],[2.3371,48.8571],[2.3375,48.8572],[2.3379,48.8571],[2.3381,48.8571],[2.3383,48.8566],[2.3384,48.8565],[2.3384,48.8564],[2.3385,48.8564],[2.3385,48.8564],[2.339,48.8565],[2.3393,48.8566],[2.3395,48.8569],[2.3395,48.8574],[2.3395,48.8575],[2.3395,48.8575],[2.3395,48.8576],[2.3394,48.8575],[2.3386,48.8576],[2.3385,48.8576],[2.3384,48.8576],[2.3376,48.8576],[2.3375,48.8576],[2.3373,48.8576],[2.3367,48.8577],[2.3365,48.8577],[2.3363,48.8577],[2.3357,48.8577],[2.3355,48.8577],[2.335,48.858],[2.3348,48.8585],[2.335,48.859],[2.3355,48.8593],[2.3357,48.8593],[2.3363,48.8593],[2.3365,48.8593],[2.3366,48.8593],[2.3374,48.8594],[2.3375,48.8594],[2.3376,48.8594],[2.3384,48.8594],[2.3385,48.8594],[2.3386,48.8594],[2.3392,48.8595],[2.3385,48.8595],[2.3385,48.8595],[2.3383,48.8596],[2.3377,48.8597],[2.3376,48.8604],[2.3375,48.8605],[2.3375,48.8605],[2.3375,48.8609],[2.3372,48.8612],[2.3371,48.8615],[2.3368,48.8618],[2.3365,48.862],[2.3362,48.8623],[2.3361,48.8625],[2.3358,48.8628],[2.3355,48.8632],[2.3353,48.8633],[2.3351,48.8635],[2.335,48.864],[2.335,48.864],[2.3347,48.8645],[2.3346,48.8646],[2.3345,48.8647],[2.3341,48.8651],[2.3339,48.8655],[2.3338,48.8658],[2.3335,48.8662]]]]},\\\"properties\\\":{\\\"name\\\":\\\"p1000\\\",\\\"range\\\":1000,\\\"id\\\":\\\"1 min\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[2.3355,48.8697],[2.335,48.87],[2.3348,48.8701],[2.3345,48.8703],[2.3343,48.8703],[2.3336,48.8704],[2.3335,48.8704],[2.3334,48.8704],[2.3325,48.8705],[2.3325,48.8705],[2.3321,48.8698],[2.3319,48.8695],[2.3317,48.8692],[2.3315,48.8691],[2.331,48.869],[2.3309,48.869],[2.3305,48.8689],[2.3301,48.8688],[2.3297,48.8685],[2.3303,48.8683],[2.3305,48.8684],[2.3308,48.8682],[2.3311,48.8681],[2.331,48.8679],[2.3312,48.8675],[2.3312,48.8672],[2.3312,48.8668],[2.3312,48.8665],[2.3309,48.866],[2.3305,48.8658],[2.3302,48.8658],[2.3299,48.8655],[2.3297,48.8652],[2.3295,48.8651],[2.3292,48.8652],[2.329,48.8655],[2.3288,48.8658],[2.3285,48.866],[2.3281,48.8661],[2.3279,48.8661],[2.3275,48.8661],[2.3271,48.8661],[2.3268,48.8662],[2.3265,48.8662],[2.3261,48.8661],[2.3256,48.8663],[2.3257,48.8657],[2.3255,48.8655],[2.3262,48.8652],[2.3265,48.8652],[2.3267,48.8652],[2.3272,48.8652],[2.3275,48.8652],[2.3279,48.8649],[2.3281,48.8645],[2.3282,48.8642],[2.3285,48.8641],[2.3288,48.8641],[2.3291,48.8641],[2.3295,48.8641],[2.3298,48.8641],[2.3301,48.8641],[2.3305,48.8641],[2.3308,48.8639],[2.331,48.8635],[2.3308,48.8631],[2.3305,48.863],[2.3301,48.8628],[2.33,48.8625],[2.3298,48.8621],[2.3295,48.862],[2.329,48.862],[2.329,48.862],[2.3285,48.862],[2.328,48.8619],[2.3279,48.8619],[2.3275,48.8619],[2.3271,48.8621],[2.3269,48.8625],[2.3268,48.8628],[2.3265,48.8629],[2.326,48.8629],[2.3259,48.8629],[2.3255,48.863],[2.325,48.863],[2.325,48.863],[2.3245,48.863],[2.3241,48.8631],[2.3239,48.8635],[2.3237,48.8638],[2.3235,48.8639],[2.323,48.864],[2.3226,48.8645],[2.3228,48.8648],[2.3228,48.8651],[2.3232,48.8652],[2.3235,48.8653],[2.3236,48.8654],[2.3236,48.8655],[2.3237,48.8657],[2.3237,48.8662],[2.3243,48.8664],[2.3245,48.8664],[2.3246,48.8664],[2.3252,48.8665],[2.3248,48.8668],[2.3245,48.8672],[2.3243,48.8673],[2.3239,48.8675],[2.3236,48.8676],[2.3235,48.8677],[2.3231,48.8681],[2.3229,48.8681],[2.3225,48.8682],[2.3221,48.8678],[2.3218,48.8678],[2.3215,48.8677],[2.3214,48.8676],[2.3205,48.8675],[2.3205,48.8675],[2.3204,48.8675],[2.3199,48.8675],[2.3196,48.8673],[2.3195,48.8673],[2.3191,48.8672],[2.3189,48.8671],[2.3185,48.8669],[2.3182,48.8668],[2.3176,48.8665],[2.3177,48.8662],[2.3178,48.8659],[2.3184,48.8655],[2.3175,48.8654],[2.3175,48.8654],[2.3174,48.8654],[2.3167,48.8652],[2.3165,48.8652],[2.3161,48.8651],[2.3159,48.8651],[2.3155,48.865],[2.3151,48.8649],[2.3148,48.8648],[2.3145,48.8647],[2.3142,48.8648],[2.3135,48.8646],[2.3135,48.8646],[2.3134,48.8645],[2.3133,48.8645],[2.3134,48.8644],[2.3131,48.8639],[2.3131,48.8635],[2.3129,48.863],[2.3125,48.8628],[2.3122,48.8628],[2.3117,48.8627],[2.3115,48.8627],[2.3112,48.8627],[2.3106,48.8626],[2.3105,48.8626],[2.3104,48.8625],[2.3103,48.8625],[2.3103,48.8623],[2.3105,48.8621],[2.3108,48.8618],[2.311,48.8615],[2.3112,48.8612],[2.3115,48.8608],[2.3115,48.8614],[2.3123,48.8613],[2.3125,48.8614],[2.3127,48.8613],[2.3132,48.8612],[2.3132,48.8607],[2.3134,48.8605],[2.3133,48.8603],[2.3134,48.8595],[2.3134,48.8595],[2.3134,48.8594],[2.3134,48.8585],[2.3134,48.8585],[2.3135,48.8585],[2.3135,48.8585],[2.3135,48.8585],[2.3143,48.8583],[2.3143,48.8576],[2.3144,48.8575],[2.3144,48.8574],[2.3145,48.8566],[2.3145,48.8565],[2.3154,48.8566],[2.3155,48.8565],[2.3155,48.8565],[2.3156,48.8565],[2.3156,48.8564],[2.3155,48.8559],[2.3153,48.8556],[2.3154,48.8555],[2.3154,48.8554],[2.3155,48.8554],[2.3155,48.8555],[2.3163,48.8553],[2.3165,48.8554],[2.3167,48.8552],[2.3172,48.8552],[2.3172,48.8548],[2.3173,48.8545],[2.3173,48.8543],[2.3174,48.8536],[2.3173,48.8535],[2.3174,48.8534],[2.3175,48.8525],[2.3175,48.8525],[2.3175,48.8525],[2.3175,48.8524],[2.3175,48.8525],[2.3175,48.8525],[2.3175,48.8525],[2.3176,48.8533],[2.3182,48.8532],[2.3185,48.8533],[2.3188,48.8532],[2.3191,48.8531],[2.3192,48.8528],[2.3193,48.8525],[2.3192,48.8522],[2.3194,48.8516],[2.3185,48.8515],[2.3185,48.8515],[2.3185,48.8515],[2.3184,48.8515],[2.3184,48.8515],[2.3185,48.8514],[2.3185,48.8514],[2.3192,48.8512],[2.3195,48.851],[2.3195,48.8514],[2.3197,48.8515],[2.3196,48.8516],[2.3197,48.8523],[2.3196,48.8525],[2.3196,48.8526],[2.3197,48.8533],[2.3197,48.8535],[2.32,48.854],[2.3205,48.8542],[2.3209,48.854],[2.321,48.854],[2.321,48.8539],[2.3213,48.8535],[2.3214,48.8534],[2.3215,48.8533],[2.3216,48.8533],[2.3224,48.8534],[2.3225,48.8534],[2.3227,48.8532],[2.3231,48.8531],[2.3232,48.8528],[2.3233,48.8525],[2.3232,48.8523],[2.3234,48.8516],[2.3229,48.8515],[2.3234,48.8514],[2.3235,48.8511],[2.3237,48.8512],[2.3242,48.8515],[2.3244,48.8516],[2.3245,48.8516],[2.3246,48.8516],[2.3252,48.8515],[2.3254,48.8514],[2.3255,48.8514],[2.3257,48.8513],[2.326,48.851],[2.3265,48.8508],[2.3268,48.8508],[2.3271,48.8509],[2.3275,48.8508],[2.3278,48.8508],[2.3281,48.8508],[2.3285,48.8508],[2.3289,48.8509],[2.329,48.851],[2.3295,48.8511],[2.3299,48.8511],[2.3302,48.8512],[2.3305,48.8512],[2.3307,48.8513],[2.3311,48.8515],[2.3314,48.8516],[2.3315,48.8516],[2.3316,48.8516],[2.3322,48.8518],[2.3325,48.8518],[2.3328,48.8518],[2.3331,48.8519],[2.3335,48.8519],[2.3339,48.852],[2.3342,48.8522],[2.3345,48.8524],[2.3347,48.8523],[2.3351,48.8521],[2.3355,48.8518],[2.3359,48.8519],[2.3361,48.8519],[2.3365,48.8519],[2.3367,48.8517],[2.3374,48.8515],[2.3375,48.8515],[2.3375,48.8515],[2.3375,48.8515],[2.3375,48.8515],[2.338,48.8519],[2.3385,48.8523],[2.3386,48.8523],[2.3389,48.8525],[2.3393,48.8527],[2.3395,48.8528],[2.3398,48.8532],[2.3401,48.8535],[2.3398,48.8539],[2.3396,48.8543],[2.3395,48.8545],[2.3403,48.8547],[2.3405,48.8547],[2.3407,48.8547],[2.3411,48.8548],[2.3415,48.8548],[2.3419,48.8549],[2.342,48.855],[2.3425,48.8551],[2.3429,48.855],[2.3431,48.8551],[2.3435,48.8547],[2.3435,48.8554],[2.3435,48.8555],[2.3435,48.8555],[2.3436,48.8564],[2.3436,48.8565],[2.3436,48.8566],[2.3435,48.8566],[2.343,48.8569],[2.3429,48.8569],[2.3429,48.857],[2.3427,48.8575],[2.3428,48.8578],[2.3428,48.8581],[2.3429,48.8585],[2.3429,48.8589],[2.3429,48.859],[2.343,48.8595],[2.3429,48.8599],[2.3425,48.8603],[2.3423,48.8603],[2.342,48.8605],[2.3418,48.8608],[2.3417,48.8613],[2.3416,48.8615],[2.3415,48.8616],[2.3415,48.8617],[2.3411,48.8621],[2.3409,48.8625],[2.3407,48.8627],[2.3405,48.863],[2.3403,48.8633],[2.3401,48.8635],[2.3398,48.8638],[2.3395,48.8639],[2.3391,48.8641],[2.3389,48.8645],[2.3388,48.8648],[2.3385,48.8651],[2.3383,48.8653],[2.3383,48.8655],[2.3382,48.8657],[2.3383,48.8663],[2.3382,48.8665],[2.3379,48.8669],[2.3379,48.8671],[2.3377,48.8675],[2.3376,48.8676],[2.3375,48.8684],[2.3375,48.8685],[2.3375,48.8685],[2.3375,48.8685],[2.3373,48.8686],[2.3369,48.8689],[2.3365,48.8692],[2.3363,48.8693],[2.3358,48.8695],[2.3356,48.8696],[2.3355,48.8697]]]]},\\\"properties\\\":{\\\"name\\\":\\\"p1500\\\",\\\"range\\\":1500,\\\"id\\\":\\\"1.5 min\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[2.3295,48.8595]},\\\"properties\\\":{\\\"id\\\":\\\"start\\\",\\\"ppfill\\\":\\\"#FF00FF66\\\",\\\"color\\\":\\\"red\\\",\\\"radius\\\":11,\\\"lwidth\\\":\\\"5\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[2.3325,48.8709,0]},\\\"properties\\\":{\\\"id\\\":\\\"end\\\",\\\"ppfill\\\":\\\"lightgreen\\\",\\\"color\\\":\\\"teal\\\",\\\"radius\\\":10,\\\"lwidth\\\":\\\"5\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"LineString\\\",\\\"coordinates\\\":[[2.3297,48.8595,0],[2.3296,48.8597,0],[2.3303,48.8606,0],[2.33,48.861,0],[2.3336,48.8658,0],[2.3342,48.8664,0],[2.3329,48.8693,0],[2.3325,48.8709,0]]},\\\"properties\\\":{\\\"id\\\":\\\"trajet Quai Voltaire to Pl. de l'Opéra\\\",\\\"color\\\":\\\"maroon\\\",\\\"ldash\\\":\\\"[4,2]\\\"}}]} ; return riGeoJson(params, api); }\",\"data\":[{\"name\":\"0.5 min\"},{\"name\":\"1 min\"},{\"name\":\"1.5 min\"},{\"name\":\"start\"},{\"name\":\"end\"},{\"name\":\"trajet Quai Voltaire to Pl. de l'Opéra\"}],\"colorBy\":\"data\",\"ppfill\":null,\"nid\":\"id\",\"coordinateSystem\":\"leaflet\"},{\"type\":\"custom\",\"id\":\"bycicle\",\"zlevel\":11,\"renderItem\":\"(params, api) => {\\n        cc = api.coord([api.value(0), api.value(1)]);\\n        return {\\n          type: 'path',\\n          shape: {\\n            pathData: 'M4 4.5a.5.5 0 0 1 .5-.5H6a.5.5 0 0 1 0 1v.5h4.14l.386-1.158A.5.5 0 0 1 11 4h1a.5.5 0 0 1 0 1h-.64l-.311.935.807 1.29a3 3 0 1 1-.848.53l-.508-.812-2.076 3.322A.5.5 0 0 1 8 10.5H5.959a3 3 0 1 1-1.815-3.274L5 5.856V5h-.5a.5.5 0 0 1-.5-.5zm1.5 2.443-.508.814c.5.444.85 1.054.967 1.743h1.139L5.5 6.943zM8 9.057 9.598 6.5H6.402L8 9.057zM4.937 9.5a1.997 1.997 0 0 0-.487-.877l-.548.877h1.035zM3.603 8.092A2 2 0 1 0 4.937 10.5H3a.5.5 0 0 1-.424-.765l1.027-1.643zm7.947.53a2 2 0 1 0 .848-.53l1.026 1.643a.5.5 0 1 1-.848.53L11.55 8.623z',\\n          },\\n          x: cc[0], y: cc[1],\\n          originX: 17, originY: 17,\\n          scaleX: 2, scaleY : 2  // 3 = orig.XY 12\\n        }\\n      }\",\"data\":[[2.329466,48.859475]],\"coordinateSystem\":\"leaflet\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.0.renderItem\",\"opts.series.1.renderItem\"],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize command — ec.init","title":"Initialize command — ec.init","text":"Required build chart. cases command necessary.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize command — ec.init","text":"","code":"ec.init(   df = NULL,   preset = TRUE,   ctype = \"scatter\",   ...,   series.param = NULL,   tl.series = NULL,   width = NULL,   height = NULL )"},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize command — ec.init","text":"df Optional data.frame preset dataset, default NULL  default first column X values, second column Y, third Z 3D. Best practice grouping column placed last. Grouping column used axis. Timeline requires grouped data.frame build options. grouping multiple columns, first one used determine settings. preset Boolean (default TRUE). Build preset attributes like dataset, series, xAxis, yAxis, etc. preset FALSE, attributes need set explicitly. ctype Chart type, default 'scatter'. set series.param instead. ... Optional widget attributes. See Details. series.param Additional attributes single preset series, default NULL. Defines single series non-timeline timeline charts. Multiple series defined directly series=list(list(type=...),list(type=...)) added ec.upd. tl.series Deprecated, use timeline series.param instead. width, height Optional valid CSS unit (like '100%', '500px', 'auto') number, coerced string 'px' appended.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize command — ec.init","text":"widget plot, save expand features.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize command — ec.init","text":"Command ec.init creates widget createWidget, adds ECharts features . Numerical indexes series,visualMap,etc. R-counted (1,2...) Presets:  data.frame df present, dataset preset.  df grouped ctype NULL, datasets legend series also preset.  Plugin '3D' (load='3D') required GL series like scatterGL, linesGL, etc.  Plugins 'leaflet' 'world' preset center mean coordinates df.  Users can delete overwrite presets needed. Widget attributes:  Optional echarty widget attributes include: elementId - Id widget, default NULL(auto-generated) load - name(s) plugin(s) load. character vector comma-delimited string. default NULL. ask - prompt user downloading plugins load present, FALSE default js - single string vector JavaScript expressions evaluate. single: exposed chart object (common) vector:      see code examples     First expression evaluated initialization, exposed object window      Second evaluated exposed object opts.      Third evaluated exposed chart object opts set. renderer - 'canvas'(default) 'svg' locale - 'EN'(default) 'ZH'. Use predefined custom like . useDirtyRect - enable dirty rectangle rendering , FALSE default, see Built-plugins: leaflet - Leaflet maps customizable tiles, see source world - world map country boundaries, see source lottie - support lotties ecStat - statistical tools, seeecharts-stat custom - renderers ecr.band ecr.ebars  Plugins one-time installation: 3D - support 3D charts WebGL acceleration, see source docs      plugin auto-loaded 3D/GL axes/series detected. liquid - liquid fill, see source gmodular - graph modularity, see source wordcloud - cloud words, see source  install third-party plugins. Crosstalk: Parameter df type SharedData, see info. Optional parameter xtKey: unique ID column name data frame df. Must key parameter used SharedData$new(). missing, new column XkeyX appended df. Enabling crosstalk also generate additional dataset called Xtalk bind first series . Timeline: Defined series.param options series timeline list actual control. grouped df required, group providing data one option serie. Timeline data options preset chart. option title can include current timeline item adding placeholder '%@' title$text. See example . Another preset encode(x=1,y=2,z=3), first 3 columns df. Parameter z ignored 2D. See Details . Optional attribute groupBy, df column name, can create series groups inside timeline option. Options/timeline hierarchical charts like graph,tree,treemap,sankey built directly, see example. Encode  series attribute define columns use axes, depending chart type coordinate system: set x y coordinateSystem cartesian2d set lng lat coordinateSystem geo scatter series set value name coordinateSystem geo map series set radius angle coordinateSystem polar set value itemName pie chart Example: encode(x='col3', y='col1') binds xAxis df column 'col3'.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize command — ec.init","text":"","code":"# basic scatter chart from a data.frame, using presets cars |> ec.init()  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}   # grouping, tooltips, formatting iris |> dplyr::group_by(Species) |>  ec.init(        # init with presets   tooltip= list(show= TRUE),   series.param= list(      symbolSize= ec.clmn('Petal.Width', scale=7),     tooltip= list(formatter= ec.clmn('Petal.Width: %@', 'Petal.Width'))   ) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"tooltip\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\"],\"source\":[[5.1,3.5,1.4,0.2,\"setosa\"],[4.9,3,1.4,0.2,\"setosa\"],[4.7,3.2,1.3,0.2,\"setosa\"],[4.6,3.1,1.5,0.2,\"setosa\"],[5,3.6,1.4,0.2,\"setosa\"],[5.4,3.9,1.7,0.4,\"setosa\"],[4.6,3.4,1.4,0.3,\"setosa\"],[5,3.4,1.5,0.2,\"setosa\"],[4.4,2.9,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.1,\"setosa\"],[5.4,3.7,1.5,0.2,\"setosa\"],[4.8,3.4,1.6,0.2,\"setosa\"],[4.8,3,1.4,0.1,\"setosa\"],[4.3,3,1.1,0.1,\"setosa\"],[5.8,4,1.2,0.2,\"setosa\"],[5.7,4.4,1.5,0.4,\"setosa\"],[5.4,3.9,1.3,0.4,\"setosa\"],[5.1,3.5,1.4,0.3,\"setosa\"],[5.7,3.8,1.7,0.3,\"setosa\"],[5.1,3.8,1.5,0.3,\"setosa\"],[5.4,3.4,1.7,0.2,\"setosa\"],[5.1,3.7,1.5,0.4,\"setosa\"],[4.6,3.6,1,0.2,\"setosa\"],[5.1,3.3,1.7,0.5,\"setosa\"],[4.8,3.4,1.9,0.2,\"setosa\"],[5,3,1.6,0.2,\"setosa\"],[5,3.4,1.6,0.4,\"setosa\"],[5.2,3.5,1.5,0.2,\"setosa\"],[5.2,3.4,1.4,0.2,\"setosa\"],[4.7,3.2,1.6,0.2,\"setosa\"],[4.8,3.1,1.6,0.2,\"setosa\"],[5.4,3.4,1.5,0.4,\"setosa\"],[5.2,4.1,1.5,0.1,\"setosa\"],[5.5,4.2,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.2,\"setosa\"],[5,3.2,1.2,0.2,\"setosa\"],[5.5,3.5,1.3,0.2,\"setosa\"],[4.9,3.6,1.4,0.1,\"setosa\"],[4.4,3,1.3,0.2,\"setosa\"],[5.1,3.4,1.5,0.2,\"setosa\"],[5,3.5,1.3,0.3,\"setosa\"],[4.5,2.3,1.3,0.3,\"setosa\"],[4.4,3.2,1.3,0.2,\"setosa\"],[5,3.5,1.6,0.6,\"setosa\"],[5.1,3.8,1.9,0.4,\"setosa\"],[4.8,3,1.4,0.3,\"setosa\"],[5.1,3.8,1.6,0.2,\"setosa\"],[4.6,3.2,1.4,0.2,\"setosa\"],[5.3,3.7,1.5,0.2,\"setosa\"],[5,3.3,1.4,0.2,\"setosa\"],[7,3.2,4.7,1.4,\"versicolor\"],[6.4,3.2,4.5,1.5,\"versicolor\"],[6.9,3.1,4.9,1.5,\"versicolor\"],[5.5,2.3,4,1.3,\"versicolor\"],[6.5,2.8,4.6,1.5,\"versicolor\"],[5.7,2.8,4.5,1.3,\"versicolor\"],[6.3,3.3,4.7,1.6,\"versicolor\"],[4.9,2.4,3.3,1,\"versicolor\"],[6.6,2.9,4.6,1.3,\"versicolor\"],[5.2,2.7,3.9,1.4,\"versicolor\"],[5,2,3.5,1,\"versicolor\"],[5.9,3,4.2,1.5,\"versicolor\"],[6,2.2,4,1,\"versicolor\"],[6.1,2.9,4.7,1.4,\"versicolor\"],[5.6,2.9,3.6,1.3,\"versicolor\"],[6.7,3.1,4.4,1.4,\"versicolor\"],[5.6,3,4.5,1.5,\"versicolor\"],[5.8,2.7,4.1,1,\"versicolor\"],[6.2,2.2,4.5,1.5,\"versicolor\"],[5.6,2.5,3.9,1.1,\"versicolor\"],[5.9,3.2,4.8,1.8,\"versicolor\"],[6.1,2.8,4,1.3,\"versicolor\"],[6.3,2.5,4.9,1.5,\"versicolor\"],[6.1,2.8,4.7,1.2,\"versicolor\"],[6.4,2.9,4.3,1.3,\"versicolor\"],[6.6,3,4.4,1.4,\"versicolor\"],[6.8,2.8,4.8,1.4,\"versicolor\"],[6.7,3,5,1.7,\"versicolor\"],[6,2.9,4.5,1.5,\"versicolor\"],[5.7,2.6,3.5,1,\"versicolor\"],[5.5,2.4,3.8,1.1,\"versicolor\"],[5.5,2.4,3.7,1,\"versicolor\"],[5.8,2.7,3.9,1.2,\"versicolor\"],[6,2.7,5.1,1.6,\"versicolor\"],[5.4,3,4.5,1.5,\"versicolor\"],[6,3.4,4.5,1.6,\"versicolor\"],[6.7,3.1,4.7,1.5,\"versicolor\"],[6.3,2.3,4.4,1.3,\"versicolor\"],[5.6,3,4.1,1.3,\"versicolor\"],[5.5,2.5,4,1.3,\"versicolor\"],[5.5,2.6,4.4,1.2,\"versicolor\"],[6.1,3,4.6,1.4,\"versicolor\"],[5.8,2.6,4,1.2,\"versicolor\"],[5,2.3,3.3,1,\"versicolor\"],[5.6,2.7,4.2,1.3,\"versicolor\"],[5.7,3,4.2,1.2,\"versicolor\"],[5.7,2.9,4.2,1.3,\"versicolor\"],[6.2,2.9,4.3,1.3,\"versicolor\"],[5.1,2.5,3,1.1,\"versicolor\"],[5.7,2.8,4.1,1.3,\"versicolor\"],[6.3,3.3,6,2.5,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[7.1,3,5.9,2.1,\"virginica\"],[6.3,2.9,5.6,1.8,\"virginica\"],[6.5,3,5.8,2.2,\"virginica\"],[7.6,3,6.6,2.1,\"virginica\"],[4.9,2.5,4.5,1.7,\"virginica\"],[7.3,2.9,6.3,1.8,\"virginica\"],[6.7,2.5,5.8,1.8,\"virginica\"],[7.2,3.6,6.1,2.5,\"virginica\"],[6.5,3.2,5.1,2,\"virginica\"],[6.4,2.7,5.3,1.9,\"virginica\"],[6.8,3,5.5,2.1,\"virginica\"],[5.7,2.5,5,2,\"virginica\"],[5.8,2.8,5.1,2.4,\"virginica\"],[6.4,3.2,5.3,2.3,\"virginica\"],[6.5,3,5.5,1.8,\"virginica\"],[7.7,3.8,6.7,2.2,\"virginica\"],[7.7,2.6,6.9,2.3,\"virginica\"],[6,2.2,5,1.5,\"virginica\"],[6.9,3.2,5.7,2.3,\"virginica\"],[5.6,2.8,4.9,2,\"virginica\"],[7.7,2.8,6.7,2,\"virginica\"],[6.3,2.7,4.9,1.8,\"virginica\"],[6.7,3.3,5.7,2.1,\"virginica\"],[7.2,3.2,6,1.8,\"virginica\"],[6.2,2.8,4.8,1.8,\"virginica\"],[6.1,3,4.9,1.8,\"virginica\"],[6.4,2.8,5.6,2.1,\"virginica\"],[7.2,3,5.8,1.6,\"virginica\"],[7.4,2.8,6.1,1.9,\"virginica\"],[7.9,3.8,6.4,2,\"virginica\"],[6.4,2.8,5.6,2.2,\"virginica\"],[6.3,2.8,5.1,1.5,\"virginica\"],[6.1,2.6,5.6,1.4,\"virginica\"],[7.7,3,6.1,2.3,\"virginica\"],[6.3,3.4,5.6,2.4,\"virginica\"],[6.4,3.1,5.5,1.8,\"virginica\"],[6,3,4.8,1.8,\"virginica\"],[6.9,3.1,5.4,2.1,\"virginica\"],[6.7,3.1,5.6,2.4,\"virginica\"],[6.9,3.1,5.1,2.3,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[6.8,3.2,5.9,2.3,\"virginica\"],[6.7,3.3,5.7,2.5,\"virginica\"],[6.7,3,5.2,2.3,\"virginica\"],[6.3,2.5,5,1.9,\"virginica\"],[6.5,3,5.2,2,\"virginica\"],[6.2,3.4,5.4,2.3,\"virginica\"],[5.9,3,5.1,1.8,\"virginica\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"setosa\"}},\"id\":\"setosa\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"versicolor\"}},\"id\":\"versicolor\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"virginica\"}},\"id\":\"virginica\"}],\"series\":[{\"type\":\"scatter\",\"datasetIndex\":1,\"name\":\"setosa\",\"symbolSize\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 7 );c= sprintf(`%@`, vv); return c; }\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`Petal.Width: %@`, vv); return c; }\"}},{\"type\":\"scatter\",\"datasetIndex\":2,\"name\":\"versicolor\",\"symbolSize\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 7 );c= sprintf(`%@`, vv); return c; }\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`Petal.Width: %@`, vv); return c; }\"}},{\"type\":\"scatter\",\"datasetIndex\":3,\"name\":\"virginica\",\"symbolSize\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 7 );c= sprintf(`%@`, vv); return c; }\",\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); }; pos=['Sepal.Length','Sepal.Width','Petal.Length','Petal.Width','Species'];  aa= Array.isArray(x) ? x : x.data; tmp= null; if (aa && aa instanceof Object && !Array.isArray(aa)) {  tmp= Object.keys(aa); if (tmp.length==1 && tmp[0]=='value') aa= x.data.value;} if (tmp && tmp.length>1)  vv=[x.data['Petal.Width']]; else {  if (!aa || !aa.length) return `no data`;  args= [`Petal.Width`];   pos= args.map(z => pos.indexOf(z));  vv= pos.map(p => aa[p]); } vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`Petal.Width: %@`, vv); return c; }\"}}],\"legend\":{\"data\":[{\"name\":\"setosa\"},{\"name\":\"versicolor\"},{\"name\":\"virginica\"}]},\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Length\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"Sepal.Width\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.0.symbolSize\",\"opts.series.0.tooltip.formatter\",\"opts.series.1.symbolSize\",\"opts.series.1.tooltip.formatter\",\"opts.series.2.symbolSize\",\"opts.series.2.tooltip.formatter\"],\"jsHooks\":[]} data.frame(n=1:5) |> dplyr::group_by(n) |> ec.init(   title= list(text= \"gauge #%@\"),   timeline= list(show=TRUE, autoPlay=TRUE),   series.param= list(type='gauge', max=5) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"text\":\"gauge #%@\"},\"timeline\":{\"show\":true,\"autoPlay\":true,\"data\":[\"1\",\"2\",\"3\",\"4\",\"5\"],\"axisType\":\"category\"},\"dataset\":[{\"dimensions\":\"n\",\"source\":[[1],[2],[3],[4],[5]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":1}},\"id\":1},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":2}},\"id\":2},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":3}},\"id\":3},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"n\",\"=\":5}},\"id\":5}],\"legend\":{\"data\":[{\"name\":\"1\"},{\"name\":\"2\"},{\"name\":\"3\"},{\"name\":\"4\"},{\"name\":\"5\"}]},\"options\":[{\"series\":[{\"datasetIndex\":1,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #1\"}},{\"series\":[{\"datasetIndex\":2,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #2\"}},{\"series\":[{\"datasetIndex\":3,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #3\"}},{\"series\":[{\"datasetIndex\":4,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #4\"}},{\"series\":[{\"datasetIndex\":5,\"type\":\"gauge\",\"max\":5,\"encode\":{\"x\":0,\"y\":1}}],\"title\":{\"text\":\"gauge #5\"}}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Chart to JSON — ec.inspect","title":"Chart to JSON — ec.inspect","text":"Convert chart JSON string","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chart to JSON — ec.inspect","text":"","code":"ec.inspect(wt, target = \"opts\", ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chart to JSON — ec.inspect","text":"wt echarty widget returned ec.init target type resulting value:      'opts' - htmlwidget options JSON (default)     'full' - entire htmlwidget JSON     'data' - info chart's embedded data (char vector) ... Additional attributes pass toJSON 'file' - optional file name save target='full'","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chart to JSON — ec.inspect","text":"JSON string, except target 'data' - character vector.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chart to JSON — ec.inspect","text":"Must invoked chained last command. target='full' export JavaScript custom code, ready used import. See also ec.fromJson.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chart to JSON — ec.inspect","text":"","code":"# extract JSON json <- cars |> ec.init() |> ec.inspect() json #> { #>   \"dataset\": [ #>     { #>       \"dimensions\": [\"speed\", \"dist\"], #>       \"source\": [ #>         [ #>           4, #>           2 #>         ], #>         [ #>           4, #>           10 #>         ], #>         [ #>           7, #>           4 #>         ], #>         [ #>           7, #>           22 #>         ], #>         [ #>           8, #>           16 #>         ], #>         [ #>           9, #>           10 #>         ], #>         [ #>           10, #>           18 #>         ], #>         [ #>           10, #>           26 #>         ], #>         [ #>           10, #>           34 #>         ], #>         [ #>           11, #>           17 #>         ], #>         [ #>           11, #>           28 #>         ], #>         [ #>           12, #>           14 #>         ], #>         [ #>           12, #>           20 #>         ], #>         [ #>           12, #>           24 #>         ], #>         [ #>           12, #>           28 #>         ], #>         [ #>           13, #>           26 #>         ], #>         [ #>           13, #>           34 #>         ], #>         [ #>           13, #>           34 #>         ], #>         [ #>           13, #>           46 #>         ], #>         [ #>           14, #>           26 #>         ], #>         [ #>           14, #>           36 #>         ], #>         [ #>           14, #>           60 #>         ], #>         [ #>           14, #>           80 #>         ], #>         [ #>           15, #>           20 #>         ], #>         [ #>           15, #>           26 #>         ], #>         [ #>           15, #>           54 #>         ], #>         [ #>           16, #>           32 #>         ], #>         [ #>           16, #>           40 #>         ], #>         [ #>           17, #>           32 #>         ], #>         [ #>           17, #>           40 #>         ], #>         [ #>           17, #>           50 #>         ], #>         [ #>           18, #>           42 #>         ], #>         [ #>           18, #>           56 #>         ], #>         [ #>           18, #>           76 #>         ], #>         [ #>           18, #>           84 #>         ], #>         [ #>           19, #>           36 #>         ], #>         [ #>           19, #>           46 #>         ], #>         [ #>           19, #>           68 #>         ], #>         [ #>           20, #>           32 #>         ], #>         [ #>           20, #>           48 #>         ], #>         [ #>           20, #>           52 #>         ], #>         [ #>           20, #>           56 #>         ], #>         [ #>           20, #>           64 #>         ], #>         [ #>           22, #>           66 #>         ], #>         [ #>           23, #>           54 #>         ], #>         [ #>           24, #>           70 #>         ], #>         [ #>           24, #>           92 #>         ], #>         [ #>           24, #>           93 #>         ], #>         [ #>           24, #>           120 #>         ], #>         [ #>           25, #>           85 #>         ] #>       ] #>     } #>   ], #>   \"xAxis\": { #>     \"show\": true, #>     \"type\": \"value\", #>     \"name\": \"speed\" #>   }, #>   \"yAxis\": { #>     \"show\": true, #>     \"type\": \"value\", #>     \"name\": \"dist\" #>   }, #>   \"series\": [ #>     { #>       \"type\": \"scatter\" #>     } #>   ] #> }   # get from JSON and modify plot ec.fromJson(json) |> ec.theme('macarons')  {\"x\":{\"theme\":\"macarons\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Axis — ec.paxis","title":"Parallel Axis — ec.paxis","text":"Build 'parallelAxis' parallel chart","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Axis — ec.paxis","text":"","code":"ec.paxis(dfwt = NULL, cols = NULL, minmax = TRUE, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel Axis — ec.paxis","text":"dfwt echarty widget data.frame(regular grouped) cols string vector columns names desired order minmax Boolean add max/min limits , default TRUE ... Additional attributes parallelAxis.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel Axis — ec.paxis","text":"list, see format parallelAxis.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel Axis — ec.paxis","text":"function chained ec.init used data.frame","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.paxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Axis — ec.paxis","text":"","code":"iris |> dplyr::group_by(Species) |>    # chained ec.init(ctype= 'parallel', series.param= list(lineStyle= list(width=3))) |>  ec.paxis(cols= c('Petal.Length','Petal.Width','Sepal.Width'))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\"],\"source\":[[5.1,3.5,1.4,0.2,\"setosa\"],[4.9,3,1.4,0.2,\"setosa\"],[4.7,3.2,1.3,0.2,\"setosa\"],[4.6,3.1,1.5,0.2,\"setosa\"],[5,3.6,1.4,0.2,\"setosa\"],[5.4,3.9,1.7,0.4,\"setosa\"],[4.6,3.4,1.4,0.3,\"setosa\"],[5,3.4,1.5,0.2,\"setosa\"],[4.4,2.9,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.1,\"setosa\"],[5.4,3.7,1.5,0.2,\"setosa\"],[4.8,3.4,1.6,0.2,\"setosa\"],[4.8,3,1.4,0.1,\"setosa\"],[4.3,3,1.1,0.1,\"setosa\"],[5.8,4,1.2,0.2,\"setosa\"],[5.7,4.4,1.5,0.4,\"setosa\"],[5.4,3.9,1.3,0.4,\"setosa\"],[5.1,3.5,1.4,0.3,\"setosa\"],[5.7,3.8,1.7,0.3,\"setosa\"],[5.1,3.8,1.5,0.3,\"setosa\"],[5.4,3.4,1.7,0.2,\"setosa\"],[5.1,3.7,1.5,0.4,\"setosa\"],[4.6,3.6,1,0.2,\"setosa\"],[5.1,3.3,1.7,0.5,\"setosa\"],[4.8,3.4,1.9,0.2,\"setosa\"],[5,3,1.6,0.2,\"setosa\"],[5,3.4,1.6,0.4,\"setosa\"],[5.2,3.5,1.5,0.2,\"setosa\"],[5.2,3.4,1.4,0.2,\"setosa\"],[4.7,3.2,1.6,0.2,\"setosa\"],[4.8,3.1,1.6,0.2,\"setosa\"],[5.4,3.4,1.5,0.4,\"setosa\"],[5.2,4.1,1.5,0.1,\"setosa\"],[5.5,4.2,1.4,0.2,\"setosa\"],[4.9,3.1,1.5,0.2,\"setosa\"],[5,3.2,1.2,0.2,\"setosa\"],[5.5,3.5,1.3,0.2,\"setosa\"],[4.9,3.6,1.4,0.1,\"setosa\"],[4.4,3,1.3,0.2,\"setosa\"],[5.1,3.4,1.5,0.2,\"setosa\"],[5,3.5,1.3,0.3,\"setosa\"],[4.5,2.3,1.3,0.3,\"setosa\"],[4.4,3.2,1.3,0.2,\"setosa\"],[5,3.5,1.6,0.6,\"setosa\"],[5.1,3.8,1.9,0.4,\"setosa\"],[4.8,3,1.4,0.3,\"setosa\"],[5.1,3.8,1.6,0.2,\"setosa\"],[4.6,3.2,1.4,0.2,\"setosa\"],[5.3,3.7,1.5,0.2,\"setosa\"],[5,3.3,1.4,0.2,\"setosa\"],[7,3.2,4.7,1.4,\"versicolor\"],[6.4,3.2,4.5,1.5,\"versicolor\"],[6.9,3.1,4.9,1.5,\"versicolor\"],[5.5,2.3,4,1.3,\"versicolor\"],[6.5,2.8,4.6,1.5,\"versicolor\"],[5.7,2.8,4.5,1.3,\"versicolor\"],[6.3,3.3,4.7,1.6,\"versicolor\"],[4.9,2.4,3.3,1,\"versicolor\"],[6.6,2.9,4.6,1.3,\"versicolor\"],[5.2,2.7,3.9,1.4,\"versicolor\"],[5,2,3.5,1,\"versicolor\"],[5.9,3,4.2,1.5,\"versicolor\"],[6,2.2,4,1,\"versicolor\"],[6.1,2.9,4.7,1.4,\"versicolor\"],[5.6,2.9,3.6,1.3,\"versicolor\"],[6.7,3.1,4.4,1.4,\"versicolor\"],[5.6,3,4.5,1.5,\"versicolor\"],[5.8,2.7,4.1,1,\"versicolor\"],[6.2,2.2,4.5,1.5,\"versicolor\"],[5.6,2.5,3.9,1.1,\"versicolor\"],[5.9,3.2,4.8,1.8,\"versicolor\"],[6.1,2.8,4,1.3,\"versicolor\"],[6.3,2.5,4.9,1.5,\"versicolor\"],[6.1,2.8,4.7,1.2,\"versicolor\"],[6.4,2.9,4.3,1.3,\"versicolor\"],[6.6,3,4.4,1.4,\"versicolor\"],[6.8,2.8,4.8,1.4,\"versicolor\"],[6.7,3,5,1.7,\"versicolor\"],[6,2.9,4.5,1.5,\"versicolor\"],[5.7,2.6,3.5,1,\"versicolor\"],[5.5,2.4,3.8,1.1,\"versicolor\"],[5.5,2.4,3.7,1,\"versicolor\"],[5.8,2.7,3.9,1.2,\"versicolor\"],[6,2.7,5.1,1.6,\"versicolor\"],[5.4,3,4.5,1.5,\"versicolor\"],[6,3.4,4.5,1.6,\"versicolor\"],[6.7,3.1,4.7,1.5,\"versicolor\"],[6.3,2.3,4.4,1.3,\"versicolor\"],[5.6,3,4.1,1.3,\"versicolor\"],[5.5,2.5,4,1.3,\"versicolor\"],[5.5,2.6,4.4,1.2,\"versicolor\"],[6.1,3,4.6,1.4,\"versicolor\"],[5.8,2.6,4,1.2,\"versicolor\"],[5,2.3,3.3,1,\"versicolor\"],[5.6,2.7,4.2,1.3,\"versicolor\"],[5.7,3,4.2,1.2,\"versicolor\"],[5.7,2.9,4.2,1.3,\"versicolor\"],[6.2,2.9,4.3,1.3,\"versicolor\"],[5.1,2.5,3,1.1,\"versicolor\"],[5.7,2.8,4.1,1.3,\"versicolor\"],[6.3,3.3,6,2.5,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[7.1,3,5.9,2.1,\"virginica\"],[6.3,2.9,5.6,1.8,\"virginica\"],[6.5,3,5.8,2.2,\"virginica\"],[7.6,3,6.6,2.1,\"virginica\"],[4.9,2.5,4.5,1.7,\"virginica\"],[7.3,2.9,6.3,1.8,\"virginica\"],[6.7,2.5,5.8,1.8,\"virginica\"],[7.2,3.6,6.1,2.5,\"virginica\"],[6.5,3.2,5.1,2,\"virginica\"],[6.4,2.7,5.3,1.9,\"virginica\"],[6.8,3,5.5,2.1,\"virginica\"],[5.7,2.5,5,2,\"virginica\"],[5.8,2.8,5.1,2.4,\"virginica\"],[6.4,3.2,5.3,2.3,\"virginica\"],[6.5,3,5.5,1.8,\"virginica\"],[7.7,3.8,6.7,2.2,\"virginica\"],[7.7,2.6,6.9,2.3,\"virginica\"],[6,2.2,5,1.5,\"virginica\"],[6.9,3.2,5.7,2.3,\"virginica\"],[5.6,2.8,4.9,2,\"virginica\"],[7.7,2.8,6.7,2,\"virginica\"],[6.3,2.7,4.9,1.8,\"virginica\"],[6.7,3.3,5.7,2.1,\"virginica\"],[7.2,3.2,6,1.8,\"virginica\"],[6.2,2.8,4.8,1.8,\"virginica\"],[6.1,3,4.9,1.8,\"virginica\"],[6.4,2.8,5.6,2.1,\"virginica\"],[7.2,3,5.8,1.6,\"virginica\"],[7.4,2.8,6.1,1.9,\"virginica\"],[7.9,3.8,6.4,2,\"virginica\"],[6.4,2.8,5.6,2.2,\"virginica\"],[6.3,2.8,5.1,1.5,\"virginica\"],[6.1,2.6,5.6,1.4,\"virginica\"],[7.7,3,6.1,2.3,\"virginica\"],[6.3,3.4,5.6,2.4,\"virginica\"],[6.4,3.1,5.5,1.8,\"virginica\"],[6,3,4.8,1.8,\"virginica\"],[6.9,3.1,5.4,2.1,\"virginica\"],[6.7,3.1,5.6,2.4,\"virginica\"],[6.9,3.1,5.1,2.3,\"virginica\"],[5.8,2.7,5.1,1.9,\"virginica\"],[6.8,3.2,5.9,2.3,\"virginica\"],[6.7,3.3,5.7,2.5,\"virginica\"],[6.7,3,5.2,2.3,\"virginica\"],[6.3,2.5,5,1.9,\"virginica\"],[6.5,3,5.2,2,\"virginica\"],[6.2,3.4,5.4,2.3,\"virginica\"],[5.9,3,5.1,1.8,\"virginica\"]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"setosa\"}},\"id\":\"setosa\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"versicolor\"}},\"id\":\"versicolor\"},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"Species\",\"=\":\"virginica\"}},\"id\":\"virginica\"}],\"series\":[{\"type\":\"parallel\",\"datasetIndex\":1,\"name\":\"setosa\",\"lineStyle\":{\"width\":3}},{\"type\":\"parallel\",\"datasetIndex\":2,\"name\":\"versicolor\",\"lineStyle\":{\"width\":3}},{\"type\":\"parallel\",\"datasetIndex\":3,\"name\":\"virginica\",\"lineStyle\":{\"width\":3}}],\"legend\":{\"data\":[{\"name\":\"setosa\"},{\"name\":\"versicolor\"},{\"name\":\"virginica\"}]},\"parallelAxis\":[{\"dim\":2,\"name\":\"Petal.Length\",\"max\":6.9,\"min\":1},{\"dim\":3,\"name\":\"Petal.Width\",\"max\":2.5,\"min\":0.1},{\"dim\":1,\"name\":\"Sepal.Width\",\"max\":4.4,\"min\":2}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]} mtcars |> ec.init(ctype= 'parallel',     parallelAxis= ec.paxis(mtcars, cols= c('gear','cyl','hp','carb'), nameRotate= 45),    series.param= list(smooth= TRUE) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"parallelAxis\":[{\"dim\":9,\"name\":\"gear\",\"nameRotate\":45,\"max\":5,\"min\":3},{\"dim\":1,\"name\":\"cyl\",\"nameRotate\":45,\"max\":8,\"min\":4},{\"dim\":3,\"name\":\"hp\",\"nameRotate\":45,\"max\":335,\"min\":52},{\"dim\":10,\"name\":\"carb\",\"nameRotate\":45,\"max\":8,\"min\":1}],\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]}],\"series\":[{\"type\":\"parallel\",\"smooth\":true}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Javascript plugin from URL source — ec.plugjs","title":"Install Javascript plugin from URL source — ec.plugjs","text":"Install Javascript plugin URL source","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Javascript plugin from URL source — ec.plugjs","text":"","code":"ec.plugjs(wt = NULL, source = NULL, ask = FALSE)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Javascript plugin from URL source — ec.plugjs","text":"wt widget add dependency , see createWidget source URL file:// Javascript plugin,  file name suffix '.js'. Default NULL. ask Boolean, ask user download source missing. Default FALSE.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Javascript plugin from URL source — ec.plugjs","text":"widget JS dependency added successful, otherwise input wt","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install Javascript plugin from URL source — ec.plugjs","text":"source URL, plugin file installed optional popup prompt. source file name (file://xxx.js), assumed installed dependency added. Called internally ec.init. recommended use ec.init(load=...) instead ec.plugjs.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.plugjs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Javascript plugin from URL source — ec.plugjs","text":"","code":"# import map plugin and display two (lon,lat) locations if (interactive()) {   ec.init(preset= FALSE,           geo = list(map= 'china-contour', roam= TRUE),           series = list(list(             type= 'scatter', coordinateSystem= 'geo',             symbolSize= 9, itemStyle= list(color= 'red'),             data= list(list(value= c(113, 40)), list(value= c(118, 39))) ))   ) |>    ec.plugjs( paste0('https://raw.githubusercontent.com/apache/echarts/',                     'master/test/data/map/js/china-contour.js') ) }"},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Themes — ec.theme","title":"Themes — ec.theme","text":"Apply pre-built custom coded theme chart","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Themes — ec.theme","text":"","code":"ec.theme(wt, name = \"custom\", code = NULL)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Themes — ec.theme","text":"wt Required echarty widget returned ec.init name Name existing theme file (without extension), name custom theme defined code. code Custom theme JSON formatted string, default NULL.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Themes — ec.theme","text":"echarty widget.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Themes — ec.theme","text":"Just built-themes included folder inst/themes. names dark, gray, jazz, dark-mushroom macarons. entire ECharts theme collection found files copied needed. create custom themes view predefined ones, visit site.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Themes — ec.theme","text":"","code":"mtcars |> ec.init() |> ec.theme('dark-mushroom')  {\"x\":{\"theme\":\"dark-mushroom\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],\"source\":[[21,6,160,110,3.9,2.62,16.46,0,1,4,4],[21,6,160,110,3.9,2.875,17.02,0,1,4,4],[22.8,4,108,93,3.85,2.32,18.61,1,1,4,1],[21.4,6,258,110,3.08,3.215,19.44,1,0,3,1],[18.7,8,360,175,3.15,3.44,17.02,0,0,3,2],[18.1,6,225,105,2.76,3.46,20.22,1,0,3,1],[14.3,8,360,245,3.21,3.57,15.84,0,0,3,4],[24.4,4,146.7,62,3.69,3.19,20,1,0,4,2],[22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2],[19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4],[17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4],[16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3],[17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3],[15.2,8,275.8,180,3.07,3.78,18,0,0,3,3],[10.4,8,472,205,2.93,5.25,17.98,0,0,3,4],[10.4,8,460,215,3,5.424,17.82,0,0,3,4],[14.7,8,440,230,3.23,5.345,17.42,0,0,3,4],[32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1],[30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2],[33.9,4,71.09999999999999,65,4.22,1.835,19.9,1,1,4,1],[21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1],[15.5,8,318,150,2.76,3.52,16.87,0,0,3,2],[15.2,8,304,150,3.15,3.435,17.3,0,0,3,2],[13.3,8,350,245,3.73,3.84,15.41,0,0,3,4],[19.2,8,400,175,3.08,3.845,17.05,0,0,3,2],[27.3,4,79,66,4.08,1.935,18.9,1,1,4,1],[26,4,120.3,91,4.43,2.14,16.7,0,1,5,2],[30.4,4,95.09999999999999,113,3.77,1.513,16.9,1,1,5,2],[15.8,8,351,264,4.22,3.17,14.5,0,1,5,4],[19.7,6,145,175,3.62,2.77,15.5,0,1,5,6],[15,8,301,335,3.54,3.57,14.6,0,1,5,8],[21.4,4,121,109,4.11,2.78,18.6,1,1,4,2]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"mpg\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"cyl\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}cars |> ec.init() |> ec.theme('mine', code=   '{\"color\": [\"green\",\"#eeaa33\"],      \"backgroundColor\": \"lemonchiffon\"}')  {\"x\":{\"theme\":\"mine\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null},\"themeCode\":\"{\\\"color\\\": [\\\"green\\\",\\\"#eeaa33\\\"], \\n    \\\"backgroundColor\\\": \\\"lemonchiffon\\\"}\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":null,"dir":"Reference","previous_headings":"","what":"Update option lists — ec.upd","title":"Update option lists — ec.upd","text":"Chain commands ec.init add update chart items","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update option lists — ec.upd","text":"","code":"ec.upd(wt, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update option lists — ec.upd","text":"wt echarty widget ... R commands add/update chart option lists","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update option lists — ec.upd","text":"ec.upd makes changes chart already set ec.init. always piped(chained) ec.init. numerical indexes series,visualMap,etc. JS-counted starting 0.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.upd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update option lists — ec.upd","text":"","code":"library(dplyr) df <- data.frame(x= 1:30, y= runif(30, 5, 10), cat= sample(LETTERS[1:3],size=30,replace=TRUE)) |>       mutate(lwr= y-runif(30, 1, 3), upr= y+runif(30, 2, 4)) band.df <- df  |> group_by(cat) |> group_split()  df |> group_by(cat) |>  ec.init(load='custom', ctype='line',          xAxis=list(data=c(0,unique(df$x)), boundaryGap=FALSE) ) |>  ec.upd({   for(ii in 1:length(band.df))   # add bands to their respective groups     series <- append(series,          ecr.band(band.df[[ii]], 'lwr', 'upr', type='stack', smooth=FALSE,          name= unique(band.df[[ii]]$cat), areaStyle= list(color=c('blue','green','yellow')[ii])) ) }) #> Error in eval(substitute(expr), e): object 'band.df' not found"},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions — ec.util","title":"Utility functions — ec.util","text":"tabset, table layout, support GIS shapefiles library 'sf'","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions — ec.util","text":"","code":"ec.util(..., cmd = \"sf.series\", js = NULL, event = \"click\")"},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions — ec.util","text":"... Optional parameters command  sf.series - see points, polylines, polygons(itemStyle). tabset parameters format name1=chart1, name2=chart2, see example cmd utility command, see Details js optional JavaScript function, default NULL. event optional event name cmd='morph'.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility functions — ec.util","text":"cmd = 'sf.series'  Build leaflet geo map series shapefiles.  Supported types: POINT, MULTIPOINT, LINESTRING, MULTILINESTRING, POLYGON, MULTIPOLYGON   Coordinate system leaflet(default), geo cartesian3D (POINT(xyz))  Limitations:     polygons can name tooltip,       assumes Geodetic CRS WGS 84, conversion use st_transform crs=4326.  Parameters:     df - value st_read     nid - optional column name name-id used tooltips     cs - optional coordinateSystem value, default 'leaflet'     verbose - optional, print shapefile item names console  Returns list chart seriescmd = 'sf.bbox'  Returns JavaScript code position map inside bounding box st_bbox, leaflet .cmd = 'sf.unzip'  Unzips remote file returns local file name unzipped .shp file     url - URL remote zipped shapefile     shp - optional name .shp file inside ZIP file multiple exist. add file extension. cmd = 'geojson'   Custom series list geoJson objects     geojson - object fromJSON     cs - optional coordinateSystem value, default 'leaflet'     ppfill - optional fill color like '#F00', NULL -fill, Points Polygons     nid - optional feature property item name used tooltips     ... - optional custom series attributes like itemStyle  Can display also geoJson feature properties: color; lwidth, ldash (lines); ppfill, radius (points)cmd = 'layout'   Multiple charts table-like rows/columns format     ... - List charts     title - optional title entire set     rows - optional number rows     cols - optional number columns  Returns container div rmarkdown, otherwise browsable.  3-4 charts one use multiple series within grid.   greater number charts ec.util(cmd='layout') comes handycmd = 'tabset'      ... - list name/chart pairs like n1=chart1, n2=chart2, tab may contain chart.     tabStyle - tab style string, see default tabStyle variable code  Returns ) tagList tabs pipe without '...' params, see example  Returns B) browsable '...' params provided usercmd = 'button'   UI button execute JS function,     text - button label     js - JS function string     ... - optional parameters rect element  Returns graphic.elements-rect element.cmd = 'morph'      ... - list charts chart option lists     event - name event switching charts. Default click.  Returns chart ability morph chartscmd = 'fullscreen'   toolbox feature toggle fullscreen /. Works browser, RStudio.cmd = 'rescale'      v - input vector numeric values rescale     t - target range c(min,max), numeric vector twocmd = 'level'   Calculate vertical levels timeline line charts, returns numeric vector     df - data.frame columns     - name '' column     - name '' column","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ec.util.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions — ec.util","text":"","code":"library(dplyr) if (interactive()) {  # comm.out: Fedora errors about some 'browser'   library(sf)   fname <- system.file(\"shape/nc.shp\", package=\"sf\")   nc <- as.data.frame(st_read(fname))   ec.init(load= c('leaflet', 'custom'),  # load custom for polygons      js= ec.util(cmd= 'sf.bbox', bbox= st_bbox(nc$geometry)),      series= ec.util(cmd= 'sf.series', df= nc, nid= 'NAME', itemStyle= list(opacity=0.3)),      tooltip= list(formatter= '{a}')   )    htmltools::browsable(     lapply(iris |> group_by(Species) |> group_split(),             function(x) {      x |> ec.init(ctype= 'scatter', title= list(text= unique(x$Species)))            }) |>      ec.util(cmd= 'tabset')   )    p1 <- cars |> ec.init(grid= list(top=26), height=333)  # move chart up   p2 <- mtcars |> arrange(mpg) |> ec.init(height=333, ctype='line')   ec.util(cmd= 'tabset', cars= p1, mtcars= p2) }  cars |> ec.init(  graphic = list(    ec.util(cmd='button', text='see type', right='center', top=20,      js=\"function(a) {op=ec_option(echwid); alert(op.series[0].type);}\")  ) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"graphic\":[{\"type\":\"rect\",\"zlevel\":4,\"shape\":{\"height\":20,\"width\":80,\"r\":5},\"style\":{\"fill\":\"lightgray\"},\"textContent\":{\"zlevel\":4,\"style\":{\"text\":\"see type\",\"fill\":\"black\"}},\"textConfig\":{\"position\":\"inside\"},\"onclick\":\"function(a) {op=ec_option(echwid); alert(op.series[0].type);}\",\"text\":\"see type\",\"right\":\"center\",\"top\":20}],\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.graphic.0.onclick\"],\"jsHooks\":[]} lapply(list('dark','macarons','gray','jazz','dark-mushroom'),   function(x) cars |> ec.init(grid= list(bottom=0)) |> ec.theme(x) ) |> ec.util(cmd='layout', cols= 2, title= 'my layout')         my layout                         {\"x\":{\"theme\":\"dark\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"grid\":{\"bottom\":0},\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}                   {\"x\":{\"theme\":\"macarons\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"grid\":{\"bottom\":0},\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}                         {\"x\":{\"theme\":\"gray\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"grid\":{\"bottom\":0},\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}                   {\"x\":{\"theme\":\"jazz\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"grid\":{\"bottom\":0},\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}                         {\"x\":{\"theme\":\"dark-mushroom\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"grid\":{\"bottom\":0},\"dataset\":[{\"dimensions\":[\"speed\",\"dist\"],\"source\":[[4,2],[4,10],[7,4],[7,22],[8,16],[9,10],[10,18],[10,26],[10,34],[11,17],[11,28],[12,14],[12,20],[12,24],[12,28],[13,26],[13,34],[13,34],[13,46],[14,26],[14,36],[14,60],[14,80],[15,20],[15,26],[15,54],[16,32],[16,40],[17,32],[17,40],[17,50],[18,42],[18,56],[18,76],[18,84],[19,36],[19,46],[19,68],[20,32],[20,48],[20,52],[20,56],[20,64],[22,66],[23,54],[24,70],[24,92],[24,93],[24,120],[25,85]]}],\"xAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"speed\"},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"dist\"},\"series\":[{\"type\":\"scatter\"}]},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[],\"jsHooks\":[]}            colors <- c(\"blue\",\"red\",\"green\") cyls <- as.character(sort(unique(mtcars$cyl))) sers <- lapply(mtcars |> group_by(cyl) |> group_split(), \\(x) {   cyl <- as.character(unique(x$cyl))   list(type='scatter', id=cyl, dataGroupId=cyl,         data= ec.data(x |> select(mpg,hp)),        universalTransition= TRUE) }) oscatter <- list(   title= list(subtext='click points to morph'),    color= colors, tooltip= list(show=TRUE),   xAxis= list(scale=TRUE, name='mpg'), yAxis= list(scale=TRUE, name='hp'),   series= sers ) opie <- list(   title= list(text= 'Average hp'),    color= colors, tooltip= list(show=TRUE),   series= list(list(     type= 'pie', label= list(show=TRUE), colorBy= 'data',     data= ec.data(mtcars |> group_by(cyl) |> summarize(value= mean(hp)) |>        mutate(groupId= as.character(cyl), name= as.character(cyl)),'names'),     universalTransition= list(enabled=TRUE, seriesKey= cyls)   )) ) ec.util(cmd='morph', oscatter, opie)   {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"title\":{\"subtext\":\"click points to morph\"},\"color\":[\"blue\",\"red\",\"green\"],\"tooltip\":{\"show\":true},\"xAxis\":{\"scale\":true,\"name\":\"mpg\"},\"yAxis\":{\"scale\":true,\"name\":\"hp\"},\"series\":[{\"type\":\"scatter\",\"id\":\"4\",\"dataGroupId\":\"4\",\"data\":[[22.8,93],[24.4,62],[22.8,95],[32.4,66],[30.4,52],[33.9,65],[21.5,97],[27.3,66],[26,91],[30.4,113],[21.4,109]],\"universalTransition\":true},{\"type\":\"scatter\",\"id\":\"6\",\"dataGroupId\":\"6\",\"data\":[[21,110],[21,110],[21.4,110],[18.1,105],[19.2,123],[17.8,123],[19.7,175]],\"universalTransition\":true},{\"type\":\"scatter\",\"id\":\"8\",\"dataGroupId\":\"8\",\"data\":[[18.7,175],[14.3,245],[16.4,180],[17.3,180],[15.2,180],[10.4,205],[10.4,215],[14.7,230],[15.5,150],[15.2,150],[13.3,245],[19.2,175],[15.8,264],[15,335]],\"universalTransition\":true}],\"morph\":[{\"title\":{\"subtext\":\"click points to morph\"},\"color\":[\"blue\",\"red\",\"green\"],\"tooltip\":{\"show\":true},\"xAxis\":{\"scale\":true,\"name\":\"mpg\"},\"yAxis\":{\"scale\":true,\"name\":\"hp\"},\"series\":[{\"type\":\"scatter\",\"id\":\"4\",\"dataGroupId\":\"4\",\"data\":[[22.8,93],[24.4,62],[22.8,95],[32.4,66],[30.4,52],[33.9,65],[21.5,97],[27.3,66],[26,91],[30.4,113],[21.4,109]],\"universalTransition\":true},{\"type\":\"scatter\",\"id\":\"6\",\"dataGroupId\":\"6\",\"data\":[[21,110],[21,110],[21.4,110],[18.1,105],[19.2,123],[17.8,123],[19.7,175]],\"universalTransition\":true},{\"type\":\"scatter\",\"id\":\"8\",\"dataGroupId\":\"8\",\"data\":[[18.7,175],[14.3,245],[16.4,180],[17.3,180],[15.2,180],[10.4,205],[10.4,215],[14.7,230],[15.5,150],[15.2,150],[13.3,245],[19.2,175],[15.8,264],[15,335]],\"universalTransition\":true}]},{\"title\":{\"text\":\"Average hp\"},\"color\":[\"blue\",\"red\",\"green\"],\"tooltip\":{\"show\":true},\"series\":[{\"type\":\"pie\",\"label\":{\"show\":true},\"colorBy\":\"data\",\"data\":[{\"cyl\":4,\"value\":82.63636363636364,\"groupId\":\"4\",\"name\":\"4\"},{\"cyl\":6,\"value\":122.2857142857143,\"groupId\":\"6\",\"name\":\"6\"},{\"cyl\":8,\"value\":209.2142857142857,\"groupId\":\"8\",\"name\":\"8\"}],\"universalTransition\":{\"enabled\":true,\"seriesKey\":[\"4\",\"6\",\"8\"]}}]}]},\"on\":[{\"event\":\"click\",\"handler\":\"function(event) {\\n        opt= this.getOption();\\n        keep= opt.morph;\\n        for(i=0; i<keep.length; i++) {\\n    \\t    if (opt.series[0].type==keep[i].series[0].type) {\\n    \\t      next= (i+1) % keep.length;\\n       \\t\\t  optcurr= Object.assign({}, keep[next]);\\n       \\t\\t  break;\\n    \\t    }\\n    \\t  };\\n    \\t  if (!optcurr) return;\\n    \\t  optcurr.morph= keep;\\n    \\t  this.setOption(optcurr, true);\\n      }\"}]},\"evals\":[\"on.0.handler\"],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":null,"dir":"Reference","previous_headings":"","what":"Area band — ecr.band","title":"Area band — ecr.band","text":"'custom' serie lower upper boundaries","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area band — ecr.band","text":"","code":"ecr.band(df = NULL, lower = NULL, upper = NULL, type = \"polygon\", ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area band — ecr.band","text":"df data.frame lower upper numerical columns first column X coordinates. lower column name band's lower boundary (string). upper column name band's upper boundary (string). type Type rendering 'polygon' - drawing polygon polyline upper/lower points (default) 'stack' - two stacked lines ... attributes serie","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area band — ecr.band","text":"list one serie type='polygon', list two series type='stack'","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Area band — ecr.band","text":"type='polygon': coordinates two boundaries chained one polygon.     xAxis type 'category' 'value'.     Set fill color attribute color. type='stack': two stacked lines drawn, lower customizable areaStyle.     xAxis type 'category' !      Set fill color attribute areaStyle$color.     Optional tooltip formatter available band[[1]]$tipFmt. Optional parameter name, given, show legend. Legend merges series name one item.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.band.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area band — ecr.band","text":"","code":"set.seed(222) df <- data.frame( x = 1:10, y = round(runif(10, 5, 10),2)) |>   dplyr::mutate(lwr= round(y-runif(10, 1, 3),2), upr= round(y+runif(10, 2, 4),2) ) banda <- ecr.band(df, 'lwr', 'upr', type='stack', name='stak', areaStyle= list(color='green')) #banda <- ecr.band(df, 'lwr', 'upr', type='polygon', name='poly1')  df |> ec.init( load='custom', # polygon only   legend= list(show= TRUE),   xAxis= list(type='category', boundaryGap=FALSE), # stack   #xAxis= list(scale=T, min='dataMin'),            # polygon    series= append(     list(list(type='line', color='blue', name='line1')),     banda   ),   tooltip= list(trigger='axis', formatter= banda[[1]]$tipFmt) )  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"legend\":{\"show\":true},\"xAxis\":{\"type\":\"category\",\"boundaryGap\":false,\"name\":\"x\"},\"series\":[{\"type\":\"line\",\"color\":\"blue\",\"name\":\"line1\"},{\"type\":\"line\",\"name\":\"stak\",\"stack\":\"stak\",\"showSymbol\":false,\"lineStyle\":{\"width\":0},\"data\":[[1,7.86],[2,4.18],[3,6.28],[4,2.59],[5,6.7],[6,8.68],[7,4.43],[8,6],[9,6.64],[10,4.29]],\"tipFmt\":\"(ss) => { lo=''; hi=''; lin='';\\nss.map(o => { nn = o.dimensionNames[1]; vv= o.value[1];\\nif (nn==='.s.lo') lo= vv; \\nelse if (nn==='.s.hi') hi= vv;\\nelse lin= '<br>line <b>'+vv+'<\\/b>'; });\\nstr='high <b>'+(lo+hi)+'<\\/b>'+lin+'<br>low <b>'+lo+'<\\/b>'; return str;}\",\"dimensions\":[\"x\",\".s.lo\"]},{\"type\":\"line\",\"name\":\"stak\",\"areaStyle\":{\"color\":\"green\"},\"stack\":\"stak\",\"showSymbol\":false,\"lineStyle\":{\"width\":0},\"data\":[[1,5.509999999999999,13.37],[2,3.67,7.85],[3,3.409999999999999,9.69],[4,5.43,8.02],[5,5.37,12.07],[6,5.030000000000001,13.71],[7,5.780000000000001,10.21],[8,4.039999999999999,10.04],[9,4.070000000000001,10.71],[10,5.239999999999999,9.529999999999999]],\"dimensions\":[\"x\",\".s.hi\",\".s.tip\"]}],\"tooltip\":{\"trigger\":\"axis\",\"formatter\":\"(ss) => { lo=''; hi=''; lin='';\\nss.map(o => { nn = o.dimensionNames[1]; vv= o.value[1];\\nif (nn==='.s.lo') lo= vv; \\nelse if (nn==='.s.hi') hi= vv;\\nelse lin= '<br>line <b>'+vv+'<\\/b>'; });\\nstr='high <b>'+(lo+hi)+'<\\/b>'+lin+'<br>low <b>'+lo+'<\\/b>'; return str;}\"},\"dataset\":[{\"dimensions\":[\"x\",\"y\",\"lwr\",\"upr\"],\"source\":[[1,9.66,7.86,13.37],[2,5.33,4.18,7.85],[3,7.5,6.28,9.69],[4,5,2.59,8.02],[5,9.58,6.7,12.07],[6,9.789999999999999,8.68,13.71],[7,6.76,4.43,10.21],[8,7.1,6,10.04],[9,7.87,6.64,10.71],[10,5.72,4.29,9.529999999999999]]}],\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"y\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.1.tipFmt\",\"opts.tooltip.formatter\"],\"jsHooks\":[]}"},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":null,"dir":"Reference","previous_headings":"","what":"Error bars — ecr.ebars","title":"Error bars — ecr.ebars","text":"Custom series display error-bars scatter, bar line series","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error bars — ecr.ebars","text":"","code":"ecr.ebars(wt, encode = list(x = 1, y = c(2, 3, 4)), hwidth = 6, ...)"},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error bars — ecr.ebars","text":"wt echarty widget add error bars , see ec.init. encode Column selection axes (x & y) vectors, see encode hwidth Half-width error bar pixels, default 6. ... parameters custom serie","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error bars — ecr.ebars","text":"widget error bars added successful, otherwise input widget","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Error bars — ecr.ebars","text":"Command called ec.init main series set.ecr.ebars custom series, ec.init(load='custom') required.  Horizontal vertical layouts supported, just switch encode values x y series ecr.ebars. default tooltip format showing value, high & low. Grouped bar series supported. Non-grouped series shown formatter riErrBarSimple instead ecr.ebars. limited vertical , see example . limitations:     manually add axis type='category' needed     error bars name data grouped     legend select/deselect re-position grouped error bars","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecr.ebars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error bars — ecr.ebars","text":"","code":"library(dplyr) df <- mtcars |> group_by(cyl,gear) |> summarise(avg.mpg= round(mean(mpg),2)) |>   mutate(low = round(avg.mpg-cyl*runif(1),2),           high= round(avg.mpg+cyl*runif(1),2)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument. ec.init(df, load= 'custom', ctype= 'bar',       xAxis= list(type='category'), tooltip= list(show=TRUE)) |> ecr.ebars(encode= list(y=c('avg.mpg','low','high'), x='gear'))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"xAxis\":{\"type\":\"category\",\"name\":\"gear\"},\"tooltip\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"cyl\",\"gear\",\"avg.mpg\",\"low\",\"high\"],\"source\":[[4,3,21.5,21.03,23.65],[4,4,26.92,26.45,29.07],[4,5,28.2,27.73,30.35],[6,3,19.75,15.67,22.77],[6,4,19.75,15.67,22.77],[6,5,19.7,15.62,22.72],[8,3,15.05,14.87,22.62],[8,5,15.4,15.22,22.97]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"type\":\"bar\",\"datasetIndex\":1,\"name\":\"4\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"bar\",\"datasetIndex\":2,\"name\":\"6\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"bar\",\"datasetIndex\":3,\"name\":\"8\",\"encode\":{\"x\":1,\"y\":2}},{\"type\":\"custom\",\"datasetIndex\":1,\"encode\":{\"y\":[2,3,4],\"x\":1},\"renderItem\":\"riErrBars\",\"name\":\"4\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}},{\"type\":\"custom\",\"datasetIndex\":2,\"encode\":{\"y\":[2,3,4],\"x\":1},\"renderItem\":\"riErrBars\",\"name\":\"6\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}},{\"type\":\"custom\",\"datasetIndex\":3,\"encode\":{\"y\":[2,3,4],\"x\":1},\"renderItem\":\"riErrBars\",\"name\":\"8\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"yAxis\":{\"show\":true,\"type\":\"value\",\"name\":\"avg.mpg\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.3.renderItem\",\"opts.series.3.tooltip.formatter\",\"opts.series.4.renderItem\",\"opts.series.4.tooltip.formatter\",\"opts.series.5.renderItem\",\"opts.series.5.tooltip.formatter\"],\"jsHooks\":[]}#ecr.ebars(encode= list(y=c(3,4,5), x=2))  # ok: data indexes  # same but horizontal ec.init(df, load= 'custom',   yAxis= list(type='category'), tooltip= list(show=TRUE),   series.param= list(type='bar', encode= list(x='avg.mpg', y='gear') )) |> ecr.ebars(encode= list(x=c('avg.mpg','low','high'), y='gear'))  {\"x\":{\"theme\":\"\",\"draw\":true,\"renderer\":\"canvas\",\"locale\":\"EN\",\"useDirtyRect\":false,\"jcode\":null,\"dbg\":false,\"opts\":{\"yAxis\":{\"type\":\"category\",\"name\":\"gear\"},\"tooltip\":{\"show\":true},\"dataset\":[{\"dimensions\":[\"cyl\",\"gear\",\"avg.mpg\",\"low\",\"high\"],\"source\":[[4,3,21.5,21.03,23.65],[4,4,26.92,26.45,29.07],[4,5,28.2,27.73,30.35],[6,3,19.75,15.67,22.77],[6,4,19.75,15.67,22.77],[6,5,19.7,15.62,22.72],[8,3,15.05,14.87,22.62],[8,5,15.4,15.22,22.97]]},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":4}},\"id\":4},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":6}},\"id\":6},{\"transform\":{\"type\":\"filter\",\"config\":{\"dimension\":\"cyl\",\"=\":8}},\"id\":8}],\"series\":[{\"datasetIndex\":1,\"name\":\"4\",\"type\":\"bar\",\"encode\":{\"x\":\"avg.mpg\",\"y\":\"gear\"}},{\"datasetIndex\":2,\"name\":\"6\",\"type\":\"bar\",\"encode\":{\"x\":\"avg.mpg\",\"y\":\"gear\"}},{\"datasetIndex\":3,\"name\":\"8\",\"type\":\"bar\",\"encode\":{\"x\":\"avg.mpg\",\"y\":\"gear\"}},{\"type\":\"custom\",\"datasetIndex\":1,\"encode\":{\"x\":[2,3,4],\"y\":1},\"renderItem\":\"riErrBars\",\"name\":\"4\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}},{\"type\":\"custom\",\"datasetIndex\":2,\"encode\":{\"x\":[2,3,4],\"y\":1},\"renderItem\":\"riErrBars\",\"name\":\"6\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}},{\"type\":\"custom\",\"datasetIndex\":3,\"encode\":{\"x\":[2,3,4],\"y\":1},\"renderItem\":\"riErrBars\",\"name\":\"8\",\"z\":3,\"itemStyle\":{\"borderWidth\":1.5,\"color\":\"brown\",\"borderDashOffset\":6},\"tooltip\":{\"formatter\":\"function(x) {var sprintf= (template, vals) => { j=0; if (template=='%@') return vals[j++]; return template.replace(/%@|%L@|%LR@|%R@|%R2@|%M@/g, (m) => {   if (m=='%@') return vals[j++];   if (m=='%L@') return Number(vals[j++]).toLocaleString();   if (m=='%LR@') return Math.round(Number(vals[j++])).toLocaleString();   if (m=='%R@') return Math.round(Number(vals[j++]));   if (m=='%R2@') return Number(vals[j++]).toFixed(2);   if (m=='%M@') return x.marker; }); };ss=[2,3,4]; vv= ss.map((e) => {    if (e<0) return x.value ? x.value : x;   i= Math.floor(e);   return x.value!=null ? x.value[i] :           x.data!=null  ? x.data[i] :           x[i]!=null    ? x[i] : `no data` }); if (vv.length > 0)   vv = ss.map((e,idx) => {     if (typeof vv[idx] != 'object') return vv[idx];     f= Math.round(e % 1 *10) -1;     return vv[idx].value[f];   });  vv= vv.map(e => isNaN(e) | !e ? e : e* 1 );c= sprintf(`<br>value <b>%@<\\/b> <br>range <b>%@<\\/b> to <b>%@<\\/b>`, vv); return c; }\"}}],\"legend\":{\"data\":[{\"name\":\"4\"},{\"name\":\"6\"},{\"name\":\"8\"}]},\"xAxis\":{\"show\":true,\"name\":\"avg.mpg\",\"type\":\"value\"}},\"settings\":{\"crosstalk_key\":null,\"crosstalk_group\":null}},\"evals\":[\"opts.series.3.renderItem\",\"opts.series.3.tooltip.formatter\",\"opts.series.4.renderItem\",\"opts.series.4.tooltip.formatter\",\"opts.series.5.renderItem\",\"opts.series.5.tooltip.formatter\"],\"jsHooks\":[]} # ----- riErrBarSimple ------ df <- mtcars |> mutate(name= row.names(mtcars), hi= hp-drat*3, lo= hp+wt*3) |>    filter(cyl==4) |> select(name,hp,hi,lo) ec.init(df, load= 'custom', legend= list(show=TRUE)) |> ec.upd({ series <- append(series, list(   list(type= 'custom', name= 'error',     data= ec.data(df |> select(name,hi,lo)),     renderItem= htmlwidgets::JS('riErrBarSimple')   ))) }) #> Error in UseMethod(\"select\"): no applicable method for 'select' applied to an object of class \"function\""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny: Execute a proxy command — ecs.exec","title":"Shiny: Execute a proxy command — ecs.exec","text":"chart changes made, need sent back widget display","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny: Execute a proxy command — ecs.exec","text":"","code":"ecs.exec(proxy, cmd = \"p_merge\")"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny: Execute a proxy command — ecs.exec","text":"proxy ecs.proxy object cmd Name command, default p_merge proxy commands :p_update - add new series axesp_merge - modify add series features like style,marks,etc.p_replace - replace entire chart p_del_serie - delete serie index namep_del_marks - delete marks seriep_append_data - add data existing seriesp_dispatch - send action commands, see documentation","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny: Execute a proxy command — ecs.exec","text":"proxy object update chart.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ecs.exec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny: Execute a proxy command — ecs.exec","text":"","code":"if (interactive()) {    demo(eshiny, package='echarty') }"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.output.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny: UI chart — ecs.output","title":"Shiny: UI chart — ecs.output","text":"Placeholder chart Shiny UI","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny: UI chart — ecs.output","text":"","code":"ecs.output(outputId, width = \"100%\", height = \"400px\")"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny: UI chart — ecs.output","text":"outputId Name output UI element. width, height Must valid CSS unit (like '100%', '400px', 'auto') number, coerced string 'px' appended.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny: UI chart — ecs.output","text":"output render function enables use widget within Shiny applications.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ecs.proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny: Create a proxy — ecs.proxy","title":"Shiny: Create a proxy — ecs.proxy","text":"Create proxy existing chart Shiny UI. allows add, merge, delete elements chart without reloading .","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny: Create a proxy — ecs.proxy","text":"","code":"ecs.proxy(id)"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny: Create a proxy — ecs.proxy","text":"id Target chart id Shiny UI.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.proxy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny: Create a proxy — ecs.proxy","text":"proxy object update chart.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/reference/ecs.render.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny: Plot command to render chart — ecs.render","title":"Shiny: Plot command to render chart — ecs.render","text":"initial rendering chart UI.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny: Plot command to render chart — ecs.render","text":"","code":"ecs.render(wt, env = parent.frame(), quoted = FALSE)"},{"path":"https://helgasoft.github.io/echarty/reference/ecs.render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny: Plot command to render chart — ecs.render","text":"wt echarty widget generate chart. env environment evaluate expr. quoted expr quoted expression? default FALSE.","code":""},{"path":"https://helgasoft.github.io/echarty/reference/ecs.render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny: Plot command to render chart — ecs.render","text":"output render function enables use widget within Shiny applications.","code":""},{"path":[]},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-1641-latest-in-development","dir":"Changelog","previous_headings":"","what":"echarty 1.6.4.1 latest in development","title":"echarty 1.6.4.1 latest in development","text":"upgrade ECharts v.5.5.1, built R v.4.4.2. auto-load 3D plugin 3D attributes present (xAxis3D, bar3D, etc.). auto-set 3D axes data (name, type). change dataset: store column names dimensions instead source. fixed bug ecr.ebars single series. add optional placeholder ‘%@’ title$text timeline. add event parameter ec.util cmd=‘morph’. integrate website library using pkgdown. moved examples.R ‘demo’ folder, ec.examples longer command.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-164-on-cran","dir":"Changelog","previous_headings":"","what":"echarty 1.6.4 on CRAN","title":"echarty 1.6.4 on CRAN","text":"CRAN release: 2024-06-05 upgrade ECharts v.5.5.0, built R v.4.4.0. add nasep parameter ec.data(‘names’) easily set nested lists data.frame. add WebR support test. add explicit leaflet dependency since dependencies changed leaflet v.2.2.0. add optional tooltip formatter (tipFmt) ecr.band. refactoring (leaflet, geo, geoJson, tests). add debug flags messages JS R. fix crosstalk bug checkboxes unselect.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-163","dir":"Changelog","previous_headings":"","what":"echarty 1.6.3","title":"echarty 1.6.3","text":"CRAN release: 2024-01-12 added coder.R demo. correct gridIndex numbering xAxis/yAxis. deprecate tl.series, replace timeline series.param.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-16201","dir":"Changelog","previous_headings":"","what":"echarty 1.6.2.01","title":"echarty 1.6.2.01","text":"make crosstalk work improved ec.clmn. add ecStat built-plugins. removed dataTool.min.js dependencies (yaml). dataset,geo,polar,etc. indexes series now R-counting. built R v.4.3.2. add default coordinateSystem 3D charts. fix datasetIndex timeline 3D series. add encode default, improve ec.init docs. timeline ‘map’: add support dimension visualMap, fix legend,title bugs. removed width/height ‘tabset’, handled ec.init. ecr.band replaced default type ‘stack’ ‘polygon’.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-162","dir":"Changelog","previous_headings":"","what":"echarty 1.6.2","title":"echarty 1.6.2","text":"CRAN release: 2023-10-15 allow axis rename (fix). ec.data grouped boxplots: outliers custom series. ec.clmn expanded usage column names.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-160","dir":"Changelog","previous_headings":"","what":"echarty 1.6.0","title":"echarty 1.6.0","text":"CRAN release: 2023-09-20 ec.paxis chained now. ec.data format=‘boxplot’ optional outliers. ecr.bars better alignment horizontal layout.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-15403","dir":"Changelog","previous_headings":"","what":"echarty 1.5.4.03","title":"echarty 1.5.4.03","text":"upgrade ECharts v.5.4.3, built R v.4.3.1. breaking change ec.init signature. improved ec.inspect ec.fromJson. fixed small bugs improved code. added tests.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-154","dir":"Changelog","previous_headings":"","what":"echarty 1.5.4","title":"echarty 1.5.4","text":"CRAN release: 2023-05-28 ec.util command ‘layout’ updated. changes axis names preset, ec.clmn empty values. problem running Shiny R console: handler registered mouseover.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-153","dir":"Changelog","previous_headings":"","what":"echarty 1.5.3","title":"echarty 1.5.3","text":"upgrade ECharts v.5.4.2. ec.util support map GeoJSON objects, see test-renderers.R. ec.init new parameter xtKey crosstalk (ID-column name). code cleanup ecr.band. expand auto-generated axes names multiple.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-152","dir":"Changelog","previous_headings":"","what":"echarty 1.5.2","title":"echarty 1.5.2","text":"ec.init set default xAxis/yAxis names df. ec.clmn accepts JS functions parameter col. ec.util new command ‘button’ run JS function. fix tabset bug introduced v.1.5.1.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-151","dir":"Changelog","previous_headings":"","what":"echarty 1.5.1","title":"echarty 1.5.1","text":"upgrade ECharts v.5.4.1. remove redundant dependencies, 3 used now. ecr.band default type changed ‘polygon’ ‘stack’. ec.data type ‘boxplot’ remodeled jitter-scatter added. new series.param ec.init additional parameters preset series. make ec.util tabset responsive resizing tabs onclick. fix visualMap piecewise dimension R-counts. set visualMap default min/max values df. echarty.js: add built-‘mouseout’ event.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-150-on-cran","dir":"Changelog","previous_headings":"","what":"echarty 1.5.0 on CRAN","title":"echarty 1.5.0 on CRAN","text":"CRAN release: 2022-11-24 upgrade ECharts v.5.4.0. built R v.4.2.2. added vignette introduction. ecr.ebars fix bug, enhance tooltips. ec.util improvements sf.series. ec.util new commands fullscreen, morph, rescale, level. ec.clmn new options ‘json’ ‘log’. ec.init set R-counting encode/xAxisIndex, visualMap$dimension. fixes global options theme & font, group legend. fixed load=‘world’ series set. new load=‘lottie’, lotties support now built-. reorganize crosstalk code.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-147","dir":"Changelog","previous_headings":"","what":"echarty 1.4.7","title":"echarty 1.4.7","text":"CRAN release: 2022-08-28 ec.util: add POLYGON/MULTIPOINT, new sf.unzip. ec.util: new cmd=‘tabset’ show multiple charts tabs. ec.util: new cmd=‘layout’ multiple charts table-like format. ec.upd replaces ec.snip chained commands. improved ec.data format=‘treeTK’, see example test-.R. support lotties graphic, see web gallery sample. grouping column 2D charts now position.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-146","dir":"Changelog","previous_headings":"","what":"echarty 1.4.6","title":"echarty 1.4.6","text":"upgrade ECharts v.5.3.3. expand docs ec.init. fix timeline tl.series candlestick,boxplot,pictorialBar. add custom attribute groupBy tl.series. add riErrBarSimple renderer. new ec.data formats ‘treePC’ ‘treeTK’ hierarchies. changed ec.data default parameter header FALSE. fixes ec.clmn allow empty col parameter pie,sunburst,etc. add ec.util support map shapefiles thru library ‘sf’.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-145","dir":"Changelog","previous_headings":"","what":"echarty 1.4.5","title":"echarty 1.4.5","text":"CRAN release: 2022-04-01 upgrade ECharts v.5.3.1, GL v.2.0.9. ec.init timeline (tl.series) support 3D. ec.init timeline (tl.series) support map chart. updated ec.clmn single value charts like tree. Scale 0 round values. Scale expanded numeric columns. Decimal indexes combo charts. L: locale number format. LR: locale rounded format. new ec.data format=‘dendrogram’ new dependency data.tree. new ec.data format=‘boxplot’ - helper boxplot data. new package info via command “?echarty”. added new brush/click events demo(eshiny). cleanup echarty.js code events.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-142","dir":"Changelog","previous_headings":"","what":"echarty 1.4.2","title":"echarty 1.4.2","text":"CRAN release: 2021-11-06 replaced magrittr %>% dependency R native pipe |>. added ec.snip option better code readability. removed ec.global, use options(‘echarty.xxx’) instead. added shiny dependency avoid CRAN warnings. added unit tests.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-140","dir":"Changelog","previous_headings":"","what":"echarty 1.4.0","title":"echarty 1.4.0","text":"CRAN release: 2021-10-24 ec.init: renamed ‘group1’ ‘ctype’. Presets parallel chart, xAxis. ec.paxis new helper parallelAxis. ec.clmn placeholders %d %s replaced %@. added initial unit tests.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-032","dir":"Changelog","previous_headings":"","what":"echarty 0.3.2","title":"echarty 0.3.2","text":"ec.init: js parameter now 3 levels execution. ec.clmn: fix order parameters, add message missing data. eshiny demo: button code added modify series.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-0313","dir":"Changelog","previous_headings":"","what":"echarty 0.3.1.3","title":"echarty 0.3.1.3","text":"ec.init: fix ‘3D’ presets groups ‘world’ presets. ec.clmn: added new parameter scale. echarty.js add resize parameter. updates examples.R. upgrade ECharts v.5.2.1, liquidfill v.3.1.0.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-0312","dir":"Changelog","previous_headings":"","what":"echarty 0.3.1.2","title":"echarty 0.3.1.2","text":"ec.init added ECharts parameters locale useDirtyRect.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-031","dir":"Changelog","previous_headings":"","what":"echarty 0.3.1","title":"echarty 0.3.1","text":"CRAN release: 2021-07-30 ec.init param timeline renamed tl.series. tweaks docs, examples echarty.js.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-030","dir":"Changelog","previous_headings":"","what":"echarty 0.3.0","title":"echarty 0.3.0","text":"ec.timegrp merged ec.init removed. ec.init can now build timeline, parameters simplified. ecr.ebars now supports dataset, default tooltip. ecr.band changed parameter ‘two’ ‘type’, improved tooltip support. ec.inspect expanded new parameter ‘data’. eshiny demo updated: brush parameters, new zoom capture. new ec.clmn reference data column(s) formatter,color,symbolSize,etc.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-022","dir":"Changelog","previous_headings":"","what":"echarty 0.2.2","title":"echarty 0.2.2","text":"ec.init default ask=FALSE load without prompts. echarty.js: add ‘mouseout’ event. echarty.js: move legend p_append_data.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-021","dir":"Changelog","previous_headings":"","what":"echarty 0.2.1","title":"echarty 0.2.1","text":"upgrade ECharts v.5.1.2. ec.plugjs: new parameter ask allow/suppress prompts. ec.plugjs: parameter source now accepts ‘file://’ format.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-020","dir":"Changelog","previous_headings":"","what":"echarty 0.2.0","title":"echarty 0.2.0","text":"CRAN release: 2021-06-13 removed dependencies Shiny crosstalk. js2r eshiny now R demos. change leaflet plugin source.data dataset, preset center zoom. built latest R v.4.1.0.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-014","dir":"Changelog","previous_headings":"","what":"echarty 0.1.4","title":"echarty 0.1.4","text":"upgrade ECharts v.5.1.1. fixed p_del_serie seriesName. expand Shiny demo moved ec.examples() gist. replaced purrr apply ec.data, purrr longer dependency. ec.init parameter group1 now also default ungrouped serie. added svg maps, like registerMap=list(list(mapName=?, svg=?)). new ec.layout(), charts layout helper.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-013","dir":"Changelog","previous_headings":"","what":"echarty 0.1.3","title":"echarty 0.1.3","text":"CRAN release: 2021-03-31 crosstalk support added, send & receive brush filter actions. ec.timegrp added, helper build timeline data grouped data.frame. ec.data additional parameter header.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-012","dir":"Changelog","previous_headings":"","what":"echarty 0.1.2","title":"echarty 0.1.2","text":"ec.data now three format values. ec.fromJson now “…” (additional arguments). ecr.band new parameter ‘two’ alternative rendering. error bars added ecr.ebars support grouped data. examples ec.examples. code optimization.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-011","dir":"Changelog","previous_headings":"","what":"echarty 0.1.1","title":"echarty 0.1.1","text":"added ec.plugjs - install unknown plugins, like JS maps. added ec.js2r - JS R translation assistant, Shiny app. ec.init update: one-time install plugins except built-leaflet/custom. GL merged 3D plugin ‘3D’. plugins: liquidfill, world, wordcloud, gmodular. ec.sband renamed ec.band.","code":""},{"path":"https://helgasoft.github.io/echarty/news/index.html","id":"echarty-010","dir":"Changelog","previous_headings":"","what":"echarty 0.1.0","title":"echarty 0.1.0","text":"CRAN release: 2021-02-16 initial release, approved CRAN Feb 16, 2021.","code":""}]
