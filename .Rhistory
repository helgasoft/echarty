p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), #xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
p %>% ec.inspect()
pieces <- list(); for (i in 1:CLUSTER_COUNT) pieces <- append(pieces, list(value=i, label=paste('cluster',i), color=COLOR_ALL[i]))
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), #xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
data <- list(c(3.275154, 2.957587),c(-3.344465, 2.603513),c(0.355083, -3.376585),c(1.852435, 3.547351),c(-2.078973, 2.552013),c(-0.993756, -0.884433),c(2.682252, 4.007573),c(-3.087776, 2.878713),c(-1.565978, -1.256985),c(2.441611, 0.444826),c(-0.659487, 3.111284),c(-0.459601, -2.618005),c(2.17768, 2.387793),c(-2.920969, 2.917485),c(-0.028814, -4.168078),c(3.625746, 2.119041),c(-3.912363, 1.325108),c(-0.551694, -2.814223),c(2.855808, 3.483301),c(-3.594448, 2.856651),c(0.421993, -2.372646),c(1.650821, 3.407572),c(-2.082902, 3.384412),c(-0.718809, -2.492514),c(4.513623, 3.841029),c(-4.822011, 4.607049),c(-0.656297, -1.449872),c(1.919901, 4.439368),c(-3.287749, 3.918836),c(-1.576936, -2.977622),c(3.598143, 1.97597),c(-3.977329, 4.900932),c(-1.79108, -2.184517),c(3.914654, 3.559303),c(-1.910108, 4.166946),c(-1.226597, -3.317889),c(1.148946, 3.345138),c(-2.113864, 3.548172),c(0.845762, -3.589788),c(2.629062, 3.535831),c(-1.640717, 2.990517),c(-1.881012, -2.485405),c(4.606999, 3.510312),c(-4.366462, 4.023316),c(0.765015, -3.00127),c(3.121904, 2.173988),c(-4.025139, 4.65231),c(-0.559558, -3.840539),c(4.376754, 4.863579),c(-1.874308, 4.032237),c(-0.089337, -3.026809),c(3.997787, 2.518662),c(-3.082978, 2.884822),c(0.845235, -3.454465),c(1.327224, 3.358778),c(-2.889949, 3.596178),c(-0.966018, -2.839827),c(2.960769, 3.079555),c(-3.275518, 1.577068),c(0.639276, -3.41284))
CLUSTER_COUNT <- 6; DIENSIION_CLUSTER_INDEX <- 2
COLOR_ALL <- c('#37A2DA', '#e06343', '#37a354', '#b55dba', '#b5bd48', '#8378EA', '#96BFFF')
pieces <- list(); for (i in 1:CLUSTER_COUNT) pieces <- append(pieces, list(value=i, label=paste('cluster',i), color=COLOR_ALL[i]))
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), #xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
p %>% ec.inspect()
pieces <- list(list()); for (i in 1:CLUSTER_COUNT) pieces <- append(pieces, list(value=i, label=paste('cluster',i), color=COLOR_ALL[i]))
pieces <- list(); for (i in 1:CLUSTER_COUNT) pieces <- append(pieces, list(list(value=i, label=paste('cluster',i), color=COLOR_ALL[i])))
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), #xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
p %>% ec.inspect()
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
pieces <- list(); for (i in 0:CLUSTER_COUNT) pieces <- append(pieces, list(list(value=i, label=paste('cluster',i), color=COLOR_ALL[i])))
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
pieces <- list(); for (i in 1:CLUSTER_COUNT) pieces <- append(pieces, list(list(value=i-1, label=paste('cluster',i), color=COLOR_ALL[i])))
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), xAxis=list(x=''),yAxis=list(x=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
p %>% ec.inspect()
p <- ec.init(js='echarts.registerTransform(ecStat.transform.clustering)')
p$x$opts <- list(dataset=list(list(source=data), list(transform=list(type='ecStat:clustering',
config=list( clusterCount=CLUSTER_COUNT,outputType='single',outputClusterIndexDimension=DIENSIION_CLUSTER_INDEX)))),
tooltip=list(position='top'),
visualMap=list(type='piecewise',top='middle',min=0,max=CLUSTER_COUNT,left=10,splitNumber=CLUSTER_COUNT,dimension=DIENSIION_CLUSTER_INDEX,pieces=pieces),
grid=list(left=120), xAxis=list(ii=''),yAxis=list(ii=''),
series=list(type='scatter',encode=list( tooltip=list(0, 1) ),symbolSize=15,itemStyle=list(borderColor='#555'),datasetIndex=1))
p
runApp('C:/DATA/Projects/R/TEST-shiny/ec.jsr.R')
?gsub
?stringr::str_replace_all
str_replace('fruitsu', c("u", "e", "i"), "-")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", c("1", "2", "3"))
colours <- str_c("\\b", colors(), "\\b", collapse="|")
col2hex <- function(col) {
rgb <- col2rgb(col)
rgb(rgb["red", ], rgb["green", ], rgb["blue", ], max = 255)
}
x <- c(
"Roses are red, violets are blue",
"My favourite colour is green"
)
str_replace_all(x, colours, col2hex)
colors()
?str_c
runApp('C:/DATA/Projects/R/TEST-shiny/ec.jsr.R')
?file.exists
?download.file
.libPaths()
detach("package:echarty", unload = TRUE)
library(echarty)
#------ Plugin geo
tmp <- quakes %>% dplyr::relocate('long')
p <- ec.init(load=c('geo'), preset=FALSE)
# p$x$renderer <- "webgl"  # works too
p$x$opts$series[[1]] <- list(
name ='quakes',
type = 'scatter',
coordinateSystem = 'geo',
symbolSize = 5,
itemStyle = list( color='red'),
data = ec.data(tmp, series=TRUE)
)
p$x$opts$legend = list(data = list(list(name = 'quakes')))
p
ec.init
#------ Plugin geo
tmp <- quakes %>% dplyr::relocate('long')
p <- ec.init(load=c('geo'), preset=FALSE)
# p$x$renderer <- "webgl"  # works too
p$x$opts$series[[1]] <- list(
name ='quakes',
type = 'scatter',
coordinateSystem = 'geo',
symbolSize = 5,
itemStyle = list( color='red'),
data = ec.data(tmp, series=TRUE)
)
p$x$opts$legend = list(data = list(list(name = 'quakes')))
p
p <- ec.init(load=c('geo'), preset=FALSE)
p <- ec.init(load=c('geo'), preset=FALSE)
p <- ec.init(load=c('geo'), preset=FALSE)
p$x$opts$geo <- list(map='world', roam=TRUE, silent=TRUE)
# p$x$renderer <- "webgl"  # works too
p$x$opts$series[[1]] <- list(
name ='quakes',
type = 'scatter',
coordinateSystem = 'geo',
symbolSize = 5,
itemStyle = list( color='red'),
data = ec.data(tmp, series=TRUE)
)
p$x$opts$legend = list(data = list(list(name = 'quakes')))
p
ans <- download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', 'C:/temp/worse.js')
?sub
fname='C:/temp/worse.js'
try(withCallingHandlers(
download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', fname, method = "libcurl"),
warning = function(w) {
cat('Dnld Error:', w)
wt <- NULL
}),
silent = TRUE)
try(withCallingHandlers(
download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', fname), #, method = "libcurl"),
warning = function(w) {
cat('Dnld Error:', w)
wt <- NULL
}),
silent = TRUE)
try(withCallingHandlers(
download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', fname), #, method = "libcurl"),
warning = function(w) {
cat('Dnld Error:', w)
wt <- NULL
}),
silent = FALSE)
try(withCallingHandlers(
download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', fname), #, method = "libcurl"),
warning = function(w) {
cat('Dnld Error:', unlist(w))
wt <- NULL
}),
silent = FALSE)
try(withCallingHandlers(
download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', fname), #, method = "libcurl"),
warning = function(w) { browser()
cat('Dnld Error:', unlist(w))
wt <- NULL
}),
silent = FALSE)
wt
w
View(w)
w.message
w$message
sub(".+HTTP status was ", "", w)
try(withCallingHandlers(
download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', fname), #, method = "libcurl"),
warning = function(w) {
cat('Dnld Error:', sub(".+HTTP status was ", "", w))
wt <- NULL
}),
silent = FALSE)
try(withCallingHandlers(
download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', fname), #, method = "libcurl"),
warning = function(w) {
cat('Dnld Error:', sub(".+HTTP status was ", "", w))
wt <- NULL
}),
silent = TRUE)
try(withCallingHandlers(
download.file('https://cdn.jsdelivr.net/npm/echarts@4.9.0/map/js/world3333.js', fname, method = "libcurl"),
warning = function(w) {
cat('Dnld Error:', sub(".+HTTP status was ", "", w))
wt <- NULL
}),
silent = TRUE)
library(echarty)
p <- ec.init(load=c('geo'), preset=FALSE)
p <- ec.init(load=c('geo'), preset=FALSE)
p$x$opts$geo <- list(map='world', roam=TRUE, silent=TRUE)
# p$x$renderer <- "webgl"  # works too
p$x$opts$series[[1]] <- list(
name ='quakes',
type = 'scatter',
coordinateSystem = 'geo',
symbolSize = 5,
itemStyle = list( color='red'),
data = ec.data(tmp, series=TRUE)
)
p$x$opts$legend = list(data = list(list(name = 'quakes')))
p
library(echarty)
p <- ec.init(load=c('geo'), preset=FALSE)
p$x$opts$geo <- list(map='world', roam=TRUE, silent=TRUE)
# p$x$renderer <- "webgl"  # works too
p$x$opts$series[[1]] <- list(
name ='quakes',
type = 'scatter',
coordinateSystem = 'geo',
symbolSize = 5,
itemStyle = list( color='red'),
data = ec.data(tmp, series=TRUE)
)
p$x$opts$legend = list(data = list(list(name = 'quakes')))
p
devtools::release
p$x$opts$geo <- list(map='world', roam=TRUE, silent=TRUE)
# p$x$renderer <- "webgl"  # works too
p$x$opts$series[[1]] <- list(
name ='quakes',
type = 'scatter',
coordinateSystem = 'geo',
symbolSize = 5,
itemStyle = list( color='red'),
data = ec.data(tmp, series=TRUE)
)
p$x$opts$legend = list(data = list(list(name = 'quakes')))
p
?yesno
devtools::yesno
??yesno
askYesNo("Do you want to use askYesNo?")
prompt <- paste0('Plugin not present (',fname,').\n Would you like to download and install ?[Y/n]')
ans <- askYesNo(prompt)
asdfadf
e_cloud
library(echarts4r)
e_cloud
e_cloud_
?e_cloud
?e_modularity
?try
library(echarty)
library(echarty)
p <- ec.init(load=c('liquid'))
p$x$opts$series[[1]] <- list(type='liquidFill', data=c(0.6))
p
library(echarty)
p <- ec.init(load=c('liquid'))
p$x$opts$series[[1]] <- list(type='liquidFill', data=c(0.6))
p
View(p)
p <- ec.init(load=c('liquid'))
p$x$opts$series[[1]] <- list(type='liquidFill', data=c(0.6))
p
p %>% ec.inspect()
p <- ec.init(load='liquid', preset=FALSE)
p$x$opts$series[[1]] <- list(type='liquidFill', data=c(0.6))
p
p %>% ec.inspect()
p <- ec.init(load=c('liquid'))
p$x$opts$series[[1]] <- list(type='liquidFill', data=list(c(0.6)))
p
p <- ec.init(load=c('liquid'), preset=FALSE)
p$x$opts$series[[1]] <- list(type='liquidFill', data=list(c(0.6)))
p
p <- ec.init(load=c('liquid'), preset=FALSE)
p$x$opts$series[[1]] <- list(
type='liquidFill', data=list(c(0.6, 0.5, 0.4, 0.3)),
waveAnimation=FALSE, animationDuration=0, animationDurationUpdate=0
)
p
p %>% ec.inspect()
p <- ec.init(load=c('liquid'), preset=FALSE)
p$x$opts$series[[1]] <- list(
type='liquidFill', data=c(0.6, 0.5, 0.4, 0.3),
waveAnimation=FALSE, animationDuration=0, animationDurationUpdate=0
)
p
p$x$opts$series[[1]] <- list(
type='liquidFill', data=c(0.6, 0.5, 0.4, 0.3), amplitude=0,
waveAnimation=FALSE, animationDuration=0, animationDurationUpdate=0
)
p
tmp <- quakes %>% dplyr::relocate('long')
p <- ec.init(load=c('geo'), preset=FALSE)
p$x$opts$geo <- list(map='world', roam=TRUE, silent=TRUE)
# p$x$renderer <- "webgl"  # works too
p$x$opts$series[[1]] <- list(
name ='quakes',
type = 'scatter',
coordinateSystem = 'geo',
symbolSize = 5,
itemStyle = list( color='red'),
data = ec.data(tmp, series=TRUE)
)
p$x$opts$legend = list(data = list(list(name = 'quakes')))
p
tmp <- jsonlite::fromJSON('https://quote.cnbc.com/quote-html-webservice/quote.htm?noform=1&partnerId=2&fund=1&exthrs=0&output=json&symbolType=issue&symbols=55991|44503|36276|56858|70258|1607179|84090|142105|145043|148633|151846|167459|174239|178782|174614|197606|202757|205141|205778|212856|228324|260531|277095|81364|283359|10808544|283581|286571|89999|522511530&requestMethod=extended')
df <- tmp$ExtendedQuoteResult$ExtendedQuote$QuickQuote
wt <- data.frame(tic=df$symbol, name=df$altName, bn=NA, size=NA, colr=NA, mcap=df$FundamentalData$mktcapView, rev=df$FundamentalData$revenuettm)
wt$bn <- round(as.numeric(gsub('M','',wt$mcap, fixed=TRUE))/1000,1) #mkt.cap
#wt$bn <- round(as.numeric(wt$rev)/1000000000,1)  #revenue
bnMax <- max(wt$bn)
wt$size <- 30 + wt$bn/bnMax * 110
wt$colr <-  c('#ff7f50', '#87cefa', '#da70d6', '#32cd32', '#6495ed','#ff69b4', '#ba55d3', '#cd5c5c', '#ffa500', '#40e0d0','#1e90ff', '#ff6347', '#7b68ee', '#00fa9a', '#ffd700','#6b8e23', '#ff00ff', '#3cb371', '#b8860b', '#30e0e0',
'#929fff', '#9de0ff', '#ffa897', '#af87fe', '#7dc3fe','#bb60b2', '#433e7c', '#f47a75', '#009db2', '#024b51')
p <- ec.init(load='grmod');
p$x$opts <- list(title=list(show=TRUE,text='DOW',x='center',y='bottom',
backgroundColor='rgba(0,0,0,0)',borderColor='#ccc',
borderWidth=0,padding=5,itemGap=10,
textStyle=list(fontSize=18,fontWeight='bolder',color='#eee'),subtextStyle=list(color='#aaa')),backgroundColor='#000',
tooltip=list(trigger='item', formatter = htmlwidgets::JS("function(params){
//console.log('prm=',params);
return('<strong>' + params.data.lname +
'</strong><br />' + params.data.value + 'bn') }"
)),
animationDurationUpdate = "function(idx) list(return idx * 100; )",
animationEasingUpdate = 'bounceIn',
series = list(list(type='graph',
layout='force', force=list(repulsion=250,edgeLength=10),
modularity = TRUE,
roam=TRUE, label=list(show=TRUE),
data = lapply(ec.data(wt,TRUE), function(x)
list(name = x$value[1], lname=x$value[2], value=x$value[3], symbolSize=x$value[4],
draggable=TRUE, itemStyle=list(shadowBlur=10, shadowColor=x$value[5],color=x$value[5] )
)) ))
)
p
p <- ec.init(load='grmod');
p$x$opts <- list(title=list(show=TRUE,text='DOW',x='center',y='bottom',
backgroundColor='rgba(0,0,0,0)',borderColor='#ccc',
borderWidth=0,padding=5,itemGap=10,
textStyle=list(fontSize=18,fontWeight='bolder',color='#eee'),subtextStyle=list(color='#aaa')),backgroundColor='#000',
tooltip=list(trigger='item', formatter = htmlwidgets::JS("function(params){
//console.log('prm=',params);
return('<strong>' + params.data.lname +
'</strong><br />' + params.data.value + 'bn') }"
)),
animationDurationUpdate = "function(idx) list(return idx * 100; )",
animationEasingUpdate = 'bounceIn',
series = list(list(type='graph',
layout='force', force=list(repulsion=250,edgeLength=10),
modularity = 10, #TRUE,
roam=TRUE, label=list(show=TRUE),
data = lapply(ec.data(wt,TRUE), function(x)
list(name = x$value[1], lname=x$value[2], value=x$value[3], symbolSize=x$value[4],
draggable=TRUE, itemStyle=list(shadowBlur=10, shadowColor=x$value[5],color=x$value[5] )
)) ))
)
p
p$x$opts <- list(title=list(show=TRUE,text='DOW',x='center',y='bottom',
backgroundColor='rgba(0,0,0,0)',borderColor='#ccc',
borderWidth=0,padding=5,itemGap=10,
textStyle=list(fontSize=18,fontWeight='bolder',color='#eee'),subtextStyle=list(color='#aaa')),backgroundColor='#000',
tooltip=list(trigger='item', formatter = htmlwidgets::JS("function(params){
//console.log('prm=',params);
return('<strong>' + params.data.lname +
'</strong><br />' + params.data.value + 'bn') }"
)),
animationDurationUpdate = "function(idx) list(return idx * 100; )",
animationEasingUpdate = 'bounceIn',
series = list(list(type='graph',
layout='force', force=list(repulsion=250,edgeLength=10),
modularity = list(resolution=7, sort=TRUE), #10, #TRUE,
roam=TRUE, label=list(show=TRUE),
data = lapply(ec.data(wt,TRUE), function(x)
list(name = x$value[1], lname=x$value[2], value=x$value[3], symbolSize=x$value[4],
draggable=TRUE, itemStyle=list(shadowBlur=10, shadowColor=x$value[5],color=x$value[5] )
)) ))
)
p
p$x$opts <- list(title=list(show=TRUE,text='DOW',x='center',y='bottom',
backgroundColor='rgba(0,0,0,0)',borderColor='#ccc',
borderWidth=0,padding=5,itemGap=10,
textStyle=list(fontSize=18,fontWeight='bolder',color='#eee'),subtextStyle=list(color='#aaa')),backgroundColor='#000',
tooltip=list(trigger='item', formatter = htmlwidgets::JS("function(params){
//console.log('prm=',params);
return('<strong>' + params.data.lname +
'</strong><br />' + params.data.value + 'bn') }"
)),
animationDurationUpdate = "function(idx) list(return idx * 100; )",
animationEasingUpdate = 'bounceIn',
series = list(list(type='graph',
layout='force', force=list(repulsion=250,edgeLength=10),
modularity = list(resolution=7, sort=TRUE), #10, #TRUE,
roam=TRUE, label=list(show=TRUE),
data = lapply(ec.data(wt,TRUE), function(x)
list(name = x$value[1], lname=x$value[2], value=x$value[3], symbolSize=x$value[4],
draggable=TRUE, #itemStyle=list(shadowBlur=10, shadowColor=x$value[5],color=x$value[5] )
)) ))
)
p
p$x$opts <- list(title=list(show=TRUE,text='DOW',x='center',y='bottom',
backgroundColor='rgba(0,0,0,0)',borderColor='#ccc',
borderWidth=0,padding=5,itemGap=10,
textStyle=list(fontSize=18,fontWeight='bolder',color='#eee'),subtextStyle=list(color='#aaa')),backgroundColor='#000',
tooltip=list(trigger='item', formatter = htmlwidgets::JS("function(params){
//console.log('prm=',params);
return('<strong>' + params.data.lname +
'</strong><br />' + params.data.value + 'bn') }"
)),
animationDurationUpdate = "function(idx) list(return idx * 100; )",
animationEasingUpdate = 'bounceIn',
series = list(list(type='graph',
layout='force', force=list(repulsion=250,edgeLength=10),
modularity = list(resolution=7, sort=TRUE), #TRUE,
roam=TRUE, label=list(show=TRUE),
data = lapply(ec.data(wt,TRUE), function(x)
list(name = x$value[1], lname=x$value[2], value=x$value[3], symbolSize=x$value[4],
draggable=TRUE #, itemStyle=list(shadowBlur=10, shadowColor=x$value[5],color=x$value[5] )
)) ))
)
p
wt <- data.frame(tic=df$symbol, name=df$altName, bn=NA, size=NA, colr=NA, mcap=df$FundamentalData$mktcapView, rev=df$FundamentalData$revenuettm)
wt$bn <- round(as.numeric(gsub('M','',wt$mcap, fixed=TRUE))/1000,1) #mkt.cap
#wt$bn <- round(as.numeric(wt$rev)/1000000000,1)  #revenue
bnMax <- max(wt$bn)
wt$size <- 10 + wt$bn/bnMax * 110
wt$colr <-  c('#ff7f50', '#87cefa', '#da70d6', '#32cd32', '#6495ed','#ff69b4', '#ba55d3', '#cd5c5c', '#ffa500', '#40e0d0','#1e90ff', '#ff6347', '#7b68ee', '#00fa9a', '#ffd700','#6b8e23', '#ff00ff', '#3cb371', '#b8860b', '#30e0e0',
'#929fff', '#9de0ff', '#ffa897', '#af87fe', '#7dc3fe','#bb60b2', '#433e7c', '#f47a75', '#009db2', '#024b51')
p <- ec.init(load='grmod');
p$x$opts <- list(title=list(show=TRUE,text='DOW',x='center',y='bottom',
backgroundColor='rgba(0,0,0,0)',borderColor='#ccc',
borderWidth=0,padding=5,itemGap=10,
textStyle=list(fontSize=18,fontWeight='bolder',color='#eee'),subtextStyle=list(color='#aaa')),backgroundColor='#000',
tooltip=list(trigger='item', formatter = htmlwidgets::JS("function(params){
//console.log('prm=',params);
return('<strong>' + params.data.lname +
'</strong><br />' + params.data.value + 'bn') }"
)),
animationDurationUpdate = "function(idx) list(return idx * 100; )",
animationEasingUpdate = 'bounceIn',
series = list(list(type='graph',
layout='force', force=list(repulsion=250,edgeLength=10),
modularity = list(resolution=7, sort=TRUE), #TRUE,
roam=TRUE, label=list(show=TRUE),
data = lapply(ec.data(wt,TRUE), function(x)
list(name = x$value[1], lname=x$value[2], value=x$value[3], symbolSize=x$value[4],
draggable=TRUE #, itemStyle=list(shadowBlur=10, shadowColor=x$value[5],color=x$value[5] )
)) ))
)
p
wt <- data.frame(tic=df$symbol, name=df$altName, bn=NA, size=NA, colr=NA, mcap=df$FundamentalData$mktcapView, rev=df$FundamentalData$revenuettm)
wt$bn <- round(as.numeric(gsub('M','',wt$mcap, fixed=TRUE))/1000,1) #mkt.cap
#wt$bn <- round(as.numeric(wt$rev)/1000000000,1)  #revenue
bnMax <- max(wt$bn)
wt$size <- 30 + wt$bn/bnMax * 140
wt$colr <-  c('#ff7f50', '#87cefa', '#da70d6', '#32cd32', '#6495ed','#ff69b4', '#ba55d3', '#cd5c5c', '#ffa500', '#40e0d0','#1e90ff', '#ff6347', '#7b68ee', '#00fa9a', '#ffd700','#6b8e23', '#ff00ff', '#3cb371', '#b8860b', '#30e0e0',
'#929fff', '#9de0ff', '#ffa897', '#af87fe', '#7dc3fe','#bb60b2', '#433e7c', '#f47a75', '#009db2', '#024b51')
p <- ec.init(load='grmod');
p$x$opts <- list(title=list(show=TRUE,text='DOW',x='center',y='bottom',
backgroundColor='rgba(0,0,0,0)',borderColor='#ccc',
borderWidth=0,padding=5,itemGap=10,
textStyle=list(fontSize=18,fontWeight='bolder',color='#eee'),subtextStyle=list(color='#aaa')),backgroundColor='#000',
tooltip=list(trigger='item', formatter = htmlwidgets::JS("function(params){
//console.log('prm=',params);
return('<strong>' + params.data.lname +
'</strong><br />' + params.data.value + 'bn') }"
)),
animationDurationUpdate = "function(idx) list(return idx * 100; )",
animationEasingUpdate = 'bounceIn',
series = list(list(type='graph',
layout='force', force=list(repulsion=250,edgeLength=10),
modularity = list(resolution=7, sort=TRUE), #TRUE,
roam=TRUE, label=list(show=TRUE),
data = lapply(ec.data(wt,TRUE), function(x)
list(name = x$value[1], lname=x$value[2], value=x$value[3], symbolSize=x$value[4],
draggable=TRUE #, itemStyle=list(shadowBlur=10, shadowColor=x$value[5],color=x$value[5] )
)) ))
)
p
